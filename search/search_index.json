{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":""},{"location":"#hypercubing","title":"Hypercubing","text":"<p>Hypercubing is a niche branch of Rubik\u2019s Cubing that focuses on solving higher dimensional twisty puzzles. The ways that twisty puzzles move are mathematically well defined, and can be generalized to higher spatial dimensions. These puzzles can then be visualized and simulated using computer software.</p> <p>The most well known 4D shape is the hypercube (also called the tesseract, 8-cell, octachoron, or 4-cube). It has 8 cubic sides that are called cells. Turning any of the cells involves rotating it like a cube to any of 24 orientations.</p> <p>The short article Abstracting the Rubik\u2019s Cube introduces a number of the hypercubing puzzles.</p> <ul> <li> <p> Introduction to 4D</p> <p>Learn how the fourth dimension works</p> </li> <li> <p> Frequently Asked Questions</p> <p>Get answers to common questions</p> </li> <li> <p> Introduction to Hypercubing</p> <p>Jump into hands-on hypercubing</p> </li> <li> <p> Software</p> <p>Download hypercubing programs</p> </li> <li> <p> Discord server</p> <p>Chat with other hypercubers</p> </li> <li> <p> Progression</p> <p>Solve puzzles to build specific skills</p> </li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Welcome! If you\u2019d like to contribute, join the #wiki channel on the Discord server and ask what you can do to help or let us know what changes you want to make.</p> <p>If you aren\u2019t familiar with creating pull requests on GitHub, see this quick video tutorial.</p>"},{"location":"contributing/#setup","title":"Setup","text":"<ol> <li>Install Python 3.9 or later</li> <li>Install Git</li> <li>Clone the repository and install requirements:</li> </ol> <pre><code>git clone https://github.com/Hypercubers/hypercubing.xyz\ncd hypercubing.xyz\npython3 -m pip install -r requirements.txt --user\n</code></pre> <p>Run <code>python3 -m mkdocs serve</code> and go to http://127.0.0.1:8000/ in your web browser. As you edit files, the page will automatically refresh to show your changes.</p>"},{"location":"contributing/#file-layout","title":"File layout","text":"<p>Markdown files should have lowercase names, with hyphens to separate words. Choose shorter names when possible.</p>"},{"location":"contributing/#pages","title":"<code>.pages</code>","text":"<p>Some folders have a <code>.pages</code> file in them, which changes the order of pages in the navigation sidebar on the left. This uses the mkdocs-awesome-pages-plugin. Most of the time, you shouldn\u2019t have to worry about this.</p>"},{"location":"contributing/#syntax","title":"Syntax","text":"<p>This site uses Markdown.</p> <p>For linking between files within the site, use an absolute link like this with no trailing <code>.md</code>:</p> <pre><code>[Melinda's physical 2^4^](puzzles/physical/2x2x2x2/index.md) was the first 4D puzzle to have a 3D physical design.\n</code></pre> <p>This site uses the Material for MkDocs theme; in particular, this gives us admonitions, tables, footnotes, and subscripts &amp; superscripts. We also have MathJax, which uses <code>$</code> symbols:</p> <pre><code>The $n$th Fibonacci number is given by $F_n = F_{n-1} + F_{n-2}$.\n</code></pre> <p>The \\(n\\)th Fibonacci number is given by \\(F_n = F_{n-1} + F_{n-2}\\).</p>"},{"location":"contributing/#adding-images","title":"Adding images","text":"<p>We are hosting images using a private Nextcloud instance hosted on DigitalOcean. Contact HactarCE on Discord to get access to add images to be hosted there. Once you have an image somewhere in the <code>assets</code> folder, you can embed it in a page. When including any image, be sure to include a brief text description of the image for screen readers. For example:</p> <pre><code>![Erno Rubik inspecting Melinda's 2x2x2x2](https://assets.hypercubing.xyz/img/phys/melinda_2x2x2x2_erno_inspects.jpg)\n</code></pre>"},{"location":"contributing/#naming-images","title":"Naming images","text":"<ul> <li>Organize images into folders when possible. If you\u2019re adding many related images, consider making a new folder for them.</li> <li>Use underscores when naming.</li> <li>Use only lowercase, except when the filename includes twist notation.</li> <li>Try to stay consistent with existing filenames.</li> </ul>"},{"location":"contributing/#abbreviations","title":"Abbreviations","text":"<p>Abbreviations are listed in <code>includes/abbreviations.md</code>. Be careful adding new ones, lest you create another Grant Standingslice incident.</p>"},{"location":"contributing/#style","title":"Style","text":"<p>When naming a puzzle with a product in its name, prefer the cross symbol <code>x</code> over <code>x</code> (e.g. <code>3x3x3x3</code> vs. <code>3x3x3x3</code>). By using the unicode <code>x</code> in the source file, the site will automatically make it searchable using <code>x</code>. In an environment where you cannot use unicode <code>x</code>, use the HTML escape <code>&amp;times;</code>.</p>"},{"location":"discord/","title":"Discord","text":"<p>How did you get here?</p> <p>This page is supposed to redirect to the Discord server.</p>"},{"location":"faq/","title":"FAQ","text":""},{"location":"faq/#other-faqs","title":"Other FAQs","text":"<ul> <li>MC4D FAQ on superliminal.com</li> <li>quickfur\u2019s 4D FAQ on qfbox.info</li> </ul>"},{"location":"faq/#table-of-contents","title":"Table of contents","text":"<ul> <li>What is hypercubing?<ul> <li>Isn\u2019t the 4th dimension time?</li> <li>How can we visualize 4D?</li> <li>Where can I interact with other hypercubers?</li> </ul> </li> <li>Virtual puzzles<ul> <li>What program should I download?</li> <li>How do I learn to solve 3x3x3x3?</li> <li>What methods exist for the 3x3x3x3?</li> <li>Why not start with the physical 2x2x2x2?</li> <li>Why not start with the virtual 2x2x2x2?</li> <li>What is God\u2019s number for [puzzle]?</li> </ul> </li> <li>Physical puzzles<ul> <li>What is a physical 4D puzzle</li> <li>How can I buy a physical 2x2x2x2?</li> <li>How can I buy other physical puzzles?</li> <li>What physical 4D puzzles have been built?</li> <li>What physical 4D puzzles are possible?</li> </ul> </li> <li>Hyperspeedcube<ul> <li>Does Hyperspeedcube run on my OS?</li> <li>I get an error when I try to run Hyperspeedcube</li> <li>How do I use keybinds in Hyperspeedcube?</li> <li>How do I use piece filters in Hyperspeedcube?</li> </ul> </li> <li>Speedsolving<ul> <li>What are the speedsolving records for 4D puzzles?</li> <li>Why not use speedrun.com?</li> <li>I don\u2019t know full OLL/PLL/ZBLL/etc. Can I still get fast at 4D?</li> <li>What 4D algorithms are there?</li> </ul> </li> <li>Does this puzzle exist?<ul> <li>4D Square-1</li> <li>4D Skewb</li> <li>8-dimensional and higher</li> <li>3D Rubik\u2019s Clock</li> <li>How do I make a 4D [thing]?</li> </ul> </li> </ul>"},{"location":"faq/#what-is-hypercubing","title":"What is hypercubing?","text":"<p>Hypercubing is the hobby of solving 4D+ puzzles in higher dimensions and exotic geometries.</p>"},{"location":"faq/#isnt-the-4th-dimension-time","title":"Isn\u2019t the 4th dimension time?","text":"<p>While time is one dimension in 4D spacetime, it behaves completely differently from the three spatial dimensions. Hypercubing deals with higher dimensions of space, where all dimensions are interchangeable.</p>"},{"location":"faq/#how-can-we-visualize-4d","title":"How can we visualize 4D?","text":"<p>Our eyes see only a 2D projection of the 3D world, and we\u2019re able to reconstruct the 3D world around us with only minimal difficulty. Using mathematics, we can project a 4D shape onto 3D, and then project that 3D shape onto 2D to be displayed on a computer screen. With enough practice, it\u2019s possible to reason intuitively about higher-dimensional space using these visualizations.</p>"},{"location":"faq/#where-can-i-interact-with-other-hypercubers","title":"Where can I interact with other hypercubers?","text":"<ul> <li>The Hypercubers Discord Server has the most active community of hypercubers and contains the latest updates on developing projects and speedsolving strategies.</li> <li>The Hypercubing Google Group is a good option for those who prefer mailing lists or less frequent updates.</li> <li>The r/Hypercubers subreddit is mostly inactive.</li> </ul> <p>Before the Google Group or Discord server, there was a Yahoo Groups mailing list. Those messages are archived here.</p>"},{"location":"faq/#virtual-puzzles","title":"Virtual puzzles","text":""},{"location":"faq/#what-program-should-i-download","title":"What program should I download?","text":"<p>See the software page for a list of hypercubing software and feature comparisons.</p>"},{"location":"faq/#how-do-i-learn-to-solve-the-3333","title":"How do I learn to solve the 3x3x3x3?","text":"<p>We highly recommend that you figure out how to solve the 3<sup>4</sup> on your own. It\u2019s a fantastic puzzle and you\u2019ll learn a lot!</p> <ol> <li>Learn how to solve a 3x3x3, ideally intuitively. There are plenty of tutorials online, although you should try it on your own first. It\u2019s a good challenge!</li> <li>Download Hyperspeedcube or use the web version.</li> <li>Follow this video to get aquainted with the program:</li> </ol> <p>Once you feel comfortable solving 3<sup>3</sup> from a full scramble and 3<sup>4</sup> from a 1-move scramble, you know everything you need to do a full solve. If you get stuck, you can ask for help on the Hypercubers Discord server.</p>"},{"location":"faq/#what-methods-exist-for-the-3333","title":"What methods exist for the 3x3x3x3?","text":"<p>Many 3D methods can just be scaled up and used on the 4D cube. Some notable methods are:</p> <ul> <li>Layer-by-layer</li> <li>By piece type</li> <li>CFOP</li> <li>3-Block (4D FreeFOP)</li> <li>Octachoroux (4D Roux)</li> </ul>"},{"location":"faq/#how-do-i-start-learning-to-solve-4d-puzzles","title":"How do I start learning to solve 4D puzzles?","text":"<p>First, download Hyperspeedcube or MC4D and start experimenting with the 3<sup>4</sup>! Try to solve one-move scrambles and keep practicing that until you\u2019re comfortable. Once you can solve one-move scrambles with ease, pick a method to learn.</p>"},{"location":"faq/#why-not-start-with-the-physical-2222","title":"Why not start with the physical 2x2x2x2?","text":"<p>You will never understand physical puzzles before understanding virtual puzzles. Computer simulations are the most direct way to experience 4D puzzles, and it\u2019s what all physical puzzles are emulating. It\u2019s effectively impossible to develop new physical puzzles without first understanding the equivalent virtual puzzles.</p> <p>Grant Staten</p> <p>I think that approaching hypercubing by starting with only physical puzzles does not lead to an understanding of how the puzzles actually work. Even if you can solve them.</p> <p>Before I touched a virtual puzzle, I had:</p> <ul> <li>almost gotten sub-2 on a physical 2<sup>4</sup> I\u2019d built</li> <li>started building physical 2x2x2x3</li> <li>rendered physical 2x2x2x3, 2x2x3x3, 2x3x3x3 (piggybacking off of Luna\u2019s work and just following patterns in place)</li> </ul> <p>However, looking back, I 100% honestly did not yet understand how any of those puzzles actually worked at the time.</p> <p>I have absolutely nothing against someone only focusing on physical puzzles. But in my experience you don\u2019t gain an actual understanding of how the puzzles work through solely using the physical puzzles.</p>"},{"location":"faq/#why-not-start-with-the-virtual-2222","title":"Why not start with the virtual 2x2x2x2?","text":"<p>The 2<sup>4</sup> is particularly disorienting for beginners because half of the puzzle turns at once. As a result, while the 2<sup>4</sup> strategy is technically simpler, it\u2019s actually more challenging to wrap your head around, especially when you\u2019re new to 4D puzzles. Just like how the 3<sup>3</sup> is a better starting puzzle in 3D, you can learn lots of important concepts from the 3<sup>4</sup> that will help you with other 4D puzzles.</p> <p>Sergej Volkov</p> <p>I regret not starting with a 3<sup>4</sup>. I first solved virtual 2<sup>4</sup> using Rowan\u2019s physical method and it was extremely painful and did not really help to develop any 4D intuition. I ended up just drawing the physical representation of the puzzle on a piece of paper.</p>"},{"location":"faq/#what-is-gods-number-for-puzzle","title":"What is God\u2019s number for [puzzle]?","text":"<p>See God\u2019s Number.</p>"},{"location":"faq/#physical-puzzles","title":"Physical puzzles","text":""},{"location":"faq/#what-is-a-physical-4d-puzzle","title":"What is a physical 4D puzzle","text":"<p>The physical 4D puzzles are puzzles that are perfectly analogous to the virtual 4D puzzles, but implemented in the physical world. See these links:</p> <ul> <li>Physical Puzzles on this site</li> <li>Physical Puzzle on the Superliminal Wiki</li> <li>Rowan Fortier\u2019s video about the history of physical hypercubes</li> </ul>"},{"location":"faq/#how-can-i-buy-a-physical-2222","title":"How can I buy a physical 2x2x2x2?","text":"<p>See the Ordering Melinda\u2019s 2x2x2x2 on the Superliminal website. Also see Melinda\u2019s 2x2x2x2 on the Superliminal site, which includes the history, statistics, and Hall of Fame.</p>"},{"location":"faq/#how-can-i-buy-other-physical-puzzles","title":"How can I buy other physical puzzles?","text":"<p>Melinda\u2019s 2<sup>4</sup> is the only physical puzzle for sale. The physical 3<sup>4</sup> and hypercuboids are currently one-of-a-kind. If you want one, you need to design and 3D print it yourself.</p>"},{"location":"faq/#what-physical-4d-puzzles-have-been-built","title":"What physical 4D puzzles have been built?","text":"<p>See Physical Puzzles for a comprehensive list.</p>"},{"location":"faq/#what-physical-4d-puzzles-are-possible","title":"What physical 4D puzzles are possible?","text":"<p>While it\u2019s always possible to just arrange the stickers on a table, the real challenge is in finding a design that is piece-based instead of sticker-based and fits in a compact shape that isn\u2019t too horrendous to turn. This requires some out-of-the-box thinking and, in extreme cases, application of group theory. We currently have several renderings for physical puzzles that haven\u2019t been built in real life yet; see the Physical Puzzles page for an incomplete list.</p>"},{"location":"faq/#hyperspeedcube","title":"Hyperspeedcube","text":""},{"location":"faq/#does-hyperspeedcube-run-on-my-os","title":"Does Hyperspeedcube run on my OS?","text":"<p>Hyperspeedcube runs natively on Windows, macOS, and Linux. There is also a web version, which runs on Chromebooks or other devices where the downloaded version does not work. See []</p>"},{"location":"faq/#i-get-an-error-when-i-try-to-run-hyperspeedcube","title":"I get an error when I try to run Hyperspeedcube","text":"<p>See Hyperspeedcube - Troubleshooting.</p>"},{"location":"faq/#how-do-i-use-keybinds-in-hyperspeedcube","title":"How do I use keybinds in Hyperspeedcube?","text":""},{"location":"faq/#how-do-i-use-piece-filters-in-hyperspeedcube","title":"How do I use piece filters in Hyperspeedcube?","text":""},{"location":"faq/#speedsolving","title":"Speedsolving","text":""},{"location":"faq/#what-are-the-speedsolving-records-for-4d-puzzles","title":"What are the speedsolving records for 4D puzzles?","text":"<p>See the leaderboards. To get on the leaderboard, read the submission guidelines and submit a video of your solve to this form.</p>"},{"location":"faq/#why-not-use-speedruncom","title":"Why not use speedrun.com?","text":"<p>Speedrun.com does not allow \u201cgeneric Rubik\u2019s Cube simulators.\u201d We applied and were rejected.</p>"},{"location":"faq/#i-dont-know-full-ollpllzblletc-can-i-still-get-fast-at-4d","title":"I don\u2019t know full OLL/PLL/ZBLL/etc. Can I still get fast at 4D?","text":"<p>Absolutely! Most 4D speed methods are highly intuitive, and world-record times often use just 2-look OLL and PLL. Executing algorithms is a very negligible part of the solve compared to the massive amounts of pair or block building.</p>"},{"location":"faq/#what-4d-algorithms-are-there","title":"What 4D algorithms are there?","text":"<p>There\u2019s so many cases for each step of the solve that creating a complete algorithm set is basically impossible, and there\u2019s so many options for moves that algorithm explorers are infeasible. Almost every algorithm we have is based on an algorithm from 3D, and the only search program we have is a sort of optimizer for one very specific kind of algorithm derived from 3D.</p>"},{"location":"faq/#does-this-puzzle-exist","title":"Does this puzzle exist?","text":""},{"location":"faq/#4d-square-1","title":"4D Square-1","text":"<p>Square-1 is fundamentally a bandaged dodecagonal prism. There are so many ways to extend that into 4D that there isn\u2019t really a canonical \u201c4D square-1\u201d</p>"},{"location":"faq/#4d-skewb","title":"4D Skewb","text":"<p>Again, there\u2019s lots of ways to generalize a skewb. If you just want cuts that look like a skewb, there\u2019s a few different puzzles that emulate that. If you want a half-cut vertex-turning hypercube, that\u2019s a thing too! It just doesn\u2019t \u201clook like\u201d a traditional skewb. For more 4D skewbs, including pictures, see here.</p>"},{"location":"faq/#8-dimensional-and-higher","title":"8-dimensional and higher","text":"<p>Above 5 dimensions, cube puzzles aren\u2019t more difficult or interesting, just more tedious and computationally expensive. But there might be some wild hyperpuzzles yet to be discovered up there, say one based on the very special geometry of the E8 Lattice!</p>"},{"location":"faq/#3d-rubiks-clock","title":"3D Rubik\u2019s Clock","text":"<p>Instead of rotating circles in 2D, you can rotate spheres in 3D. This is a more interesting puzzle than the traditional Rubik\u2019s Clock because moves don\u2019t commute. No one\u2019s written a program yet to simulate it but you totally could!</p>"},{"location":"faq/#how-do-i-make-a-4d-thing","title":"How do I make a 4D [thing]?","text":"<p> Generalising Things to 4D: A Handy Guide </p> <ol> <li>Understand and define the thing you\u2019re generalising</li> <li>Find where your definitions reference or assume something dimension-specific</li> <li>Rewrite your definitions to avoid dimension-specific references or assumptions</li> <li>Find what 4D object fits your new definitions (there may be one, several, or none)</li> </ol>"},{"location":"glossary/","title":"Glossary","text":"<p>This is a glossary of terms used in the hypercubing community. We take a mostly prescriptivist<sup>1</sup> approach: terminology has a great effect on how we think about puzzles, and we try to be mindful when naming concepts and inventing notation to ensure that they encourage better understanding of puzzles and are useful in as many contexts as possible.</p> <p>Before you propose new terminology \u2026</p> <p>We\u2019ve wrestled in the past with poor terminology that actively hurt understanding. First, gain hands-on experience and intuition for the thing you want to describe, and then see what terms are actually needed. There\u2019s no value in making up words for the pieces on a 7-dimensional puzzle, for example, if there\u2019s no need to communicate about them.</p>"},{"location":"glossary/#puzzle-elements","title":"Puzzle elements","text":"<p>A 1-dimensional turning axis is not always well-defined for higher-dimensional puzzles, because rotations generally happen in a plane, not around an axis.</p>"},{"location":"glossary/#polytope-elements","title":"Polytope elements","text":"<p>For an \\(N\\)-dimensional polytope:</p> <ul> <li>vertex = rank 0, single point</li> <li>edge = rank 1, line connecting two vertices</li> <li>face = rank 2, polygon constructed from edges</li> <li>cell = rank 3, polyhedron constructed from faces</li> <li>\u2026</li> <li>\\(n\\)-face = rank \\(n\\), polytope constructed from rank \\(n-1\\) elements</li> <li>\u2026</li> <li>facet = rank \\(N-1\\), polytope constructed from rank \\(N-2\\) elements</li> </ul> <p>In 4D, we prefer facet rather than cell. In simple terms: on most puzzles, a facet is the thing with a single color.</p>"},{"location":"glossary/#pieces","title":"Pieces","text":"<p>Some of these terms are from Polytope - Wikipedia.</p> <p>Basic definitions for an \\(N\\)-dimensional hypercubic puzzle:</p> <ul> <li>corner = piece with \\(N\\) colors (4 colors in 4D)</li> <li>edge = piece with \\(N-1\\) colors (3 colors in 4D)</li> <li>peak or 3c = piece with 3 colors (5D+)</li> <li>ridge or 2c = piece with 2 colors (4D+)</li> <li>center or 1c = piece with 1 color</li> </ul> <p>We prefer words rather than 1c, 2c, etc. because the words generalize better to other, non-facet-turning puzzles and describe how a piece behaves rather than how it looks.</p>"},{"location":"glossary/#moves","title":"Moves","text":"<ul> <li>axis or turning axis = ray start from the center of the puzzle, around which puzzle elements rotate during twists</li> <li>twist or move or turn = movement of pieces that changes the puzzle state</li> <li>rotation or full-puzzle rotation = rotation of the whole puzzle that does not change its state</li> </ul>"},{"location":"glossary/#solving","title":"Solving","text":""},{"location":"glossary/#actions","title":"Actions","text":"<p>An action is sequence of moves that preserves invariants of the stage. Usually, an action keeps certain pieces solved. For example, when a 4<sup>n</sup> has been reduced to a 3<sup>n</sup> using big cube reduction, outer layer moves are the only actions. In this case, the actions are reduced moves. Another common set of actions is RKT.</p>"},{"location":"glossary/#parity","title":"Parity","text":"<p>There is no community consensus on the definitions of parity. Below are some proposed definitions:</p> <ul> <li>group theory parity = a case where the puzzle is in an unexpected coset</li> <li>cuber parity = a case that is difficult to solve that the solver didn\u2019t expect<ul> <li>Melinda\u2019s definition: a local maximum, where the puzzle is largely solved but requires many moves to fix</li> <li>Hactar\u2019s definition: a case which cannot be solved using the actions expected at this stage in the solve</li> </ul> </li> </ul> <p>None of these definitions are satisfactory. According to most of these definitions, RKT parity is not parity at all, but is more accurately called \u201cRKT error.\u201d According to Melinda\u2019s definition, most PLL cases are parity. The first definition given for \u201ccuber parity\u201d is highly subjective, but is the only one that captures its current use.</p> <p>Open questions</p> <ul> <li>Is there a definition for \u201ccuber parity\u201d that captures the way it\u2019s naturally used?</li> <li>Is there a catchy term we can use instead of \u201cRKT parity\u201d? Melinda proposes \u201cRKT error.\u201d</li> </ul>"},{"location":"glossary/#f2l","title":"F2L","text":"<p>F2L is a very general solving strategy that works by building a small block of pieces and then inserting the block into its solved position. F2L stands for \u201cfirst two layers\u201d because it was originally developed to solve the first two layers of 3<sup>3</sup>, but in hypercubing we use it for many other puzzles.</p>"},{"location":"glossary/#f2l-axes","title":"F2L axes","text":"<ul> <li>free axes = axes which affect only unsolved pieces; can be turned freely</li> <li>side axes = axes which affect some unsolved pieces and some solved pieces; can be turned, but must be turned back to restore solved pieces</li> <li>base axes = non-free and non-side axis that is not completely solved; usually mostly solved, rarely turned during F2L</li> <li>top axis = the free axis currently being worked on</li> </ul> <p>Examples</p> <ul> <li>In F2L on a 3<sup>3</sup>, <code>D</code> is the only base axis, <code>U</code> is the top axis (the only free axis), and <code>R</code>, <code>L</code>, <code>F</code>, &amp; <code>B</code> are all side axes.</li> <li>When beginning F2L on a megaminx there are, 6 free axes, 5 side axes, and 1 base axis.</li> <li>Near the end of F2L on a megaminx there are, 1 free axis, 5 side axes, and 5 base axes.</li> </ul> <p>We use the letter <code>T</code> to represent the top axis, <code>R</code> &amp; <code>F</code> to represent intersecting side axes, and <code>R</code> &amp; <code>L</code> to represent non-intersecting side axes.</p>"},{"location":"glossary/#f2l-blocks","title":"F2L blocks","text":"<p>An F2L block or pair is a group of pieces that is paired and solved as one unit. There\u2019s usually a head and body, where the head intersects with more twisting axes than the body.</p> <p>The base sticker of a head is the sticker which will be facing the base axis when it is solved. The facing direction of the head of a block is whatever direction its base sticker is facing. The facing direction of the body of a block is the same as the head, when they are paired. This notion of which direction a head or body faces gives a way to describe edge orientation before the pieces have been paired, which is helpful especially in 4D+ where edge orientation is otherwise difficult to define.</p> <p>Examples</p> <ul> <li>On the 3<sup>3</sup> an F2L pair consists of a corner (the head) and an edge (the body).</li> <li>On the 3<sup>4</sup>, an F2L-a pair consists of an edge (the head) and a ridge (the body).</li> </ul> <ul> <li>paired = fully assembled</li> <li>split pair = one move away from paired, or can be paired as part of inserting the block</li> </ul>"},{"location":"glossary/#f2l-action-terminology","title":"F2L action terminology","text":"<ul> <li>breaking the base = unsolving some pieces that were solved</li> <li>restoring the base = re-solving some pieces</li> <li>push = a twist of a side axis that breaks the base and puts new pieces on top</li> <li>pull = a twist of a side axis that restores the base and puts new pieces on top</li> <li>overpush = push again after pushing (e.g., R U R U R2\u2019)</li> <li>overpull = push as a continuation of a pull (e.g., R U R2\u2019 U\u2019 R)</li> <li>push pair = formation of a pair via a push</li> <li>pull pair = formation of a pair via a pull</li> <li>hide = to remove a piece from the top (using a push or pull)</li> <li>reveal = to bring a piece to the top (using a push or pull)</li> <li>rebase or reorient = to reorient a piece to face a different direction (i.e., change where its base sticker is facing)</li> <li>cap = to twist <code>T</code> to form a pair (where the head is on top and the body is not on the top)</li> <li>uncap = to separate the head and body of a pair by twisting <code>T</code></li> </ul> <p>Open question</p> <p>What should we call a move like <code>RT</code> on 3<sup>4</sup>, which doesn\u2019t change the set of pieces on <code>T</code> and might or might not unsolve some pieces?</p>"},{"location":"glossary/#methods-in-higher-dimensions","title":"Methods in higher dimensions","text":"<p>In higher and higher dimensions, it gets annoying to have to say stuff like \u201cpermuting the last cell of the last cell of the\u2026\u201d etc. To avoid this, we simply add a hyphen and the rank of the thing you\u2019re solving at the end. Examples:</p> <ul> <li>PLL-4 is the PLL step on a rank-4 object, which permutes a rank-3 object. With CFOP on 3<sup>4</sup>, it consists of permuting the 2c\u2019s, then permuting the rest like a 3<sup>3</sup>.</li> <li>For F2L, you put the number before the letter at the end e.g. F2L-5a, F2L-6d, etc.</li> <li>If you were solving a 3<sup>6</sup> with pure CFOP and you were solving the F2L of the final cube with triple RKT, that would be F2L-3 of PLL-4 of PLL-5 of PLL-6.</li> </ul>"},{"location":"glossary/#puzzle-descriptors","title":"Puzzle descriptors","text":"<p>This section is a work-in-progress.</p> <ul> <li>Solid vs. tiling vs. soup</li> <li>Doctrinaire</li> <li>Reduced</li> <li>Bandaged</li> <li>Unbandaged</li> <li>Shapeshifting</li> <li>Sliding vs. twisting</li> <li>Circle</li> <li>Super</li> <li>Real</li> <li>Complex</li> <li>Stickermod</li> <li>Shapemod</li> <li>Cuboid terms (tower, brick, floppy, domino, pancake)</li> <li>Other common puzzle families: weirdling, bubbloid, rotate-gap, sliding-gap (15-puzzle), loopover</li> </ul>"},{"location":"glossary/#cut-depth","title":"Cut depth","text":"<p>This section is a work-in-progress.</p> <ul> <li>Shallow cut</li> <li>Half cut</li> <li>Deep cut<ul> <li>Deeper than adjacent</li> <li>Deeper than origin</li> </ul> </li> <li>Semideep cut?</li> </ul> <ol> <li> <p>Go ahead, run us over with the descriptivist bus.\u00a0\u21a9</p> </li> </ol>"},{"location":"history/","title":"History of Hypercubing","text":""},{"location":"history/#1988-2002-the-beginning-of-hypercubing","title":"1988-2002: The Beginning of Hypercubing","text":"<p>MagicCube4D in 2001</p> <p></p> <p>Shortly after the Rubik\u2019s Cube was invented in 1974, people began thinking about different versions of the puzzle. The idea of higher dimensional analogues was intriguing to many people. This article from 1982 is one of the earliest known documents theorizing properties of the 4D Rubik\u2019s Cube. In 1988 Melinda Green and Don Hatch wrote MagicCube4D, and the first solutions to the 3<sup>4</sup> puzzle came shortly thereafter. The Superliminal website was created some time around 2001, and Charles Doan has an excellent video about an old version of MC4D. Communication was very difficult because of how extremely niche hypercubing was.</p>"},{"location":"history/#2002-present-mailing-list-years","title":"2002-Present: Mailing List Years","text":"<p>In August 2003, the Hypercubing Yahoo Groups mailing list was created. Anyone could subscribe to the list and join the discussion via email. This greatly improved the speed of sharing knowledge. Many new people joined and discussed methods, puzzles, and even had some speedsolving competitions! It was moderately active, up until Yahoo groups began removing past content in 2019. Click here to view an archive of all the past messages. After that, the Hypercubing Google Groups mailing list was created, with pretty much the same members and type of discussions as before. It wasn\u2019t until 2021 that a Discord server was created to speed up communication even more.</p>"},{"location":"history/#2010-2017-andreys-influence","title":"2010-2017: Andrey\u2019s Influence","text":"<p>Andrey Astrelin was a Russian programmer that became known to the hypercubing community when he claimed to have programmed and solved a 3<sup>4</sup> before MC4D was created in 1988. He had no proof for this, but was able to program a new simulator in only 129 lines of code, which certified his legitimacy. Andrey\u2019s main legacy came in the form of creating many programs for the community, including Magic Puzzle Ultimate, Magic Cube 7D, Magic Simplex 5D, and Magic Hyperbolic Tile. These programs unlocked a massive amount of higher dimensional puzzles that were probably never seen or solved before, enriching the hypercubing community. Unfortunately Andrey passed away in 2017<sup>1</sup>, but his contributions to the hypercubing community will never be forgotten.</p>"},{"location":"history/#2017-present-making-physical-4d-puzzles","title":"2017-Present: Making Physical 4D Puzzles","text":"<p>Throughout 2013 and 2014, Melinda Green got in contact with Oskar van Deventer to try and think of any possible mechanism for a physical 2<sup>4</sup>. After failing to find a reasonable physical mechanism, they ended up going with only using magnets in order to stick the hypercubies together. In 2017 the first design was finalized, and Melinda began selling the puzzles by 3D printing the parts from Shapeways. The quality of the puzzle improved in 2022 when Melinda secured a deal with a company to mass produce the pieces via injection moulding.</p> <p>In late 2021, some speculation began as to if you could expand the physical 2<sup>4</sup> into a physical 2x2x2x3 hypercuboid. After Rowan learned that Grant had 3D printed his own physical 2<sup>4</sup>, he challenged him to build a physical 2x2x2x3. Grant completed the challenge, and began designing and printing many more physical puzzles, all the way up to the physical 3x3x3x3. Many physical puzzle designs have still yet to be built\u2026</p> <p>Physical puzzles page</p> <ul> <li>2013-2015: Brainstorming ideas to make the 2x2x2x2 in 3D space</li> <li>2017 Feb 08: First puzzle made with magnetic dice mechanism</li> <li>2017 Apr 26: 2nd 2<sup>4</sup> made using 3D printing from Shapeways</li> <li>2022 Feb 03: Grant finishes the 2x2x2x3</li> <li>2023 May: First brainstorming of floppyhypercubes</li> <li>2022 May 14: Grant finishes the 2x2x3x3</li> <li>2022 Jul 06: Grant finishes the 2x3x3x3</li> <li>2022 Jul 22: Grant finishes the 3x3x3x3</li> <li>2022 Aug: Markceluna designs a physical simplex</li> <li>2024 Jan: Tymon finishes making 1x2x2x2 through 1x3x3x3 hypercuboids</li> <li>2024 Jan: Dietl builds a physical simplex based on a completely different design than Markceluna\u2019s</li> </ul>"},{"location":"history/#2022-present-the-hyperspeedsolving-revolution","title":"2022-Present: The Hyperspeedsolving Revolution","text":"<p>In late 2021 Hactar began working on the Hyperspeedcube program, which was a massive upgrade over older programs like MC4D. Features like piece filters and customizable keybinds were instrumental to lowering solving times. November 2022 saw the beginning of the race for the 3<sup>4</sup> world record. The record was traded almost exclusively by Grant and Hactar, smashing all the barriers from sub-10 minutes all the way down to sub-2! There were also a few smaller record races for bigger layered n<sup>4</sup>s.</p> <p>In early 2024, the first speedsolves of the 3<sup>5</sup> were done. A lot of hypercubers were waiting for HSC 2 to come out so they could use keybinds and better piece filters to solve in 5D, but using MC7D or MPU isn\u2019t that bad at all.</p> <ul> <li>2022 Jan: HSC v0.1 includes 3<sup>3</sup> and 3<sup>4</sup>, filtering by piece type (not color), and customizable keybinds.</li> <li>2022 Aug: HSC v0.8 adds modern piece filters. HSC v0.9 adds multiple keybind sets.</li> <li>2022 Nov 06: First 3<sup>4</sup> sub-10:00 by Hactar</li> <li>2022 Nov 18: First 3<sup>4</sup> sub-9:00 by Rowan</li> <li>2022 Nov 19: First 3<sup>4</sup> sub-8:00 by Hactar</li> <li>2022 Nov 22: First 3<sup>4</sup> sub-7:00 by Grant</li> <li>2022 Nov 23: First 3<sup>4</sup> sub-6:00 by Hactar</li> <li>2022 Nov 26: First 3<sup>4</sup> sub-5:00 by Hactar</li> <li>2022 Dec 07: First 3<sup>4</sup> sub-4:00 by Grant</li> <li>2022 Dec 22: First 3<sup>4</sup> sub-3:00 by Hactar</li> <li>2023 May 13: First 3<sup>4</sup> sub-2:00 by Hactar</li> </ul> <ol> <li> <p>Read Andrey\u2019s biography here \u21a9</p> </li> </ol>"},{"location":"intro-4d/","title":"Introduction to 4D","text":"<p>This page aims to teach you the fundamentals of understanding higher dimensional space, some of the shapes that exist in them, and how we can turn them into twisty puzzles to play with.</p>"},{"location":"intro-4d/#what-is-the-4th-dimension","title":"What is the 4th dimension?","text":"<p>The dimensionality of a space/object is the number of coordinates needed to describe its position. First, think of a 1-dimensional number line. To describe a position on the number line, all you need is one set of numbers for the coordinate. In 2-dimensional space like a graph, you need 2 sets of numbers to represent a point, such as \\((3,4)\\). This continues on to higher dimensions, where you need more and more numbers in order to locate a point.</p> <p>The 4th dimension is a space where you need 4 sets of numbers to describe the coordinates of something. As 3D beings in a 3D universe, we can\u2019t interact with or see the 4th dimension. But computers can easily simulate higher dimensions, and project it down to 2D so we can see it on a computer screen.</p> <p>Dimension Levels (by NerdBoy1392 - Own work, CC BY-SA 3.0, link)</p> <p></p>"},{"location":"intro-4d/#understanding-4d-shapes","title":"Understanding 4D shapes","text":"<p>Hypercube rotating</p> <p></p> <p>Puzzles are (usually) based on physical geometric shapes, so you have to understand what 4D shapes there are. 4D shapes have sides, or cells, that take the form of 3D shapes, and enclose some amount of \u201chypervolume\u201d. As the most popular 4D puzzles are the hypercubes, so it\u2019s important to at least understand its geometry.</p> <p>A hypercube (also known as a tesseract, 8-cell, octachoron, or 4-cube) is a shape with 8 cubic sides. 3 sides meet at each edge, giving it the Schl\u00e4fli symbol {\\(4,3,3\\)}. Watch the animation below, as the tesseract unfolds itself into its 3-dimensional net.</p> <p></p> <p>But of course, there are many other shapes besides the tesseract. Check out these resources for a deeper understanding:</p> <ul> <li>Perfect Shapes in Higher Dimensions - Numberphile</li> <li>Regular polytope</li> <li>Regular 4-polytope</li> </ul>"},{"location":"intro-4d/#making-puzzles-out-of-shapes","title":"Making puzzles out of shapes","text":"<p>To make twisty puzzles out of higher dimensional shapes, you have to slice it up! Adding 2 evenly spaced planar cuts along each dimension, we get the 3x3x3x3, or 3<sup>4</sup>.</p> <p></p> <p>Congratulations, you have completed the tutorial!</p>"},{"location":"jokes/","title":"Hypercubing community in-jokes","text":"<p>Like any niche internet community, we\u2019ve accumulated some in-jokes over the years. In an effort to be welcoming to newcomers, here\u2019s a list of them!</p> <p>This page is specifically for in-jokes that have been used by multiple people over a relatively long time, and wouldn\u2019t be obvious to newcomers.</p>"},{"location":"jokes/#my-carrerr","title":"My carrerr","text":"<p>On 2022-10-31, Grant did a one-handed solve of the physical 2<sup>4</sup> on a whim and immediately set a world record of 3:55.62, beating Rowan\u2019s prior record by two and a half minutes and breaking three minute barriers. In response:</p> <p>Rowan: I worked so hard for my sub-7:00 Rowan: wth is this Grant: first try too Grant: lol Grant: it\u2019s uploading rn Rowan: wow Grant: first sub 6, sub 5, and sub 4 Luna: rowan in shambles Luna: what will he do Rowan: my carrerr Rowan: it\u2019s over</p> <p></p>"},{"location":"jokes/#sticker-soup","title":"Sticker soup","text":"<p>Hactar: You can always just make a soup of flat stickers with rules about how to move them around. It just becomes less and less usable. Physical 2<sup>4</sup> is special because the rules are fairly straightforward.</p> <p>In the wake of the Rowan\u2019s video The Quest to Build a 4D Rubik\u2019s Cube, many people joined the server proposing \u201c3D physical\u201d puzzles, which are flat 2D constructions of 3D puzzles. Generally, hypercubers are only interested in these as a way to explain how 4D physical puzzles work, since \u201c3D physical\u201d puzzles aren\u2019t mathematically interesting in their own right and they\u2019re more difficult to use than real 3D puzzles. They tend to become a \u201csoup\u201d of stickers that move according to arbitrary rules, a generalization of twisty puzzles that throws away all geometric relations.</p> <p>Luna: how many times do I have to say this Luna: dimensional \ud83d\udc4f analogies \ud83d\udc4f don\u2019t \ud83d\udc4f work \ud83d\udc4f for \ud83d\udc4f physical \ud83d\udc4f puzzle \ud83d\udc4f design \ud83d\udc4f</p> <p>Designing physical versions of 4D+ puzzles is generally very difficult and is usually mathematically impossible to do well. In the end, most end up becoming sticker soup.</p> <p></p>"},{"location":"jokes/#dunning-kruger-graph","title":"Dunning-Kruger graph","text":"<p>From Dunning-Kruger effect - Wikipedia</p> <p>The Dunning\u2013Kruger effect is a cognitive bias whereby people with low ability, expertise, or experience regarding a type of task or area of knowledge tend to overestimate their ability or knowledge.</p> <p>The Dunning-Kruger effect is especially common in hypercubing, which lies at the intersection of puzzle theory and higher-dimensional geometry, two niche mathematical fields. Of course, you don\u2019t need to be an expert in math to solve 4D puzzles, but if you have no 4D mathematical foundations then your understanding will probably be wrong at first.</p> <p>The Dunning-Kruger effect is sometimes described using this graph, where \u201ccompetence\u201d increases to the right and \u201cconfidence\u201d increases upward:</p> <p></p> <p>Of course, in reality the effect is not quite so extreme, and varies from person to person.</p>"},{"location":"jokes/#jambling","title":"Jambling","text":"<p>On 2023-01-03, in Hypercubers voice chat, a very sleepy Hactar mispronounced the word \u201cjumbling\u201d as \u201cjambling.\u201d Since then, some hypercubers have been using the phrases \u201cjambling\u201d or \u201cjamble\u201d instead of \u201cjumbling\u201d.</p>"},{"location":"jokes/#fake-anderson","title":"Fake Anderson","text":"<p>On 2023-01-12, in Hypercubers voice chat, Hactar and Luna were conversing with Anderson Taurence. During that time, a user named Jedi Cabanna Boy (Andreas Thompson) joined and continued the conversation, and Anderson left. But, their voices were similar enough that Hactar, who was distracted speedsolving 5<sup>4</sup>, didn\u2019t notice the switch, and repeatedly addressed Jedi as Anderson. Luna noticed and did not correct him.</p> <p>Once Hactar finally realized what was happening, Jedi changed their nickname on the server to Anderson (Beta), and later \ud83c\udd71a n d e r s o n.</p>"},{"location":"jokes/#cactus","title":"Cactus","text":"<p>On 2023-02-19, several members were brainstorming possible shapes for physical 5D puzzle pieces and named one of them \u201cCactus.\u201d</p> <p>Banderson: then yeah I think (compound of four cubes)-generated tetragonal icositetrahedron is good; C4CTi or something Banderson: C4QTi ? troller: \ud83c\udf35 Banderson: oh wait no C4Ct.I Banderson: or better yet I\u2019ll let akkei make a shorthand/pick a better name to describe it lol troller: Cacti Rowan: squeez cheezahedron Grant: Your shape, your name akkei Akkei: i still like the Akkei: we Do Not Have A Scheme for the cactus Grant: Cactus LOL \u2026 Grant: I don\u2019t care what actual name we end up giving it, I\u2019m calling it cactus in this channel</p>"},{"location":"jokes/#silence-derivative","title":"Silence, derivative","text":"<p>In early 2018, at the 13th Gathering for Gardner, Melinda\u2019s physical 2x2x2x2 was shown to Ern\u0151 Rubik himself. It was reported that his only comment was that none of the derivative puzzles matter and that only his original invention is important.</p> <p>On the night of 2023-06-25, Kitcen lay awake, unable to sleep, their mind plagued with the thought of Ern\u0151 Rubik with lasers coming out of his eyes to blow up a physical 2<sup>4</sup> while denouncing it and calling it \u201cderivative.\u201d</p> <p>30 minutes later, Akkei responded wordlessly with this image:</p> <p></p>"},{"location":"jokes/#grant-standingslice","title":"Grant Standingslice","text":"<p>In earlier versions of hypercubing.xyz, individual letters such as R, F, etc. showed tooltips indicating their use in common notation. On 2023-01-06, Hactar posted a screenshot of the leaderboards page in which the \u201cS\u201d in \u201cGrant S.\u201d had a tooltip that said \u201cStanding slice (parallel to F).\u201d</p> <p>Hactar: Fun fact: the \u201cS\u201d in Grant\u2019s name stands for \u201cStanding slice\u201d</p>"},{"location":"jokes/#mimcaf-and-celse-pign","title":"Mimcaf and Celse pign","text":"<p>Many hypercubers play Minecraft and Celeste, and have adopted common misspellings of those games. Akkei was the first to use \u201cmimcaf\u201d on 2022-12-03, and Rowan was the first to use the phrase \u201ccelse pign\u201d on 2023-09-30 as a misspelling of \u201cCeleste ping.\u201d</p>"},{"location":"notation/","title":"Notation","text":"<p>Warning</p> <p>This page explains notation specifically for cell-turning n<sup>4</sup> virtual puzzles. Notation pages for other puzzles coming soon\u2122\ufe0f\u2026</p>"},{"location":"notation/#cells","title":"Cells","text":"<p>Yellow cell rotating</p> <p> </p> <p>Each side of an n<sup>4</sup> hypercube is called a cell, and consists of a cubic grid of n<sup>3</sup> stickers. Because each side is cubic, they can be rotated with cubic symmetry. A cube has 24 different possible orientations, meaning that each side of a 4D puzzle can be oriented in 24 different ways.</p> <p>There are 8 cells, six of them using the same letters as that in the 3<sup>3</sup>: <code>U</code> (up), <code>D</code> (down), <code>F</code> (front), <code>B</code> (back), <code>R</code> (right), <code>L</code> (left). The one that you can see on the inside is called <code>I</code> (inside), and the one opposite of that (which is hidden) is called <code>O</code> (outside). This means we use the letters <code>R</code> <code>L</code> <code>U</code> <code>D</code> <code>F</code> <code>B</code> <code>O</code> <code>I</code>.</p>"},{"location":"notation/#pieces","title":"Pieces","text":"<p>Cell-turning hypercubes have 4 different types of pieces (with some slight variations for big hypercubes). These are the 1c (1-colored) centers, 2c ridges, 3c edges, and 4c corners. You can label each piece based on which cells it is on. The 3c piece that has stickers on the <code>I</code>nside, <code>R</code>ight, and <code>U</code>p cells would be called the <code>IUR</code> piece.</p>"},{"location":"notation/#twists","title":"Twists","text":"<p>Twists are notated based on which piece you click on to do the turn, with the first letter determining which sticker of that piece to click on. For example:</p> <ul> <li><code>RO'</code> means to left click the R cell sticker of the RO piece.</li> <li><code>IUR</code> means to left click the I sticker of the IUR piece (edge twists are symmetrical, so it doesn\u2019t matter if you left or right click).</li> <li><code>FRUI</code> means to right click the F sticker of the FRUI piece.</li> </ul> <p>For the slice layers, we use <code>M</code> <code>E</code> <code>S</code> <code>P</code>, where P is the slice that follows <code>O</code> (although with notation for n<sup>5</sup> puzzles beginning to be fleshed out, P may end up being used by the new 5D sides of Posterior/Anterior). Wide moves are tricky, as we are now using the letter <code>w</code> for the 4th dimension axis. One way to get around this is to write the numbers you hold down on the keyboard (in MC4D/MPU etc) while clicking on a piece. On a 3-layered puzzle, holding down 2 does a slice move, and holding down 1 and 2 will do a wide move.</p> <ul> <li><code>{2}RO</code> means to hold 2 while doing an RO move (essentially an M move).</li> <li><code>{2-3}UO'</code> means to hold 2 and 3 while doing a UO\u2019 move.</li> <li><code>{2-4}IF</code> means to hold 2, 3, and 4</li> </ul>"},{"location":"notation/#rotations","title":"Rotations","text":"<p>3D notation for rotations doesn\u2019t really generalize to higher dimensions. For example, we call an <code>x</code> rotation x because it rotates the puzzle \u201caround the x-axis\u201d. However, this is unhelpful because rotations don\u2019t actually happen around an axis. Instead it\u2019s better to think of rotations as happening within a 2D plane. When you\u2019re doing an <code>x</code>, the whole puzzle is really being rotated within the zy plane. And writing rotations like this generalizes to higher dimensions, so that is what we use.</p> <p>First, we make a certain side from each axis be the \u201cpositive\u201d side. There are standards for this in 3D (such as the right-handed rule). On the x-axis, going to the right is positive and going left is negative. This makes <code>R</code> the positive side from the x-axis. The same goes for the other axes: <code>U</code>, and <code>F</code> are the positive sides in 3D. In 4D we add two new sides, and have to decide which one is positive and which one is negative. Because of the projection, the side that we can\u2019t see is closer to the 4D camera, making <code>O</code> the positive w-axis cell, and <code>I</code> the negative.</p> <p>To actually notate the rotations, write the letters of the 2 axes that form the plane that the puzzle is rotating in, in the order of which positive side on that axis goes to the positive side of the other axis. For example: rotating the positive y-axis side to the positive x-axis side (rotating U to R) would be written <code>yx</code> (and looks like <code>z</code> in 3D notation).</p> <ul> <li><code>yw</code>: bring +y to +w (rotate U to O)</li> <li><code>xz</code>: bring +x to +z (rotate R to F (this is called <code>y</code> in 3D rotation notation))</li> </ul> <p>Note how we don\u2019t have to use the <code>'</code> prime symbol because you can just swap the letters (wy is the inverse of yw). You can also add a <code>2</code> to the end for double rotations, e.g. <code>wx2</code>, <code>yz2</code> etc.</p> <p>This makes it a really nice system because it only ever uses 2 letters, no matter how many dimensions. You can also use it on n<sup>3</sup> puzzles in order for more multi-dimensional consistency: <code>xy</code> means move x+ to y+ (R to U [z\u2019 rotation]).</p>"},{"location":"notation/#turn-metrics","title":"Turn metrics","text":"<p>There are many different ways to count the number of twists performed during a solve. All of these metrics (besides ETM) have their own Quarter Turn counterparts, where twists are broken up into 90\u00b0 twists. For example, a 180\u00b0 face twist takes two 90\u00b0 twists, while a 120\u00b0 edge twist takes three. Listed below are the metrics used by HSC. STM is used the most, but others are sometimes relevant.</p> ATM <ul> <li>Consecutive twists of the same axis are combined, even with different layers.</li> <li>Whole-puzzle rotations are not counted.</li> </ul> ETM <ul> <li>Twists are counted as they are executed, including whole-puzzle rotations.</li> </ul> STM <ul> <li>Whole-puzzle rotations are not counted.</li> <li>Slice twists count as one move.</li> <li>Consecutive twists of the same axis and layers are combined.</li> </ul> BTM <ul> <li>Whole-puzzle rotations are not counted.</li> <li>Noncontiguous slice twists are split into contiguous slice twists.</li> <li>Consecutive twists of the same axis and layers are combined.</li> </ul> OBTM <ul> <li>Whole-puzzle rotations are not counted.</li> <li>Slice twists are split into contiguous outer-block twists.</li> <li>Consecutive twists of the same axis and layers are combined.</li> </ul> MC4DTM <p>a.k.a. \u201cwhatever MC4D says\u201d</p> <ul> <li>Twists are counted as they are executed.</li> <li>Whole-puzzle rotations counted only if they are executed as moves.</li> <li>Double rotations and certain reorientations are impossible to execute as one move.</li> <li>Any move that counts as 1 STM is possible with 1 or 2 MC4DTM moves.<sup>1</sup></li> </ul> <ol> <li> <p>This is due to the 2-click theorem.^[citation needed]^\u00a0\u21a9</p> </li> </ol>"},{"location":"progression/","title":"Progression","text":"<p>This is an outline of how to make your way through the world of hypercubing. Learning puzzles in another order could lead to confusion or an incomplete understanding in the long run.</p> <p>Hactar</p> <p>It\u2019s very difficult to understand what\u2019s really going on in a physical puzzle without first understanding virtual puzzles. We recommend starting with virtual 3^4 for the same reason that 3D cubers typically recommend starting with 3x3x3.</p>"},{"location":"progression/#nnnns","title":"NxNxNxN\u2019s","text":"<p>First, make sure you know how to solve a 3x3x3 Rubik\u2019s Cube. At the very minimum, knowing a beginner\u2019s method is enough, but knowing more advanced methods, such as CFOP or Roux, or more advanced techniques, such as blockbuilding or intuitive F2L, could make getting into hypercubing easier.</p> <pre><code>flowchart LR\n    A[3x3x3]\n    B[3x3x3x3]\n    C[2x2x2x2]\n    D[4x4x4x4]\n    E[5x5x5x5+]\n    F[Physical 2x2x2x2]\n    G[Virtual Physical 3x3x3x3]\n    A --&gt; B\n    B --&gt; C\n    B --&gt; D\n    C --&gt; F\n    D --&gt; E\n    F --&gt; G</code></pre>"},{"location":"progression/#other-4d-puzzles","title":"Other 4D Puzzles","text":"<p>There are many types of 4D puzzles, not just the hypercubes. These include hypercuboids, duoprisms, reqular 4D polytopes, and more. These puzzles require much more knowledge than just the 3x3x3. You\u2019ll need to know how to solve 3D cuboids, and generally be able to figure out new puzzles using commutators.</p> <pre><code>flowchart LR\n    Hypercuboids --&gt; Duoprisms --&gt; Polytopes\n\n    subgraph Polytopes\n    direction LR\n    Q[5-cell]\n    R[16-cell]\n    S[24-cell]\n    T[120-cell]\n    U[600-cell]\n    end\n\n    subgraph Duoprisms\n    direction LR\n    Z[\"{5}x{4}\"]\n    Y[\"{5}x{3}\"]\n    X[\"{5}x{5}\"]\n    end\n\n    subgraph Hypercuboids\n    direction LR\n    D[1x3x3x3]\n    E[2x3x3x3]\n    F[2x2x2x3]\n    G[2x2x3x3]\n    end</code></pre>"},{"location":"progression/#non-euclidean-puzzles","title":"Non-Euclidean Puzzles","text":"<p>While most puzzles in MagicTile aren\u2019t 4D, they do share some similar concepts due to their strange geometries.</p> <pre><code>flowchart LR\n    A[Torus Rubik]\n    B[Klein Bottle Rubik]\n    C[Hyperbolic Rubik]\n    E[Hemi-Megaminx]\n    D[Other]\n    A --&gt; B\n    A --&gt; C\n    B --&gt; E --&gt; D</code></pre>"},{"location":"progression/#5d-puzzles","title":"5D+ puzzles","text":"<pre><code>flowchart TD\n    subgraph 5D\n    direction LR\n    A[\"n\u2074\"]\n    B[\"3\u2075\"]\n    C[\"2\u2075\"]\n    D[\"4\u2075\"]\n    E[Other 4D]\n    F[5D simplex]\n    A --&gt; B --&gt; C --&gt; D\n    E --&gt; F\n    A --&gt; E\n    end\n    subgraph 6D\n    direction LR\n    G[\"3\u2076\"]\n    H[\"Other n\u2076\"]\n    G --&gt; H\n    end\n    subgraph 7D\n    direction LR\n    V[\"3\u2077\"]\n    Q[\"Other n\u2077\"]\n    V --&gt; Q\n    end\n    5D --&gt; 6D --&gt; 7D</code></pre>"},{"location":"videos/","title":"YouTube Videos &amp; Playlists","text":"<p>List of popular videos and playlists related to hypercubing.</p>"},{"location":"videos/#youtube-videos","title":"YouTube Videos","text":"<ul> <li>Demystifying the 4D Rubik\u2019s Cube</li> <li>Cracking the 4D Rubik\u2019s Cube with simple 3D tricks</li> <li>How to Solve a 4D Rubik\u2019s Cube | Beginner\u2019s Method Tutorial</li> <li>The Quest to Build a 4D Rubik\u2019s Cube</li> </ul>"},{"location":"videos/#youtube-playlists","title":"YouTube Playlists","text":"<ul> <li>Introduction to Hypercubing</li> <li>Hypercubing Crash Course</li> <li>Melinda\u2019s 2x2x2x2 UWRs in order</li> <li>3x3x3x3 UWRs</li> <li>4D Twisty Puzzles</li> <li>Melinda\u2019s 2x2x2x2</li> <li>Grant\u2019s hypercubing videos</li> </ul>"},{"location":"drafts/","title":"Drafts","text":"<p>Put drafts for pages in this directory</p>"},{"location":"drafts/grip_theory/","title":"Grip theory","text":"<p>Grip theory is a framework for analyzing many different kinds of twisty puzzles in a geometry-independent way. It was first developed on the TwistyPuzzles Forum in about 2010 ADD LINK. Grip theory was originally used to describe doctrinaire puzzles in 3D, but it can be extended to describe bandaged puzzles, jumbling puzzles, higher-dimensional puzzles, and more.</p>"},{"location":"drafts/grip_theory/#basic-grip-theory","title":"Basic grip theory","text":""},{"location":"drafts/grip_theory/#building-the-333","title":"Building the 3x3x3","text":"<p>Consider a set of 6 abstract objects, called grips. We will name these grips <code>R</code>, <code>U</code>, <code>F</code>, <code>L</code>, <code>D</code>, and <code>B</code>. We can define a group that acts on this set of grips, for instance, the group generated by the 4-cycles (<code>R</code>, <code>U</code>, <code>L</code>, <code>D</code>) and (<code>R</code>, <code>F</code>, <code>L</code>, <code>B</code>). These two permutations generate a group of order 24, called the grip group. This is equivalent to the symmetry group of the cube, where the grips correspond to the corresponding faces of the cube, but by defining this system without reference to the cube, it can be replaced with other non-geometric objects.</p> <p>In grip theory, a piece will be defined to have two things: its attitude, which is an element of the grip group, and a set of active grips. For instance, a piece could be in the identity attitude (we call this solved) and have the active grip set {<code>R</code>, <code>U</code>}. There are several ways to transform a piece by rotating its attitude, and when this happens, the active grip set is defined to follow it. Thus, two pieces are defined to be equal if when you rotate the pieces\u2019 attitudes to solved, the active grips are identitcal. Thus, we can decompose the attitude into two components: the position of the piece, which is its current active grip set, and the orientation of the piece, which is its attitude modulo position.</p> <p>A twist has two components: the grip we twist around, or axis, and an element of the grip group that fixes that grip, the transformation. To apply a twist to a piece, we first check if the grip of the twist is an active grip of the piece. If it is not, the piece remains unchanged. Otherwise, we apply the twist\u2019s transformation to the attitude of the piece. The active grip set is considered attached to the attitude and turns with it. For instance, consider the twist with axis <code>U</code> and transformation (<code>R</code>, <code>F</code>, <code>L</code>, <code>B</code>), which fixes <code>U</code>. We will apply this to the piece from above, so the attitude of the piece is changed to (<code>R</code>, <code>F</code>, <code>L</code>, <code>B</code>). In the active grip set, <code>U</code> is kept stationary, but <code>R</code> is moved to <code>F</code>, so the new active grip set is {<code>U</code>, <code>F</code>}.</p> <p>We can look at the set of all possible twists. In this case, there are 6 possible axis grips, and 4 possible transformations for each axis, though one of each is the identity and will do nothing to the pieces. The set of all positions our piece can move to are all sets of two grips except {<code>R</code>, <code>L</code>}, {<code>U</code>, <code>D</code>}, and {<code>F</code>, <code>B</code>}. These exactly correspond to the edge positions of the 3x3x3. An edge piece is only affected by a twist if one of its colored faces is on the face corresponding to the axis of the twist, and after the twist, the positions of its colored faces moves. This is exactly the behavior of the active grips. Therefore, the piece above is an edge piece. We can similarly construct three more sets of pieces: the corners, with active grips like {<code>R</code>, <code>U</code>, <code>F</code>}, the centers, which active grips like {<code>R</code>}, and the core, with empty active grip set. Note that even though the centers have only one grip, they still have attitude, so the centers on this puzzle are actually super centers. Thus, we have built the 3x3x3.</p>"},{"location":"drafts/grip_theory/#complex-puzzles","title":"Complex puzzles","text":"<p>We do not need to be limited to the pieces that exist on the physical 3x3x3. We can take every subset of the grip set, which has \\(2^6 = 64\\) pieces. The puzzle you get when you include all the pieces of another puzzle in this sense is called the complex version of that puzzle. </p> <p>The complex 3x3x3 has 10 types of pieces, which include the core, centers, edges, and corners from the 3x3x3. It also includes the axles, with active grips like {<code>R</code>, <code>L</code>}, and the bridges, with active grips like {<code>R</code>, <code>U</code>, <code>L</code>}. The other types of pieces are generated by the anti- automorphism of this puzzle. The anti- automorphism takes every piece with active grip set \\(A\\) to the piece whose active grip set is \\(A^c\\), its complement. Given a twist with axis \\(a\\) and transformation \\(g\\), the composition of two actions of the puzzle: the first action is a rotation of every piece by \\(g^{-1}\\), and the second is the original twist. When viewed on an actual 3x3x3, this automorphism maps moves to wide moves of the opposite faces. The anti- version of a piece is the image of a piece under the anti- automorphism. Thus, we can call the other pieces of the complex 3x3x3 anti-edges, anti-axles, anti-centers, and the anti-core. Anti-corners and anti-bridges are isomorphic to the corners and bridges, so they do not need to be recounted.</p>"},{"location":"drafts/grip_theory/#more-puzzles","title":"More puzzles","text":"<p>This definition is immediately generalizable by replacing the set of grips and the grip group. For instance, using 12 grips and the grip group of a dodecahedron, we can create a megaminx, and by including all pieces, we can construct the complex megaminx, which has \\(2^{10} = 1024\\) pieces of 96 types.</p> <p>We can also take 8 grips, <code>R</code>, <code>U</code>, <code>F</code>, <code>O</code>, <code>L</code>, <code>D</code>, <code>B</code>, and <code>I</code>, with the grip group being the 192 symmetries of the hypercube. This allows us to construct the 3<sup>4</sup>. One notable feature of this group that is not present in the previous cases is that when we take two adjacent grips (e.g. <code>R</code> and <code>U</code>), there are non-identity elements of the grip group that fix both of these, even though there are also non-identity elements that only fix one of them. This means that RKT is possible on this puzzle.</p>"},{"location":"drafts/grip_theory/#more-layers","title":"More layers","text":"<p>More layers can be added to a puzzle by adding more grips. For instance, to build a 5x5x5, we need two grips for every grip of the 3x3x3, which we can call <code>1R</code> and <code>2R</code>, and similarly for the others. The grip group will act identically on the layer-1 grips and the layer-2 grips, but will not swap them. In this way, either layer of a face of the 5x5x5 can be selected by choosing which grip on that face to use. The complex 5x5x5 can be constructed out of this grip system.</p> <p>Odd-layered puzzles can be constructed like this, but even-layered puzzles are less clear. They can be constructed like the odd-layered puzzles with one more layer, but this results in identical grip systems and complex variants. Alternatively, we can use stored grips, but this results in less symmetrical puzzles.</p>"},{"location":"drafts/grip_theory/#group-automorphisms","title":"Group automorphisms","text":"<p>There are more automorphisms that these puzzles can have. An inner automorphism of the grip group, which is a conjugate by an element of the group, can be extended to an automorphism of the puzzle by interpreting the inner automorphism as a whole-puzzle rotation. More interesting is what happens when we use a non-inner automorphism. The one we choose should be realizable as conjugation by a permutation of grips, though not necessarily one in the group. We consider the 12-grip complex megaminx. The grip group of this puzzle has an outer automorphism of reflection. By applying this outer automorphism, we obtain a reflection of the whole puzzle, showing that the puzzle is not chiral, even though some pieces are. More interesting is the other outer automorphism of this group, which manifests as an exotic automorphism that takes adjacent grips on the dodecahedron to non-adjacent but non-opposite grips and vice versa. This automorphism is called the co- automorphism, and it shows that complex puzzles can have a higher degree of symmetry than the geometric puzzle they were based on.</p> <p>In general, if we have the grip set \\(\\Gamma\\) with group \\(G\\) acting on it, the normalizer \\(N_{S_\\Gamma}(G)\\) is the subgroup of the automorphism group of \\(G\\) of automorphisms that can be realized as acting on \\(\\Gamma\\). Thus, the cos of the grip system are elements of the group \\(N_{S_\\Gamma}(G)/G\\). This group is a subgroup of \\(\\operatorname{Out}(G)\\), and manifests as additional symmetries of the grip system and the complex puzzle created with it. For example, the cube has two cos: the identity and the reflection. The dodecahedron has four: the identity, the reflection, and the co mentioned above and its inverse. That co applied twice is a reflection, so in a way, it can be considered a square root of the reflection.</p>"},{"location":"drafts/grip_theory/#advanced-example","title":"Advanced example","text":"<p>Suppose we have 7 grips, labeled <code>001</code>, <code>010</code>, <code>011</code>, <code>100</code>, <code>101</code>, <code>110</code>, and <code>111</code>, which are acted on by \\(GL_3(\\mathbb{F}_2)\\) in the standard way. This group has order 168. The action of the grip group on the grips can be thought of as the Fano pane: a line is a set of 3 grips where one is the XOR-sum of the other two, and the group is all permutations of the grips that map lines to lines. Using this, we can build the complex puzzle and identify its piece types. First, there is clearly the core, with empty active grips, and 7 centers, with only one active grip each (e.g. {<code>001</code>}). Then, among the 15 2-grip pieces, there is only one orbit since the action is 2-transitive, so there is only one piece type, for instance that with active grip set {<code>001</code>, <code>010</code>}. Among 3-grip pieces, there are only two types: those that contain three grips on a line like {<code>001</code>, <code>010</code>, <code>011</code>}, and those that don\u2019t, like {<code>001</code>, <code>010</code>, <code>100</code>}. There are 7 of the former piece type and 28 of the latter type. Finally, for 4-, 5-, 6-, and 7- grip pieces, we can use the anti- automorphism to observe that these pieces are exactly the anti- variants of the 0- through 3-grip pieces. Thus, we have classified all the pieces of the complex Fano plane puzzle.</p>"},{"location":"drafts/grip_theory/#extensions-to-grip-theory","title":"Extensions to grip theory","text":""},{"location":"drafts/grip_theory/#infinite-grips","title":"Infinite grips","text":"<p>Consider a set of grips \\(\\mathbb{Z}^2\\), whose grip group are the rotations and translations that preserve the lattice. A puzzle constructed like this would have infinitely many twists, and would be unweildy. A way to simplify this puzzle is to restrict the axes that twists are allowed on. Now, a grip that is not under an allowed twist is called stored. For instance, if twists are only allowed with axes \\((0,0)\\) and \\((1,0)\\), you can make a selection of pieces to make a two-circle puzzle like the Rashkey. However, the complex Rashkey would still have uncountably many pieces, many of which can reach infinitely many attitudes. A solution to this is to only allow pieces with finite active grip sets. If the active grip set of a piece is finite and there are only a finite number of allowed axes, each with finitely many transformations corresponding to a turn, the piece can only reach finitely many attitudes, despite the infinitude of the grip group.</p>"},{"location":"drafts/grip_theory/#bandaging","title":"Bandaging","text":"<p>The 3x3x3 is a doctrinaire puzzle. If a corner {<code>R</code>, <code>U</code>, <code>F</code>} and edge {<code>R</code>, <code>U</code>} are bandaged together, the puzzle ceases to be doctrinaire. This can be implemented into grip theory by adding a new kind of grip to pieces: bandaged grips. Bandaged grips follow the attitude just like active grips. We remove the corner and edge above and replace them with a new piece with active grips {<code>R</code>, <code>U</code>} and bandaged grips {<code>F</code>}. When we apply a twist, if its axis would turn a piece along a bandaged grip, the entire twist is illegal in this state. This exactly mimics the bandaging of the 3x3x3, because by removing <code>F</code> from the set of active grips of the corner and the set of inactive grips of the edge, it prevent us from performing any twist that would only move one of the two pieces.</p>"},{"location":"drafts/grip_theory/#jumbling","title":"Jumbling","text":"<p>We can combine these two notions. Consider the curvy copter (ignore overhang bandaging for now). Clearly, it has at least 12 grips, corresponding to the edges of a cube, with a grip group that contains the rotations of a cube acting on them. However, it should also have jumbling moves, rotations of \\(\\arccos\\frac{1}{3}\\) around one of the 12 allowed axes. If we take the image of all the grips under repeated application of this type of rotation, we end up with a countably infinite dense set of grips with a countably infinite grip group. Each piece of the curvy copter can be compared with every grip to identify its active and bandaged grips. This produces a description of the curvy copter in grip theory. This description can be simplified so there are only finitely many active and bandaged grips per piece.</p>"},{"location":"drafts/grip_theory/#non-faithful-actions","title":"Non-faithful actions","text":"<p>In all previous examples, the action on the grip group has been faithful. However, this does not have to be the case. Consider the rotational symmetry of the cube, the octahedral group. This group is a quotient of the binary octahedral group of order 48, so the binary octahedral group can act on 6 grips via its quotient. The resulting puzzle has the same pieces as the complex 3x3x3, but each piece can have twice as many additudes, and thus twice as many orientations in a given position. Because the binary octahedral group can be interpreted as a group of spinors, the puzzle with the 3x3x3\u2019s pieces but the binary octahedral grip group is the quaternion cube.</p>"},{"location":"drafts/grip_theory/#rkt-rank","title":"RKT rank","text":"<p>As above, the existence of RKT was caused by the existence of a certain stabilizer of two grips. However, not all such stabilizers will enable RKT. On the 3x3x3 grip system, there is a stabilizer of <code>R</code> and <code>L</code> that can only rotate the anti-middle layer (the intersection of the <code>R</code> and <code>L</code> layers) and cannot cause the <code>R</code> layer to emulate another puzzle. In order for the emulation to work, there must be a twist whose axis is <code>R</code> that does not fix <code>L</code>. In general, RKT is possible on a puzzle when there are two grips \\(a\\) and \\(b\\) where there is a non-identity element that fixes \\(a\\) and \\(b\\), and a different element that fixes \\(a\\) but moves \\(b\\).</p> <p>This can be generalized even further. We can define an RKT rank-0 puzzle to be one with no twists, i.e. one where the stabilizer of any grip is the whole group. Then, we proceed recursively: an RKT rank-\\((n+1)\\) puzzle is one where there is some grip \\(a\\) such that the \\(a\\)-stabilizer of the grip group is an RKT rank-\\(n\\) puzzle, after removing grips that are stabilized by every element of the stabilizer. This definition correlates with the geometric rank of a puzzle; the RKT rank of a 3<sup>n</sup> puzzle is \\(n-2\\) for \\(n\\geq 2\\).</p> <p>TODO THIS NEEDS DEVELOPMENT</p>"},{"location":"drafts/grip_theory/#lamination","title":"Lamination","text":"<p>Lamination is a restriction and generalization of grip theory. It allows fewer types of pieces than are described by grip theory, but the pieces it describes are closer to those of actual puzzles. It has multiple related interpretations.</p>"},{"location":"drafts/grip_theory/#group-action-interpretation","title":"Group action interpretation","text":"<p>Suppose, as above, there is a grip group that acts on the set of grips. We now select a block system of this action, and each block is called an axis. Now, instead of a piece having a selection of active grips, a piece will have a layer on each axis, where a layer is an assignment of a symbol (WLOG element of \\(\\mathbb{Z}\\)) to each grip in that axis. Then, a twist still has an axis, but now it has a selected layer within that axis, as well as a transformation, an element of the grip group, that pointwise stabilizes the axis. A laminated puzzle is one that, given a selection of axes an selection of layers on each axis, contains a piece for every combination of layers. In this way, it is similar to complex puzzles.</p> <p>For instance, to construct a 3x3x3, first start with the 6 grips <code>R</code>, <code>U</code>, <code>F</code>, <code>L</code>, <code>D</code>, and <code>B</code>. Then, let the axes be <code>x</code> = {<code>R</code>, <code>L</code>}, <code>y</code> = {<code>U</code>, <code>D</code>}, and <code>z</code> = {<code>F</code>, <code>B</code>}. We can choose a set of layers for each axis: the layers of <code>x</code> will be the assignments {<code>R</code>\u21a60, <code>L</code>\u21a60}, {<code>R</code>\u21a61, <code>L</code>\u21a60}, and {<code>R</code>\u21a60, <code>L</code>\u21a61}, and similary for <code>y</code> and <code>z</code>. Since there are 3 layers per axis and 3 axes, the laminated 3x3x3 has \\(3^3 = 27\\) pieces, exactly as many as a 3x3x3. In fact, the laminated 3x3x3 is exactly the super 3x3x3.</p>"},{"location":"drafts/grip_theory/#representation-interpretation","title":"Representation interpretation","text":"<p>Now, we still have a grip group, but instead of acting on a set of grips, it acts linearly on a vector space \\(V\\). The axes are a set of linearly independent subspaces that span \\(V\\) (which implies the \\(V\\) is the direct sum of the axes), and this set should be setwise stabilized by the grip group. A layer is a point in a subspace. A piece as before has one layer per axis, but now, since layers are points in orthogonal subspaces, we can also identify a piece with a point in \\(V\\) whose projections onto the subspaces are its layers. Thus, a twist, being a selection of axis \\(a\\), layer \\(\\lambda\\), and transformation \\(g\\), has the effect of selecting all pieces in an affine space passing through \\(\\lambda\\) parallel to the direct sum of all axes that are not \\(a\\), and applying \\(g\\) to them.</p> <p>Constructing the 3x3x3 is even more geometrically intuitive than before. Now, we have three axes <code>x</code>, <code>y</code>, <code>z</code>, which correspond to the three coordinate axes of \\(\\mathbb{R}^3\\). The grip group acts on \\(\\mathbb{R}^3\\) as the rotational symmetries of the cube, and the layers of <code>x</code> will be the surfaces \\(x=0\\), \\(x=-1\\), and \\(x=1\\), and similarly for <code>y</code> and <code>z</code>. Like this, the 27 pieces of the laminated 3x3x3 form an arrangement just like that of the actual 3x3x3. However, this approach is not limited to 3 dimensions, and can be used to construct all the puzzles of doctrinaire grip theory.</p>"},{"location":"drafts/grip_theory/#more-layers_1","title":"More layers","text":"<p>Laminated puzzles, as the name suggests, are made of layers, so adding more layers is trivial. Moreover, even-layered puzzles can be constructed as naturally as odd-layered ones. This makes them a more natural description of these puzzles.</p>"},{"location":"koans/","title":"Index","text":"<p>Welcome, neophyte!</p> <p>Here you will find a selection of short stories of other Learners such as yourself, who have become enlightened on the path of Hypercubing. To start, you might want to read about Neophyte Cherto\u2019s Application of Algorithms.</p> <p>This is a work of fiction. Resemblence to any persons, real or fictitious, is entirely coincidental. Resemblence to any puzzles, real or complex, is probably intentional.</p>"},{"location":"koans/adaptability/","title":"Adaptability","text":"<p>Hactar &amp; Luna, 2024-04-15</p> <p>Neophyte Grigor had been learning under Master Yuwi for several months, strengthening his skills with the 3x3x3. Over time, he grew frustrated; he had come to the Temple of Intuition to learn to solve more exciting puzzles.</p> <p>\u201cMaster Yuwi, thank you for your mentorship. You have taught me many new methods of solving a 3x3x3, but are these useful? I had already learned the method CFOP from the Temple of the Swift Solve, and could solve the cube in just 20 seconds. These new methods are slower and more confusing; what is their use?\u201d</p> <p>Master Yuwi nodded. \u201cThe techniques I have taught you are slower. Certainly your Method of the Swift Solve is superior.\u201d She then handed him an Astroid Attack. \u201cI trust you can solve this using CFOP.\u201d</p> <p>The neophyte stared at the puzzle for a moment. It was like nothing he had ever seen before. Certainly the Orientation and Permutation algorithms of CFOP would be of no use here. Nonetheless, when he applied the slower methods of Commutators and Blockbuilding, he was able to completely solve the puzzle piece by piece. By the end, he had understood exactly the purpose of each and every move in his solution.</p> <p>At that moment, Grigor was enlightened.</p>"},{"location":"koans/algorithms/","title":"Applications of Algorithms","text":"<p>Hactar, 2024-04-15</p> <p>Neophyte Cherto toiled into the late hours of the night, eager to complete their latest assignment: producing a written guide to their own solution to Rubik\u2019s Puzzle of Four Dimensions. They had solved the puzzle once before, but Master Nazir had suggested that they solve it again before beginning their writing, for there was a case they had not yet encountered.</p> <p>As Cherto approached the end of the Orientation of the Last Cell of their 3x3x3x3, they found that only a single piece was twisted in place. Cherto, being wise in the ways of Isolation and the construction of Commutators, was easily able to solve this case. They carefully noted the sequence of moves they had performed, added it to their guide, and then continued on.</p> <p>Some days later, another disciple came upon Cherto and addressed them. \u201cI am Neophyte Nima. I have nearly solved my puzzle, save for a single 3-color piece twisted in place. Its stickers are permuted in a cycle, and I cannot seem to rotate it without rotating another piece. Master Nazir said that you had recently solved this case and suggested that I learn from the solution from you.\u201d</p> <p>Cherto excitedly withdrew the latest draft of their solution guide and began copying their algorithm onto a slip of parchment for Nima to read. They began: <code>U R2 ...</code></p> <p>Later that day, Master Nazir found Nima still struggling on the same monotwist case, and inquired whether she had found help from Cherto. She replied: \u201cCherto was kind enough to provide their method, but I believe they copied it wrong, for my puzzle becomes scrambled when I apply their algorithm!\u201d</p> <p>\u201cCherto has given you an algorithm?\u201d Master Nazir peered over her shoulder. \u201cI see you struggle with the application of Cherto\u2019s algorithm. Did they explain the derivation of this algorithm to you?\u201d Nima responded that they had not. Master Nazir left the room, leaving Nima to her struggles.</p> <p>Shortly after, Master Nazir returned with Neophyte Cherto. Cherto watched Nima diligently applying their algorithm to the hemimegaminx in front of her, unaware of its origins.</p> <p>At that moment, Cherto was enlightened.</p>"},{"location":"koans/behold/","title":"Behold!","text":"<p>Hactar, 2024-04-15</p> <p>Neophyte Horatio had been studying hyperbolic tilings under Master Nikolai for nearly a month, and was learning well the ways of the petal, the fourfold corner, and orientability. He woke up to find an envelope outside his door containing a message from his mentor, Master Nikolai:</p> <p></p> <p>Neophyte Horatio, I have fallen ill and cannot attend your instruction today. Enclosed is a hyperbolic tiling which I am sure you have solved before. I expect you will have it solved by tomorrow. - Master Nikolai</p> <p>The neophyte unfolded the puzzle and gasped in horror. The polygons of this tiling were eight-sided, and six met at each vertex! He had learned by now that each additional polygon at a vertex immensely increased the complexity of the cut interactions, so surely this puzzle would require some extensive sequences to isolate pieces. But he had no room! The puzzle had only six colors, and often the same face met multiple times at one vertex! Nonetheless, he began building an edge, a petal, another edge, another petal, \u2026 but as he inserted the second petal, the first petal popped out. Try as he might, he could not remove the second petal without replacing the first as well.</p> <p>Horatio sat and pondered. He had heard fragments from Neophyte Atenea, who had been studying The Theory of Grips, and had an idea. He counted the colors, the cuts, the interactions between pieces, \u2026</p> <p>At that moment, Horatio was enlightened.</p> <p>He solved the rest of the puzzle trivially, using not a single hyperbolic technique.</p>"},{"location":"koans/soup/","title":"Soup","text":"<p>Hactar, Luna, Banderson, et al., 2024-04-15</p> <p>One autumn day, Neophyte Cherto approached their mentor, Master Nazir, with a new design for a puzzle. Cherto had heard of the Shrine of Manifestation, where the Priests of High Symmetry imbue 4-dimensional or even 5-dimensional symmetry unto ordinary 3-dimensional shapes, and decided to try their hand at designing such a spell. They had counted the stickers and the pieces of a 4D puzzle, and had constructed a 3D shape with the same stickers.</p> <p>Master Nazir, having been presented with the neophyte\u2019s design, sighed deeply and gently shook his head as they walked through the garden together.</p> <p>\u201cYoung neophyte, how will the pieces twist? Have you accounted for the orientations of each piece? Do they change according to the moves?\u201d</p> <p>Neophyte Cherto scrambled to fix the issues. \u201cWell we can adjust the orientation of the pieces after each twist!\u201d</p> <p>\u201cAnd how, young neophyte, is that any better a puzzle than the soup we eat for lunch?\u201d</p> <p>Cherto\u2019s face fell. They knew that when incantations failed at the Shrine of Manifestation, the polytopes on the altar melted into a formless blob that the elders called \u201csoup.\u201d</p> <p>\u201cBut surely there must be a way to make this work! I have even constructed an analogous 2D representation of a similar 3D puzzle\u2013\u201c</p> <p>Master Nazir hushed them and gestured toward a nearby tree. \u201cSurely there must be a way for you to climb this tree! I have even routed a path through a similar tree.\u201d</p> <p>\u201cBut that tree is dead.\u201d Cherto paused, then continued more confidently. \u201cThe branches may be weak; it cannot be compared to another tree.\u201d</p> <p>At that moment, Cherto was enlightened.</p>"},{"location":"koans/square-prism/","title":"Square Prism","text":"<p>Hactar &amp; Luna, 2024-04-15</p> <p>Master Nazir was working on a new puzzle, a novel cut of a square-pentagon duoprism, when he noticed Neophyte Sama standing awkwardly, as though she were waiting for something.</p> <p>\u201cDo you have a question for me?\u201d Master Nazir asked, not bothering to look up from his dihedral angle calculations.</p> <p>\u201cY- yes. Master, what is this shape? I did not know a 4-dimensional shape could be constructed only from cubes and pentagonal prisms.\u201d</p> <p>\u201cYou recognize cubes in this shape?\u201d</p> <p>\u201cAre these cells not cubes? They appear to be cubes.\u201d</p> <p>Master Nazir stood up from his work and led the neophyte around the room. The puzzle workshop extended quite far in all directions, and several monks from other temples were working on other designs throughout.</p> <p>He asked, \u201cIs this room a cube?\u201d</p> <p>\u201cIt certainly appears to be, if the ceiling is as tall as the length of the wall.\u201d</p> <p>\u201cAre you able to measure it?\u201d</p> <p>\u201cNo.\u201d</p> <p>\u201cWhy not?\u201d</p> <p>\u201cI cannot walk on the wall.\u201d</p> <p>\u201cAnd yet you walk on the floor.\u201d</p> <p>At that moment, Sama was enlightened.</p>"},{"location":"koans/twice-spun/","title":"Twice Spun","text":"<p>Hactar, 2024-04-15</p> <p>One day Acolyte Quenta found herself wandering the gardens, as she often did, and upon crossed a small bridge she came upon a curious puzzle. It appeared in the form of an ordinary 3x3x3, but with an odd coating on the stickers that presented a gradient over each piece that tilted strangely as she observed it from different angles. She took the cube and scrambled it, intending to return it once she had solved it.</p> <p>As she twisted the puzzle, she became sure that it was playing tricks on her. Even whole-puzzle rotations seemed to behave oddly. She had placed a blue piece next to an orange piece, but upon spinning the puzzle in her hands, the blue piece became orange and the orange piece had become blue! After struggling for a half-hour, managing only to pair a handful of pieces, she resolved to find Master Eiji, who was an expert in variations of the 3x3x3.</p> <p>Upon showing the mysterious puzzle to Master Eiji, he led her inside to a bare room with a column in the center. \u201cWalk around the column and return to me. Then you shall learn how to solve this puzzle,\u201d he instructed. Quenta gave him a quizzical look, but then walked around the column\u2013 and found that Master Eiji had disappeared! Furthermore, the room was slightly different; she could not see the entrance they had come in from, and instead there sat a bench against the wall. She walked another full circle around the column, and then found Master Eiji.</p> <p>\u201cMaster Eiji!\u201d she exclaimed. \u201cWhat strange geometry is this room constructed from? It is neither Spherical nor Hyperbolic, as the light does not seem to bend. But it cannot be Euclidean, because I circled the room twice before returning to you\u2013\u201d she stopped.</p> <p>At that moment, Quenta was enlightened.</p>"},{"location":"leaderboards/history/","title":"World Record History","text":"4D5DMagicTileMisc Virtual n<sup>4</sup>PhysicalOther 2\u00d72\u00d72\u00d723\u00d73\u00d73\u00d734\u00d74\u00d74\u00d745\u00d75\u00d75\u00d756\u00d76\u00d76\u00d767\u00d77\u00d77\u00d77 SingleBlindfolded Name Time Date Program Adam Marcellus Kelly 26s 490ms 2023-09-23 HSC Grant Staten 28s 510ms 2023-05-24 HSC Grant Staten 31s 640ms 2023-05-23 HSC Grant Staten 33s 340ms 2023-05-20 HSC Grant Staten 34s 170ms 2023-05-20 HSC Grant Staten 34s 590ms 2023-05-16 HSC Grant Staten 34s 950ms 2023-05-11 HSC Grant Staten 36s 230ms 2023-03-08 HSC Adam Marcellus Kelly 39s 400ms 2023-01-16 HSC Adam Marcellus Kelly 43s 540ms 2023-01-16 HSC Grant Staten 44s 750ms 2023-01-02 HSC Grant Staten 48s 520ms 2023-01-01 HSC Grant Staten 49s 980ms 2023-01-01 HSC Grant Staten 50s 950ms 2022-12-21 HSC Tetrian 1m 00s 800ms 2021-07-24 MC4D Name Time Date Program TheGrayCuber 14m 41s 550ms 2019-10-12 MC4D SingleAo5BlindfoldedNo Filters Name Time Date Program Andrew Farkas (Hactar) 1m 56s 420ms 2023-05-13 HSC Grant Staten 2m 03s 830ms 2023-04-21 HSC Andrew Farkas (Hactar) 2m 07s 300ms 2023-04-08 HSC Grant Staten 2m 11s 330ms 2023-03-16 HSC Andrew Farkas (Hactar) 2m 17s 970ms 2023-03-11 HSC Grant Staten 2m 21s 010ms 2023-03-08 HSC Andrew Farkas (Hactar) 2m 26s 460ms 2023-02-18 HSC Andrew Farkas (Hactar) 2m 29s 730ms 2023-01-11 HSC Andrew Farkas (Hactar) 2m 39s 470ms 2023-01-08 HSC Andrew Farkas (Hactar) 2m 41s 220ms 2023-01-03 HSC Andrew Farkas (Hactar) 2m 42s 810ms 2022-12-30 HSC Grant Staten 2m 59s 340ms 2022-12-23 HSC Andrew Farkas (Hactar) 2m 59s 970ms 2022-12-22 HSC Grant Staten 3m 06s 060ms 2022-12-21 HSC Grant Staten 3m 13s 970ms 2022-12-21 HSC Grant Staten 3m 16s 440ms 2022-12-20 HSC Grant Staten 3m 21s 520ms 2022-12-15 HSC Grant Staten 3m 23s 260ms 2022-12-14 HSC Grant Staten 3m 34s 430ms 2022-12-14 HSC Grant Staten 3m 45s 690ms 2022-12-13 HSC Grant Staten 3m 55s 320ms 2022-12-10 HSC Grant Staten 3m 58s 290ms 2022-12-07 HSC Grant Staten 4m 02s 600ms 2022-12-03 HSC Grant Staten 4m 09s 190ms 2022-12-03 HSC Grant Staten 4m 10s 840ms 2022-12-02 HSC Andrew Farkas (Hactar) 4m 30s 880ms 2022-12-01 HSC Grant Staten 4m 43s 860ms 2022-11-30 HSC Andrew Farkas (Hactar) 4m 50s 730ms 2022-11-29 HSC Grant Staten 4m 52s 940ms 2022-11-27 HSC Andrew Farkas (Hactar) 4m 58s 140ms 2022-11-26 HSC Grant Staten 5m 01s 920ms 2022-11-26 HSC Grant Staten 5m 23s 820ms 2022-11-25 HSC Grant Staten 5m 25s 140ms 2022-11-25 HSC Andrew Farkas (Hactar) 5m 32s 980ms 2022-11-23 HSC Grant Staten 6m 36s 380ms 2022-11-23 HSC Andrew Farkas (Hactar) 6m 38s 920ms 2022-11-22 HSC Grant Staten 6m 46s 210ms 2022-11-22 HSC Andrew Farkas (Hactar) 7m 02s 170ms 2022-11-21 HSC Grant Staten 7m 36s 320ms 2022-11-21 HSC Andrew Farkas (Hactar) 7m 43s 330ms 2022-11-19 HSC Andrew Farkas (Hactar) 8m 02s 530ms 2022-11-19 HSC Andrew Farkas (Hactar) 8m 15s 350ms 2022-11-19 HSC Andrew Farkas (Hactar) 8m 23s 590ms 2022-11-18 HSC Rowan Fortier 8m 58s 820ms 2022-11-18 HSC Andrew Farkas (Hactar) 9m 05s 820ms 2022-11-06 HSC Tetrian 10m 11s 870ms 2019-05-04 MC4D Name Time Date Program Andrew Farkas (Hactar) 2m 18s 180ms 2023-05-12 HSC Andrew Farkas (Hactar) 2m 20s 190ms 2023-04-22 HSC Andrew Farkas (Hactar) 2m 26s 160ms 2023-04-22 HSC Grant Staten 2m 28s 050ms 2023-04-10 HSC Andrew Farkas (Hactar) 2m 33s 100ms 2023-04-08 HSC Andrew Farkas (Hactar) 2m 35s 290ms 2023-04-08 HSC Grant Staten 2m 35s 940ms 2023-03-10 HSC Andrew Farkas (Hactar) 2m 39s 640ms 2023-02-18 HSC Andrew Farkas (Hactar) 3m 02s 780ms 2022-12-31 HSC Grant Staten 3m 52s 000ms 2022-12-16 HSC Name Time Date Program Sebastian Yuste 1h 21m 17s 680ms 2022-03-17 MC4D Name Time Date Program Grant Staten 5m 16s 010ms 2023-07-03 HSC Grant Staten 5m 33s 390ms 2023-07-03 HSC Tetrian 10m 11s 870ms 2019-05-04 MC4D Name Time Date Program Andrew Farkas (Hactar) 7m 55s 180ms 2024-04-22 HSC Grant Staten 7m 55s 770ms 2023-08-01 HSC Grant Staten 8m 30s 660ms 2023-07-31 HSC Grant Staten 8m 32s 559ms 2023-07-27 HSC Grant Staten 8m 52s 970ms 2023-04-26 HSC Grant Staten 8m 55s 680ms 2023-04-25 HSC Grant Staten 9m 47s 420ms 2023-04-25 HSC Grant Staten 9m 50s 700ms 2023-02-23 HSC Grant Staten 10m 03s 550ms 2023-02-18 HSC Grant Staten 10m 33s 210ms 2023-02-16 HSC Grant Staten 10m 44s 230ms 2023-01-30 HSC Grant Staten 11m 13s 680ms 2023-01-29 HSC Grant Staten 11m 16s 710ms 2023-01-17 HSC Andrew Farkas (Hactar) 11m 22s 350ms 2023-01-13 HSC Andrew Farkas (Hactar) 11m 39s 600ms 2023-01-13 HSC Andrew Farkas (Hactar) 11m 42s 850ms 2023-01-13 HSC Andrew Farkas (Hactar) 12m 25s 220ms 2023-01-13 HSC Andrew Farkas (Hactar) 12m 28s 140ms 2023-01-13 HSC Grant Staten 12m 33s 750ms 2023-01-12 HSC Andrew Farkas (Hactar) 13m 13s 650ms 2023-01-12 HSC Grant Staten 13m 17s 780ms 2023-01-08 HSC Grant Staten 13m 21s 360ms 2023-01-06 HSC Grant Staten 14m 00s 760ms 2023-01-05 HSC Grant Staten 14m 10s 440ms 2023-01-05 HSC Andrew Farkas (Hactar) 14m 38s 910ms 2023-01-05 HSC Grant Staten 14m 39s 130ms 2023-01-04 HSC Grant Staten 15m 18s 840ms 2023-01-04 HSC Andrew Farkas (Hactar) 15m 28s 210ms 2023-01-04 HSC Grant Staten 15m 44s 920ms 2023-01-03 HSC Grant Staten 15m 59s 750ms 2023-01-03 HSC Andrew Farkas (Hactar) 17m 14s 760ms 2023-01-03 HSC Grant Staten 17m 21s 339ms 2022-12-31 HSC Grant Staten 18m 53s 840ms 2022-12-29 HSC Grant Staten 19m 17s 700ms 2022-12-28 HSC Grant Staten 19m 57s 080ms 2022-12-24 HSC Grant Staten 20m 18s 480ms 2022-12-23 HSC Grant Staten 21m 37s 070ms 2022-12-20 HSC Grant Staten 23m 50s 750ms 2022-12-17 HSC Luna Harran 29m 54s 820ms 2022-12-04 HSC Grant Staten 32m 46s 550ms 2022-12-04 HSC Luna Harran 44m 40s 420ms 2022-11-23 HSC Tetrian 1h 12m 07s 650ms 2019-05-19 MC4D Name Time Date Program Grant Staten 19m 57s 610ms 2023-07-27 HSC Grant Staten 20m 17s 280ms 2023-07-26 HSC Grant Staten 20m 48s 930ms 2023-07-22 HSC Grant Staten 21m 40s 870ms 2023-07-20 HSC Grant Staten 21m 44s 120ms 2023-06-02 HSC Grant Staten 22m 11s 780ms 2023-05-29 HSC Grant Staten 23m 19s 100ms 2023-05-27 HSC Grant Staten 23m 42s 580ms 2023-05-13 HSC Grant Staten 25m 11s 080ms 2023-05-06 HSC Grant Staten 27m 08s 970ms 2023-04-27 HSC Grant Staten 28m 14s 310ms 2023-03-17 HSC Grant Staten 28m 58s 950ms 2023-02-21 HSC Grant Staten 29m 58s 510ms 2023-02-01 HSC Grant Staten 31m 06s 980ms 2023-01-23 HSC Grant Staten 33m 47s 210ms 2023-01-20 HSC Grant Staten 34m 33s 540ms 2023-01-17 HSC Grant Staten 39m 03s 510ms 2023-01-12 HSC Grant Staten 41m 59s 320ms 2023-01-05 HSC Grant Staten 49m 52s 500ms 2023-01-04 HSC Andrew Farkas (Hactar) 55m 13s 040ms 2023-01-04 HSC Grant Staten 57m 43s 650ms 2022-12-30 HSC Luna Harran 1h 31m 38s 500ms 2022-12-07 HSC Name Time Date Program Grant Staten 56m 03s 940ms 2023-06-02 HSC Grant Staten 1h 00m 31s 150ms 2023-05-29 HSC Grant Staten 1h 03m 23s 500ms 2023-05-23 HSC Grant Staten 1h 04m 57s 880ms 2023-05-15 HSC Grant Staten 1h 12m 22s 580ms 2023-05-10 HSC Grant Staten 1h 19m 30s 890ms 2023-05-09 HSC Grant Staten 1h 23m 25s 520ms 2023-03-03 HSC Grant Staten 1h 29m 29s 900ms 2023-02-02 HSC Grant Staten 1h 38m 45s 280ms 2023-01-18 HSC Grant Staten 2h 16m 26s 540ms 2023-01-12 HSC Luna Harran 3h 15m 46s 110ms 2022-12-31 HSC Name Time Date Program Grant Staten 1h 58m 21s 230ms 2023-07-18 HSC Grant Staten 2h 11m 41s 970ms 2023-05-31 HSC Grant Staten 3h 27m 17s 510ms 2023-01-22 HSC Andrew Farkas (Hactar) 4h 39m 59s 940ms 2023-01-21 HSC Physical 2\u00d72\u00d72\u00d72Virtual Physical 3\u00d73\u00d73\u00d73 SingleOne HandedBlindfolded Name Time Date Grant Staten 54s 840ms 2022-11-08 Grant Staten 56s 650ms 2022-10-03 Grant Staten 1m 06s 040ms 2022-09-18 Grant Staten 1m 07s 570ms 2022-08-12 Grant Staten 1m 23s 280ms 2022-08-07 Rowan Fortier 1m 27s 170ms 2022-08-02 Rowan Fortier 1m 28s 140ms 2022-06-20 Rowan Fortier 1m 46s 240ms 2022-05-07 Rowan Fortier 1m 56s 750ms 2021-12-11 Rowan Fortier 2m 00s 660ms 2021-12-11 Rowan Fortier 2m 03s 580ms 2021-12-09 Rowan Fortier 2m 05s 270ms 2021-12-06 Rowan Fortier 2m 16s 540ms 2021-11-15 Connor Lindsay 2m 26s 000ms 2019-08-11 Name Time Date Tymon Fro 2m 56s 980ms 2023-10-08 Grant Staten 3m 55s 620ms 2022-10-01 Rowan Fortier 6m 25s 120ms 2022-07-01 Name Time Date Asa Kaplan 47m 14s 000ms 2022-08-08 Name Time Date Program Grant Staten 9m 58s 950ms 2023-05-03 AKKEI-SIM Grant Staten 10m 30s 070ms 2023-04-20 AKKEI-SIM Grant Staten 10m 54s 210ms 2023-04-20 AKKEI-SIM Grant Staten 10m 58s 780ms 2023-04-18 AKKEI-SIM Grant Staten 11m 30s 660ms 2023-04-12 AKKEI-SIM Grant Staten 12m 05s 250ms 2023-04-09 AKKEI-SIM Grant Staten 14m 33s 060ms 2023-04-04 AKKEI-SIM Grant Staten 17m 11s 750ms 2023-03-29 AKKEI-SIM 3-Layer Simplex1\u00d73\u00d73\u00d73 Name Time Date Program Grant Staten 1m 17s 700ms 2023-03-15 MC4D Rowan Fortier 1m 30s 460ms 2023-01-26 MC4D Tetrian 1m 43s 440ms 2021-07-24 MC4D Name Time Date Program Tymon Fro 57s 460ms 2023-11-11 MPU Andrew Farkas (Hactar) 1m 00s 930ms 2023-05-31 MPU Luna Harran 1m 02s 910ms 2023-05-31 MPU Luna Harran 1m 24s 340ms 2023-05-31 MPU Grant Staten 1m 27s 390ms 2023-03-20 MPU 2\u00d72\u00d72\u00d72\u00d723\u00d73\u00d73\u00d73\u00d73 Name Time Date Program Tymon Fro 1h 13m 07s 260ms 2024-04-01 MPU Luna Harran 1h 48m 43s 500ms 2024-03-23 MPU Name Time Date Program Luna Harran 3h 17m 59s 660ms 2024-04-07 MC7D Luna Harran 3h 39m 01s 240ms 2024-03-22 MC7D HemimegaminxCanon-Cut Klein Quartic Name Time Date Program Milo Jacquet 1m 31s 670ms 2024-03-31 MT Milo Jacquet 1m 47s 690ms 2024-03-06 MT Grant Staten 1m 51s 940ms 2023-03-19 MT Luna Harran 2m 06s 520ms 2023-03-18 MT Luna Harran 2m 11s 570ms 2023-03-18 MT Grant Staten 2m 19s 990ms 2023-03-18 MT Luna Harran 2m 54s 050ms 2023-03-18 MT Luna Harran 4m 30s 570ms 2023-03-18 MT Name Time Date Program Milo Jacquet 24m 14s 410ms 2024-04-04 MT 3\u00d73\u00d73 in 2D projection with 1D Vision Name Time Date Program Grant Staten 3m 22s 200ms 2023-07-05 MC3D Grant Staten 4m 20s 209ms 2023-07-04 MC3D Grant Staten 5m 10s 710ms 2023-07-04 MC3D Grant Staten 6m 24s 390ms 2023-07-04 MC3D Grant Staten 7m 34s 180ms 2023-07-03 MC3D Markk 15m 45s 390ms 2022-12-02 MC3D","boost":-3},{"location":"leaderboards/records/","title":"Current World Records","text":"Puzzle Name Time Date Program 2\u00d72\u00d72\u00d72 Adam Marcellus Kelly 26s 490ms 2023-09-23 HSC 2\u00d72\u00d72\u00d72 Blindfolded TheGrayCuber 14m 41s 550ms 2019-10-12 MC4D 3\u00d73\u00d73\u00d73 Andrew Farkas (Hactar) 1m 56s 420ms 2023-05-13 HSC 3\u00d73\u00d73\u00d73 Ao5 Andrew Farkas (Hactar) 2m 18s 180ms 2023-05-12 HSC 3\u00d73\u00d73\u00d73 Blindfolded Sebastian Yuste 1h 21m 17s 680ms 2022-03-17 MC4D 3\u00d73\u00d73\u00d73 No Filters Grant Staten 5m 16s 010ms 2023-07-03 HSC 4\u00d74\u00d74\u00d74 Andrew Farkas (Hactar) 7m 55s 180ms 2024-04-22 HSC 5\u00d75\u00d75\u00d75 Grant Staten 19m 57s 610ms 2023-07-27 HSC 6\u00d76\u00d76\u00d76 Grant Staten 56m 03s 940ms 2023-06-02 HSC 7\u00d77\u00d77\u00d77 Grant Staten 1h 58m 21s 230ms 2023-07-18 HSC 2\u00d72\u00d72\u00d72\u00d72 Tymon Fro 1h 13m 07s 260ms 2024-04-01 MPU 3\u00d73\u00d73\u00d73\u00d73 Luna Harran 3h 17m 59s 660ms 2024-04-07 MC7D Physical 2\u00d72\u00d72\u00d72 Grant Staten 54s 840ms 2022-11-08 - Physical 2\u00d72\u00d72\u00d72 One-Handed Tymon Fro 2m 56s 980ms 2023-10-08 - Physical 2\u00d72\u00d72\u00d72 Blindfolded Asa Kaplan 47m 14s 000ms 2022-08-08 - 3-Layer Simplex Grant Staten 1m 17s 700ms 2023-03-15 MC4D Hemimegaminx Milo Jacquet 1m 31s 670ms 2024-03-31 MT Virtual Physical 3\u00d73\u00d73\u00d73 Grant Staten 9m 58s 950ms 2023-05-03 AKKEI-SIM 1\u00d73\u00d73\u00d73 Tymon Fro 57s 460ms 2023-11-11 MPU 3\u00d73\u00d73 in 2D projection with 1D Vision Grant Staten 3m 22s 200ms 2023-07-05 MC3D Canon-Cut Klein Quartic Milo Jacquet 24m 14s 410ms 2024-04-04 MT","boost":-1},{"location":"leaderboards/rules/","title":"Hypercubing Leaderboard Submission Rules","text":"<p>These rules are not written in legalese. Please don\u2019t try to exploit them. Ask in the Hypercubers Discord if you have any questions, comments, or concerns about these rules.</p> <p>These rules may be flexible, especially for new categories. For example, if you\u2019re speedsolving a really big puzzle that no one\u2019s done before, it might be reasonable to allow macros for it.</p>"},{"location":"leaderboards/rules/#general-rules","title":"General rules","text":"<ul> <li>These programs are recommended for speedsolving. If using a program not listed here, you should ask on the Discord first.</li> <li>The puzzle must be solved from a full scramble.</li> <li>Spectators may commentate, but must not help the solver.</li> <li>Algorithm reference sheets are strongly discouraged.<sup>1</sup></li> <li>Reversing the scramble is not allowed; the solution must be novel.</li> </ul>"},{"location":"leaderboards/rules/#speedsolving-rules","title":"Speedsolving rules","text":"<p>These rules apply generally to speedsolving submissions unless the category has specific rules.</p> <ul> <li>Macros are not allowed.</li> <li>Piece filters are allowed.</li> <li>All speedsolves require video evidence, such as a screen recording.<ul> <li>A timer with precision of 0.01 seconds or better must be visible on the screen during the solve. Timers built into the puzzle software are preferred.</li> <li>Inspection time must not exceed 60 seconds. In other words, the solve timer must be started within 60 seconds of the puzzle being completely scrambled.</li> </ul> </li> <li>If using keyboard controls:<ul> <li>If possible, a keybinds reference must be visible during the solve.<sup>2</sup></li> <li>The keybinds should not be hyperoptimized for specific algorithms.<sup>3</sup></li> </ul> </li> <li>Log file is not required, but you should still save your PBs!</li> <li>Using software to compute a solution to the puzzle state is not allowed.</li> </ul>"},{"location":"leaderboards/rules/#blindsolving-rules","title":"Blindsolving rules","text":"<ul> <li>Macros are allowed during solving.</li> <li>Piece filters are allowed during memorization but not during solving.</li> <li>All blindsolves require video evidence of the solver that clearly shows the screen and that they are not cheating by using some external reference.</li> <li>The solver does not need to be blindfolded, but the colors on the puzzle must be invisible during the solve.</li> <li>Using software to compute a solution to the puzzle state is not allowed.</li> <li>Besides those rules, typical blindsolving rules apply:<ul> <li>Final time = memorization time + solving time.</li> <li>Writing anything down isn\u2019t allowed.</li> </ul> </li> </ul>"},{"location":"leaderboards/rules/#real-life-puzzle-rules","title":"Real-life puzzle rules","text":"<ul> <li>All real-life puzzle solves must have video evidence that shows the puzzle fully in frame throughout the solve and shows the entire scrambling and solving process as well as the timer.</li> <li>Scrambles must be generated by a computer program that produces a random state or at least this many random moves:<ul> <li>Physical 2<sup>4</sup>: see below</li> <li>Hemimegaminx: 30 moves</li> </ul> </li> </ul>"},{"location":"leaderboards/rules/#physical-24-rules","title":"Physical 2<sup>4</sup> rules","text":"<p>See Canonical Moves for more details.</p> <ul> <li>All rules for real-life puzzles apply.</li> <li>Allowed moves for physical 2x2x2x2 events are limited to 2 categories, the canonical moveset originally made by the hypercubing mailing list as well as a few additional moves:<ul> <li>Canonical moves:<ul> <li>All R and L cell rotations</li> <li>U/D y2</li> <li>F/B z2</li> <li>I/O x* (a.k.a. axial twist)</li> <li>Any of many equivalent gyro algorithms</li> </ul> </li> <li>Additional moves:<ul> <li>U/D x2/z2</li> <li>F/B x2/y2</li> <li>I y2/z2</li> </ul> </li> </ul> </li> <li>For 2<sup>4</sup>, scrambles must be generated by this page or any equivalent scramble generator.<ul> <li>Hand scrambles are no longer allowed, as they have an increased chance to have an easier solution than random state scrambles.</li> <li>It\u2019s ok if you mess up the scramble a little bit. It should still be way more random than any hand scramble.</li> <li>For random-move scrambles:</li> </ul> </li> <li>Any full puzzle rotation that doesn\u2019t change the state (including the Gyro) may be applied to the puzzle during inspection; other moves may not.</li> </ul>"},{"location":"leaderboards/rules/#fewest-moves-solving-rules","title":"Fewest-moves solving rules","text":"<ul> <li>Log files are required for submission.</li> <li>Video evidence is not required.</li> <li>Collaboration is allowed; each collaborator must be given the option to be credited for the solve, and should be credited if their contributions were significant.</li> <li>Moves are counted using STM.</li> <li>Use of computer software to generate a partial or full solution is allowed, but must be noted in the submission.</li> </ul>"},{"location":"leaderboards/rules/#principles-when-writing-new-speedsolving-software","title":"Principles when writing new speedsolving software","text":"<p>If you\u2019re thinking of writing a new program for speedsolving or suggesting a new feature for Hyperspeedcube, here are some principles we try to follow:</p> <ul> <li>No more than one move per keypress.</li> <li>If your program has keybinds (especially customizable ones), add some reference that shows what keys are being pressed and what they\u2019re doing.</li> <li>New features should hopefully make solving strategy more interesting. Some examples:<ul> <li>Macros on the 3<sup>4</sup> encourage commutator spam, which is very boring compared to layer-by-layer or F2L methods, so they are not allowed for speedsolves.</li> <li>Piece filters reduce time spent looking for pieces, which is boring to do and boring to watch. There\u2019s a trade-off there: piece filters encourage a stricter solving order, which is less interesting in a way, but this also enables 3-Block, a very interesting method.</li> </ul> </li> <li>New features should ideally have some justification based on 3D speedsolving. For example, multiple keybind sets is analogous to different grips on a 3D puzzle.<sup>4</sup></li> </ul> <ol> <li> <p>We can\u2019t stop you from using an algorithm reference, but it\u2019s not in the spirit of the competition and it\u2019ll probably slow you down.\u00a0\u21a9</p> </li> <li> <p>If the program doesn\u2019t have a built-in keybinds reference (such as akkei\u2019s physical 3<sup>4</sup> simulator) then you probably don\u2019t need one.\u00a0\u21a9</p> </li> <li> <p>In particular, you should not be able to execute a meaningful algorithm by pressing a sequence of keys in a line on the keyboard. Keybinds should be laid out in a way that makes sense moreso than a way that is useful for an algorithm. A keybind set optimized for general RKT is fine. If you have a question about this, ask on the Discord.\u00a0\u21a9</p> </li> <li> <p>You might hold a 3<sup>3</sup> differently to execute <code>&lt;M,U&gt;</code> moves more efficiently compared to <code>&lt;R,U,F&gt;</code> moves. Similarly, a 4D creature might have a specialized grip on the 3<sup>4</sup> for RKT compared to general moves.\u00a0\u21a9</p> </li> </ol>"},{"location":"leaderboards/solvers/adam/","title":"Adam Marcellus Kelly","text":"","boost":1},{"location":"leaderboards/solvers/adam/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 2\u00d72\u00d72\u00d72  1 26s 490ms 2023-09-23 HSC 3\u00d73\u00d73\u00d73 4 3m 28s 220ms 2023-08-15 HSC 3\u00d73\u00d73\u00d73 Ao5  3 3m 58s 960ms 2023-08-15 HSC","boost":1},{"location":"leaderboards/solvers/adam/#history","title":"History","text":"4D Virtual n<sup>4</sup> 2\u00d72\u00d72\u00d723\u00d73\u00d73\u00d73 Single Rank Time Date Program  1 26s 490ms 2023-09-23 HSC 39s 400ms 2023-01-16 HSC 43s 540ms 2023-01-16 HSC SingleAo5 Rank Time Date Program 4 3m 28s 220ms 2023-08-15 HSC 3m 49s 300ms 2023-01-12 HSC 4m 34s 620ms 2023-01-10 HSC 5m 44s 860ms 2023-01-09 HSC 6m 58s 670ms 2023-01-09 HSC Rank Time Date Program  3 3m 58s 960ms 2023-08-15 HSC","boost":1},{"location":"leaderboards/solvers/akkei/","title":"Akkei","text":"","boost":1},{"location":"leaderboards/solvers/akkei/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Hemimegaminx 5 18m 47s 120ms 2024-03-21 -","boost":1},{"location":"leaderboards/solvers/akkei/#history","title":"History","text":"MagicTile Hemimegaminx Rank Time Date Program 5 18m 47s 120ms 2024-03-21 -","boost":1},{"location":"leaderboards/solvers/alvin/","title":"Alvin","text":"","boost":1},{"location":"leaderboards/solvers/alvin/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73 13 12m 13s 260ms 2022-11-24 HSC","boost":1},{"location":"leaderboards/solvers/alvin/#history","title":"History","text":"4D Virtual n<sup>4</sup> 3\u00d73\u00d73\u00d73 Single Rank Time Date Program 13 12m 13s 260ms 2022-11-24 HSC","boost":1},{"location":"leaderboards/solvers/asa/","title":"Asa Kaplan","text":"","boost":1},{"location":"leaderboards/solvers/asa/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Physical 2\u00d72\u00d72\u00d72 Blindfolded  1 47m 14s 000ms 2022-08-08 -","boost":1},{"location":"leaderboards/solvers/asa/#history","title":"History","text":"4D Physical Physical 2\u00d72\u00d72\u00d72 Blindfolded Rank Time Date  1 47m 14s 000ms 2022-08-08","boost":1},{"location":"leaderboards/solvers/battistin/","title":"Emanuele Battistin","text":"","boost":1},{"location":"leaderboards/solvers/battistin/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73 7 5m 29s 780ms 2024-04-06 HSC 3\u00d73\u00d73\u00d73 Ao5 4 7m 42s 360ms 2024-03-24 HSC 4\u00d74\u00d74\u00d74 5 59m 55s 810ms 2023-11-10 HSC Hemimegaminx 4 5m 22s 970ms 2024-03-26 MT","boost":1},{"location":"leaderboards/solvers/battistin/#history","title":"History","text":"4DMagicTile Virtual n<sup>4</sup> 3\u00d73\u00d73\u00d734\u00d74\u00d74\u00d74 SingleAo5 Rank Time Date Program 7 5m 29s 780ms 2024-04-06 HSC 5m 50s 990ms 2024-03-29 HSC 6m 19s 690ms 2023-11-06 HSC 7m 24s 840ms 2023-11-05 HSC 7m 54s 790ms 2023-11-04 HSC 8m 18s 630ms 2023-11-02 HSC 8m 38s 990ms 2023-10-31 HSC 9m 54s 040ms 2023-10-29 HSC Rank Time Date Program 4 7m 42s 360ms 2024-03-24 HSC Rank Time Date Program 5 59m 55s 810ms 2023-11-10 HSC Hemimegaminx Rank Time Date Program 4 5m 22s 970ms 2024-03-26 MT","boost":1},{"location":"leaderboards/solvers/connor/","title":"Connor Lindsay","text":"","boost":1},{"location":"leaderboards/solvers/connor/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Physical 2\u00d72\u00d72\u00d72 8 2m 26s 000ms 2019-08-11 -","boost":1},{"location":"leaderboards/solvers/connor/#history","title":"History","text":"4D Physical Physical 2\u00d72\u00d72\u00d72 Single Rank Time Date 8 2m 26s 000ms 2019-08-11","boost":1},{"location":"leaderboards/solvers/cubedude/","title":"The Cube Dude","text":"","boost":1},{"location":"leaderboards/solvers/cubedude/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Physical 2\u00d72\u00d72\u00d72  2 58s 140ms 2024-04-18 -","boost":1},{"location":"leaderboards/solvers/cubedude/#history","title":"History","text":"4D Physical Physical 2\u00d72\u00d72\u00d72 Single Rank Time Date  2 58s 140ms 2024-04-18 1m 11s 990ms 2024-04-17 1m 42s 400ms 2023-03-30","boost":1},{"location":"leaderboards/solvers/danielcohen/","title":"Daniel Cohen","text":"","boost":1},{"location":"leaderboards/solvers/danielcohen/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Physical 2\u00d72\u00d72\u00d72 5 1m 31s 460ms 2024-01-21 HSC","boost":1},{"location":"leaderboards/solvers/danielcohen/#history","title":"History","text":"4D Physical Physical 2\u00d72\u00d72\u00d72 Single Rank Time Date 5 1m 31s 460ms 2024-01-21","boost":1},{"location":"leaderboards/solvers/edan/","title":"Edan Maor","text":"","boost":1},{"location":"leaderboards/solvers/edan/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73  3 3m 22s 800ms 2024-02-13 HSC","boost":1},{"location":"leaderboards/solvers/edan/#history","title":"History","text":"4D Virtual n<sup>4</sup> 3\u00d73\u00d73\u00d73 Single Rank Time Date Program  3 3m 22s 800ms 2024-02-13 HSC 3m 53s 230ms 2023-10-12 HSC 4m 54s 390ms 2023-09-20 HSC","boost":1},{"location":"leaderboards/solvers/ethandavis/","title":"Ethan Davis","text":"","boost":1},{"location":"leaderboards/solvers/ethandavis/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73 14 14m 39s 680ms 2024-01-27 HSC","boost":1},{"location":"leaderboards/solvers/ethandavis/#history","title":"History","text":"4D Virtual n<sup>4</sup> 3\u00d73\u00d73\u00d73 Single Rank Time Date Program 14 14m 39s 680ms 2024-01-27 HSC","boost":1},{"location":"leaderboards/solvers/grant/","title":"Grant Staten","text":"","boost":1},{"location":"leaderboards/solvers/grant/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 2\u00d72\u00d72\u00d72  2 28s 510ms 2023-05-24 HSC 3\u00d73\u00d73\u00d73  2 2m 03s 830ms 2023-04-21 HSC 3\u00d73\u00d73\u00d73 Ao5  2 2m 28s 050ms 2023-04-10 HSC 3\u00d73\u00d73\u00d73 No Filters  1 5m 16s 010ms 2023-07-03 HSC 4\u00d74\u00d74\u00d74  2 7m 55s 770ms 2023-08-01 HSC 5\u00d75\u00d75\u00d75  1 19m 57s 610ms 2023-07-27 HSC 6\u00d76\u00d76\u00d76  1 56m 03s 940ms 2023-06-02 HSC 7\u00d77\u00d77\u00d77  1 1h 58m 21s 230ms 2023-07-18 HSC Physical 2\u00d72\u00d72\u00d72  1 54s 840ms 2022-11-08 - Physical 2\u00d72\u00d72\u00d72 One-Handed  2 3m 55s 620ms 2022-10-01 - 3-Layer Simplex  1 1m 17s 700ms 2023-03-15 MC4D Hemimegaminx  2 1m 51s 940ms 2023-03-19 MT Virtual Physical 3\u00d73\u00d73\u00d73  1 9m 58s 950ms 2023-05-03 AKKEI-SIM 1\u00d73\u00d73\u00d73 5 1m 27s 390ms 2023-03-20 MPU 3\u00d73\u00d73 in 2D projection with 1D Vision  1 3m 22s 200ms 2023-07-05 MC3D","boost":1},{"location":"leaderboards/solvers/grant/#history","title":"History","text":"4DMagicTileMisc Virtual n<sup>4</sup>PhysicalOther 2\u00d72\u00d72\u00d723\u00d73\u00d73\u00d734\u00d74\u00d74\u00d745\u00d75\u00d75\u00d756\u00d76\u00d76\u00d767\u00d77\u00d77\u00d77 Single Rank Time Date Program  2 28s 510ms 2023-05-24 HSC 31s 640ms 2023-05-23 HSC 33s 340ms 2023-05-20 HSC 34s 170ms 2023-05-20 HSC 34s 590ms 2023-05-16 HSC 34s 950ms 2023-05-11 HSC 36s 230ms 2023-03-08 HSC 44s 750ms 2023-01-02 HSC 48s 520ms 2023-01-01 HSC 49s 980ms 2023-01-01 HSC 50s 950ms 2022-12-21 HSC SingleAo5No Filters Rank Time Date Program  2 2m 03s 830ms 2023-04-21 HSC 2m 11s 330ms 2023-03-16 HSC 2m 21s 010ms 2023-03-08 HSC 2m 30s 680ms 2023-02-25 HSC 2m 37s 880ms 2023-02-25 HSC 2m 41s 260ms 2023-02-24 HSC 2m 59s 340ms 2022-12-23 HSC 3m 06s 060ms 2022-12-21 HSC 3m 13s 970ms 2022-12-21 HSC 3m 16s 440ms 2022-12-20 HSC 3m 21s 520ms 2022-12-15 HSC 3m 23s 260ms 2022-12-14 HSC 3m 34s 430ms 2022-12-14 HSC 3m 45s 690ms 2022-12-13 HSC 3m 55s 320ms 2022-12-10 HSC 3m 58s 290ms 2022-12-07 HSC 4m 02s 600ms 2022-12-03 HSC 4m 09s 190ms 2022-12-03 HSC 4m 10s 840ms 2022-12-02 HSC 4m 43s 860ms 2022-11-30 HSC 4m 52s 940ms 2022-11-27 HSC 5m 01s 920ms 2022-11-26 HSC 5m 23s 820ms 2022-11-25 HSC 5m 25s 140ms 2022-11-25 HSC 6m 36s 380ms 2022-11-23 HSC 6m 46s 210ms 2022-11-22 HSC 7m 36s 320ms 2022-11-21 HSC Rank Time Date Program  2 2m 28s 050ms 2023-04-10 HSC 2m 35s 940ms 2023-03-10 HSC 3m 01s 410ms 2023-02-24 HSC 3m 52s 000ms 2022-12-16 HSC Rank Time Date Program  1 5m 16s 010ms 2023-07-03 HSC 5m 33s 390ms 2023-07-03 HSC Rank Time Date Program  2 7m 55s 770ms 2023-08-01 HSC 8m 30s 660ms 2023-07-31 HSC 8m 32s 559ms 2023-07-27 HSC 8m 52s 970ms 2023-04-26 HSC 8m 55s 680ms 2023-04-25 HSC 9m 47s 420ms 2023-04-25 HSC 9m 50s 700ms 2023-02-23 HSC 10m 03s 550ms 2023-02-18 HSC 10m 33s 210ms 2023-02-16 HSC 10m 44s 230ms 2023-01-30 HSC 11m 13s 680ms 2023-01-29 HSC 11m 16s 710ms 2023-01-17 HSC 11m 44s 560ms 2023-01-14 HSC 11m 54s 530ms 2023-01-14 HSC 12m 33s 750ms 2023-01-12 HSC 13m 17s 780ms 2023-01-08 HSC 13m 21s 360ms 2023-01-06 HSC 14m 00s 760ms 2023-01-05 HSC 14m 10s 440ms 2023-01-05 HSC 14m 39s 130ms 2023-01-05 HSC 14m 39s 130ms 2023-01-04 HSC 15m 18s 840ms 2023-01-04 HSC 15m 44s 920ms 2023-01-03 HSC 15m 59s 750ms 2023-01-03 HSC 17m 21s 339ms 2022-12-31 HSC 18m 53s 840ms 2022-12-29 HSC 19m 17s 700ms 2022-12-28 HSC 19m 57s 080ms 2022-12-24 HSC 20m 18s 480ms 2022-12-23 HSC 20m 18s 480ms 2022-12-23 HSC 21m 37s 070ms 2022-12-20 HSC 23m 50s 750ms 2022-12-17 HSC 32m 46s 550ms 2022-12-04 HSC Rank Time Date Program  1 19m 57s 610ms 2023-07-27 HSC 20m 17s 280ms 2023-07-26 HSC 20m 48s 930ms 2023-07-22 HSC 21m 40s 870ms 2023-07-20 HSC 21m 44s 120ms 2023-06-02 HSC 22m 11s 780ms 2023-05-29 HSC 23m 19s 100ms 2023-05-27 HSC 23m 42s 580ms 2023-05-13 HSC 25m 11s 080ms 2023-05-06 HSC 27m 08s 970ms 2023-04-27 HSC 28m 14s 310ms 2023-03-17 HSC 28m 58s 950ms 2023-02-21 HSC 29m 58s 510ms 2023-02-01 HSC 31m 06s 980ms 2023-01-23 HSC 33m 47s 210ms 2023-01-20 HSC 34m 33s 540ms 2023-01-17 HSC 39m 03s 510ms 2023-01-12 HSC 41m 59s 320ms 2023-01-05 HSC 49m 52s 500ms 2023-01-04 HSC 57m 43s 650ms 2022-12-30 HSC Rank Time Date Program  1 56m 03s 940ms 2023-06-02 HSC 1h 00m 31s 150ms 2023-05-29 HSC 1h 03m 23s 500ms 2023-05-23 HSC 1h 04m 57s 880ms 2023-05-15 HSC 1h 12m 22s 580ms 2023-05-10 HSC 1h 19m 30s 890ms 2023-05-09 HSC 1h 23m 25s 520ms 2023-03-03 HSC 1h 29m 29s 900ms 2023-02-02 HSC 1h 38m 45s 280ms 2023-01-18 HSC 2h 16m 26s 540ms 2023-01-12 HSC Rank Time Date Program  1 1h 58m 21s 230ms 2023-07-18 HSC 2h 11m 41s 970ms 2023-05-31 HSC 3h 27m 17s 510ms 2023-01-22 HSC Physical 2\u00d72\u00d72\u00d72Virtual Physical 3\u00d73\u00d73\u00d73 SingleOne Handed Rank Time Date  1 54s 840ms 2022-11-08 56s 650ms 2022-10-03 1m 06s 040ms 2022-09-18 1m 07s 570ms 2022-08-12 1m 23s 280ms 2022-08-07 Rank Time Date  2 3m 55s 620ms 2022-10-01 Rank Time Date Program  1 9m 58s 950ms 2023-05-03 AKKEI-SIM 10m 30s 070ms 2023-04-20 AKKEI-SIM 10m 54s 210ms 2023-04-20 AKKEI-SIM 10m 58s 780ms 2023-04-18 AKKEI-SIM 11m 30s 660ms 2023-04-12 AKKEI-SIM 12m 05s 250ms 2023-04-09 AKKEI-SIM 14m 33s 060ms 2023-04-04 AKKEI-SIM 17m 11s 750ms 2023-03-29 AKKEI-SIM 3-Layer Simplex1\u00d73\u00d73\u00d73 Rank Time Date Program  1 1m 17s 700ms 2023-03-15 MC4D 1m 31s 110ms 2023-03-15 MC4D 1m 34s 160ms 2023-03-15 MC4D 1m 43s 190ms 2023-03-15 MC4D 1m 48s 760ms 2023-03-14 MC4D 2m 16s 370ms 2023-03-14 MC4D 2m 36s 420ms 2023-03-10 MC4D 3m 29s 740ms 2023-03-09 MC4D 6m 11s 010ms 2023-01-24 MC4D 8m 15s 420ms 2023-01-19 MC4D Rank Time Date Program 5 1m 27s 390ms 2023-03-20 MPU Hemimegaminx Rank Time Date Program  2 1m 51s 940ms 2023-03-19 MT 2m 19s 990ms 2023-03-18 MT 3m 35s 860ms 2023-03-18 MT 3\u00d73\u00d73 in 2D projection with 1D Vision Rank Time Date Program  1 3m 22s 200ms 2023-07-05 MC3D 4m 20s 209ms 2023-07-04 MC3D 5m 10s 710ms 2023-07-04 MC3D 6m 24s 390ms 2023-07-04 MC3D 7m 34s 180ms 2023-07-03 MC3D","boost":1},{"location":"leaderboards/solvers/gray/","title":"TheGrayCuber","text":"","boost":1},{"location":"leaderboards/solvers/gray/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 2\u00d72\u00d72\u00d72 Blindfolded  1 14m 41s 550ms 2019-10-12 MC4D","boost":1},{"location":"leaderboards/solvers/gray/#history","title":"History","text":"4D Virtual n<sup>4</sup> 2\u00d72\u00d72\u00d72 Blindfolded Rank Time Date Program  1 14m 41s 550ms 2019-10-12 MC4D","boost":1},{"location":"leaderboards/solvers/hactar/","title":"Andrew Farkas (Hactar)","text":"","boost":1},{"location":"leaderboards/solvers/hactar/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73  1 1m 56s 420ms 2023-05-13 HSC 3\u00d73\u00d73\u00d73 Ao5  1 2m 18s 180ms 2023-05-12 HSC 4\u00d74\u00d74\u00d74  1 7m 55s 180ms 2024-04-22 HSC 5\u00d75\u00d75\u00d75  2 40m 04s 760ms 2023-01-18 HSC 6\u00d76\u00d76\u00d76  2 2h 51m 54s 000ms 2023-08-30 HSC 7\u00d77\u00d77\u00d77  2 4h 39m 59s 940ms 2023-01-21 HSC 1\u00d73\u00d73\u00d73  2 1m 00s 930ms 2023-05-31 MPU","boost":1},{"location":"leaderboards/solvers/hactar/#history","title":"History","text":"4D Virtual n<sup>4</sup>Other 3\u00d73\u00d73\u00d734\u00d74\u00d74\u00d745\u00d75\u00d75\u00d756\u00d76\u00d76\u00d767\u00d77\u00d77\u00d77 SingleAo5 Rank Time Date Program  1 1m 56s 420ms 2023-05-13 HSC 2m 05s 300ms 2023-04-22 HSC 2m 07s 300ms 2023-04-08 HSC 2m 17s 970ms 2023-03-11 HSC 2m 26s 460ms 2023-02-18 HSC 2m 29s 730ms 2023-01-11 HSC 2m 39s 470ms 2023-01-08 HSC 2m 41s 220ms 2023-01-03 HSC 2m 42s 810ms 2022-12-30 HSC 2m 59s 970ms 2022-12-22 HSC 4m 30s 880ms 2022-12-01 HSC 4m 50s 730ms 2022-11-29 HSC 4m 58s 140ms 2022-11-26 HSC 5m 32s 980ms 2022-11-23 HSC 6m 38s 920ms 2022-11-22 HSC 7m 02s 170ms 2022-11-21 HSC 7m 43s 330ms 2022-11-19 HSC 8m 02s 530ms 2022-11-19 HSC 8m 15s 350ms 2022-11-19 HSC 8m 23s 590ms 2022-11-18 HSC 9m 05s 820ms 2022-11-06 HSC Rank Time Date Program 2m 18s 180ms 2024-04-15 HSC  1 2m 18s 180ms 2023-05-12 HSC 2m 20s 190ms 2023-04-22 HSC 2m 26s 160ms 2023-04-22 HSC 2m 33s 100ms 2023-04-08 HSC 2m 35s 290ms 2023-04-08 HSC 2m 39s 640ms 2023-02-18 HSC 3m 02s 780ms 2022-12-31 HSC Rank Time Date Program  1 7m 55s 180ms 2024-04-22 HSC 8m 12s 820ms 2024-04-06 HSC 8m 45s 210ms 2024-03-20 HSC 9m 44s 500ms 2024-03-17 HSC 10m 05s 470ms 2024-03-15 HSC 11m 12s 840ms 2024-03-11 HSC 11m 22s 350ms 2023-01-13 HSC 11m 39s 600ms 2023-01-13 HSC 11m 42s 850ms 2023-01-13 HSC 12m 25s 220ms 2023-01-13 HSC 12m 28s 140ms 2023-01-13 HSC 13m 13s 650ms 2023-01-12 HSC 13m 34s 550ms 2023-01-12 HSC 13m 58s 650ms 2023-01-08 HSC 14m 38s 910ms 2023-01-05 HSC 15m 28s 210ms 2023-01-04 HSC 16m 47s 070ms 2023-01-04 HSC 17m 14s 760ms 2023-01-03 HSC 23m 26s 720ms 2023-01-01 HSC Rank Time Date Program  2 40m 04s 760ms 2023-01-18 HSC 43m 15s 780ms 2023-01-13 HSC 44m 25s 040ms 2023-01-12 HSC 55m 13s 040ms 2023-01-04 HSC 1h 04m 03s 180ms 2023-01-03 HSC Rank Time Date Program  2 2h 51m 54s 000ms 2023-08-30 HSC Rank Time Date Program  2 4h 39m 59s 940ms 2023-01-21 HSC 1\u00d73\u00d73\u00d73 Rank Time Date Program  2 1m 00s 930ms 2023-05-31 MPU","boost":1},{"location":"leaderboards/solvers/hyperespy/","title":"Hyperespy","text":"","boost":1},{"location":"leaderboards/solvers/hyperespy/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Physical 2\u00d72\u00d72\u00d72 7 2m 11s 470ms 2022-11-15 - Virtual Physical 3\u00d73\u00d73\u00d73  2 44m 41s 490ms 2023-04-12 AKKEI-SIM","boost":1},{"location":"leaderboards/solvers/hyperespy/#history","title":"History","text":"4D Physical Physical 2\u00d72\u00d72\u00d72Virtual Physical 3\u00d73\u00d73\u00d73 Single Rank Time Date 7 2m 11s 470ms 2022-11-15 Rank Time Date Program  2 44m 41s 490ms 2023-04-12 AKKEI-SIM 47m 43s 810ms 2023-04-04 AKKEI-SIM","boost":1},{"location":"leaderboards/solvers/kevin/","title":"K3v1N","text":"","boost":1},{"location":"leaderboards/solvers/kevin/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Virtual Physical 3\u00d73\u00d73\u00d73  3 55m 06s 000ms 2023-05-05 AKKEI-SIM","boost":1},{"location":"leaderboards/solvers/kevin/#history","title":"History","text":"4D Physical Virtual Physical 3\u00d73\u00d73\u00d73 Rank Time Date Program  3 55m 06s 000ms 2023-05-05 AKKEI-SIM","boost":1},{"location":"leaderboards/solvers/koen/","title":"Koen R.","text":"","boost":1},{"location":"leaderboards/solvers/koen/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73 16 22m 25s 490ms 2023-01-09 HSC","boost":1},{"location":"leaderboards/solvers/koen/#history","title":"History","text":"4D Virtual n<sup>4</sup> 3\u00d73\u00d73\u00d73 Single Rank Time Date Program 16 22m 25s 490ms 2023-01-09 HSC","boost":1},{"location":"leaderboards/solvers/luna/","title":"Luna Harran","text":"","boost":1},{"location":"leaderboards/solvers/luna/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73 8 5m 48s 730ms 2023-01-06 HSC 4\u00d74\u00d74\u00d74 4 29m 54s 820ms 2022-12-04 HSC 5\u00d75\u00d75\u00d75 4 1h 31m 38s 500ms 2022-12-07 HSC 6\u00d76\u00d76\u00d76  3 3h 15m 46s 110ms 2022-12-31 HSC 2\u00d72\u00d72\u00d72\u00d72  2 1h 48m 43s 500ms 2024-03-23 MPU 3\u00d73\u00d73\u00d73\u00d73  1 3h 17m 59s 660ms 2024-04-07 MC7D Hemimegaminx  3 2m 06s 520ms 2023-03-18 MT 1\u00d73\u00d73\u00d73  3 1m 02s 910ms 2023-05-31 MPU","boost":1},{"location":"leaderboards/solvers/luna/#history","title":"History","text":"4D5DMagicTile Virtual n<sup>4</sup>Other 3\u00d73\u00d73\u00d734\u00d74\u00d74\u00d745\u00d75\u00d75\u00d756\u00d76\u00d76\u00d76 Single Rank Time Date Program 8 5m 48s 730ms 2023-01-06 HSC Rank Time Date Program 4 29m 54s 820ms 2022-12-04 HSC 44m 40s 420ms 2022-11-23 HSC Rank Time Date Program 4 1h 31m 38s 500ms 2022-12-07 HSC Rank Time Date Program  3 3h 15m 46s 110ms 2022-12-31 HSC 1\u00d73\u00d73\u00d73 Rank Time Date Program  3 1m 02s 910ms 2023-05-31 MPU 1m 24s 340ms 2023-05-31 MPU 2\u00d72\u00d72\u00d72\u00d723\u00d73\u00d73\u00d73\u00d73 Rank Time Date Program  2 1h 48m 43s 500ms 2024-03-23 MPU Rank Time Date Program  1 3h 17m 59s 660ms 2024-04-07 MC7D 3h 39m 01s 240ms 2024-03-22 MC7D Hemimegaminx Rank Time Date Program  3 2m 06s 520ms 2023-03-18 MT 2m 11s 570ms 2023-03-18 MT 2m 54s 050ms 2023-03-18 MT 4m 30s 570ms 2023-03-18 MT","boost":1},{"location":"leaderboards/solvers/markk/","title":"Markk","text":"","boost":1},{"location":"leaderboards/solvers/markk/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73 in 2D projection with 1D Vision  2 15m 45s 390ms 2022-12-02 MC3D","boost":1},{"location":"leaderboards/solvers/markk/#history","title":"History","text":"Misc 3\u00d73\u00d73 in 2D projection with 1D Vision Rank Time Date Program  2 15m 45s 390ms 2022-12-02 MC3D","boost":1},{"location":"leaderboards/solvers/milojacquet/","title":"Milo Jacquet","text":"","boost":1},{"location":"leaderboards/solvers/milojacquet/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Hemimegaminx  1 1m 31s 670ms 2024-03-31 MT Canon-Cut Klein Quartic  1 24m 14s 410ms 2024-04-04 MT","boost":1},{"location":"leaderboards/solvers/milojacquet/#history","title":"History","text":"MagicTile HemimegaminxCanon-Cut Klein Quartic Rank Time Date Program  1 1m 31s 670ms 2024-03-31 MT 1m 47s 690ms 2024-03-06 MT Rank Time Date Program  1 24m 14s 410ms 2024-04-04 MT","boost":1},{"location":"leaderboards/solvers/myigiter/","title":"Murat Emre Yi\u011fiter","text":"","boost":1},{"location":"leaderboards/solvers/myigiter/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73 11 9m 32s 680ms 2023-10-25 HSC 3\u00d73\u00d73\u00d73 Ao5 5 9m 52s 040ms 2023-10-25 HSC","boost":1},{"location":"leaderboards/solvers/myigiter/#history","title":"History","text":"4D Virtual n<sup>4</sup> 3\u00d73\u00d73\u00d73 SingleAo5 Rank Time Date Program 11 9m 32s 680ms 2023-10-25 HSC Rank Time Date Program 5 9m 52s 040ms 2023-10-25 HSC","boost":1},{"location":"leaderboards/solvers/olaf/","title":"Olaf Niechcial","text":"","boost":1},{"location":"leaderboards/solvers/olaf/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73 9 7m 55s 600ms 2023-06-12 HSC","boost":1},{"location":"leaderboards/solvers/olaf/#history","title":"History","text":"4D Virtual n<sup>4</sup> 3\u00d73\u00d73\u00d73 Single Rank Time Date Program 9 7m 55s 600ms 2023-06-12 HSC 8m 38s 360ms 2023-06-11 HSC 9m 44s 250ms 2023-06-10 HSC 10m 33s 560ms 2023-06-09 HSC 11m 10s 750ms 2023-06-08 HSC 13m 56s 310ms 2023-06-07 HSC 17m 46s 640ms 2023-06-06 HSC 20m 13s 860ms 2023-06-06 HSC","boost":1},{"location":"leaderboards/solvers/origamist/","title":"Normal Origamist","text":"","boost":1},{"location":"leaderboards/solvers/origamist/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program Physical 2\u00d72\u00d72\u00d72 6 1m 40s 300ms 2023-07-08 -","boost":1},{"location":"leaderboards/solvers/origamist/#history","title":"History","text":"4D Physical Physical 2\u00d72\u00d72\u00d72 Single Rank Time Date 6 1m 40s 300ms 2023-07-08","boost":1},{"location":"leaderboards/solvers/pkearth/","title":"PKEarth","text":"","boost":1},{"location":"leaderboards/solvers/pkearth/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73 10 8m 31s 140ms 2024-01-30 HSC","boost":1},{"location":"leaderboards/solvers/pkearth/#history","title":"History","text":"4D Virtual n<sup>4</sup> 3\u00d73\u00d73\u00d73 Single Rank Time Date Program 10 8m 31s 140ms 2024-01-30 HSC","boost":1},{"location":"leaderboards/solvers/rowan/","title":"Rowan Fortier","text":"","boost":1},{"location":"leaderboards/solvers/rowan/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73 5 3m 34s 440ms 2024-04-08 HSC 3\u00d73\u00d73\u00d73\u00d73  2 7h 54m 19s 600ms 2024-04-06 MC7D Physical 2\u00d72\u00d72\u00d72  3 1m 18s 240ms 2022-09-17 - Physical 2\u00d72\u00d72\u00d72 One-Handed  3 5m 35s 290ms 2023-03-12 - 3-Layer Simplex  2 1m 30s 460ms 2023-01-26 MC4D 1\u00d73\u00d73\u00d73 4 1m 13s 350ms 2024-03-31 MPU","boost":1},{"location":"leaderboards/solvers/rowan/#history","title":"History","text":"4D5D Virtual n<sup>4</sup>PhysicalOther 3\u00d73\u00d73\u00d73 Single Rank Time Date Program 5 3m 34s 440ms 2024-04-08 HSC 3m 45s 380ms 2024-01-28 HSC 3m 55s 650ms 2024-01-24 HSC 4m 02s 370ms 2024-01-22 HSC 4m 02s 820ms 2023-08-12 HSC 4m 07s 830ms 2023-07-13 HSC 4m 10s 390ms 2023-07-06 HSC 4m 12s 920ms 2023-02-21 HSC 4m 20s 019ms 2023-01-12 HSC 4m 27s 700ms 2023-01-12 HSC 4m 38s 750ms 2023-01-12 HSC 4m 42s 190ms 2023-01-11 HSC 4m 50s 970ms 2023-01-09 HSC 4m 55s 270ms 2023-01-09 HSC 5m 02s 290ms 2023-01-06 HSC 5m 21s 880ms 2023-01-06 HSC 5m 27s 170ms 2023-01-05 HSC 5m 45s 180ms 2023-01-05 HSC 5m 48s 120ms 2023-01-05 HSC 5m 51s 330ms 2023-01-05 HSC 5m 58s 300ms 2023-01-04 HSC 6m 25s 040ms 2023-01-04 HSC 6m 31s 020ms 2022-12-01 HSC 8m 58s 820ms 2022-11-18 HSC Physical 2\u00d72\u00d72\u00d72 SingleOne Handed Rank Time Date  3 1m 18s 240ms 2022-09-17 1m 27s 170ms 2022-08-02 1m 28s 140ms 2022-06-20 1m 46s 240ms 2022-05-07 1m 56s 750ms 2021-12-11 2m 00s 660ms 2021-12-11 2m 03s 580ms 2021-12-09 2m 05s 270ms 2021-12-06 2m 16s 540ms 2021-11-15 Rank Time Date  3 5m 35s 290ms 2023-03-12 6m 14s 880ms 2023-03-12 6m 25s 120ms 2022-07-01 3-Layer Simplex1\u00d73\u00d73\u00d73 Rank Time Date Program  2 1m 30s 460ms 2023-01-26 MC4D 1m 43s 450ms 2023-01-25 MC4D 2m 14s 040ms 2023-01-23 MC4D Rank Time Date Program 4 1m 13s 350ms 2024-03-31 MPU 1m 15s 580ms 2023-05-31 MPU 3\u00d73\u00d73\u00d73\u00d73 Rank Time Date Program  2 7h 54m 19s 600ms 2024-04-06 MC7D","boost":1},{"location":"leaderboards/solvers/tetrian/","title":"Tetrian","text":"","boost":1},{"location":"leaderboards/solvers/tetrian/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 2\u00d72\u00d72\u00d72 4 1m 00s 800ms 2021-07-24 MC4D 3\u00d73\u00d73\u00d73 12 10m 11s 870ms 2019-05-04 MC4D 3\u00d73\u00d73\u00d73 No Filters  2 10m 11s 870ms 2019-05-04 MC4D 4\u00d74\u00d74\u00d74 6 1h 12m 07s 650ms 2019-05-19 MC4D 3-Layer Simplex  3 1m 43s 440ms 2021-07-24 MC4D","boost":1},{"location":"leaderboards/solvers/tetrian/#history","title":"History","text":"4D Virtual n<sup>4</sup>Other 2\u00d72\u00d72\u00d723\u00d73\u00d73\u00d734\u00d74\u00d74\u00d74 Single Rank Time Date Program 4 1m 00s 800ms 2021-07-24 MC4D SingleNo Filters Rank Time Date Program 12 10m 11s 870ms 2019-05-04 MC4D Rank Time Date Program  2 10m 11s 870ms 2019-05-04 MC4D Rank Time Date Program 6 1h 12m 07s 650ms 2019-05-19 MC4D 3-Layer Simplex Rank Time Date Program  3 1m 43s 440ms 2021-07-24 MC4D","boost":1},{"location":"leaderboards/solvers/tymofro/","title":"Tymon Fro","text":"","boost":1},{"location":"leaderboards/solvers/tymofro/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 2\u00d72\u00d72\u00d72  3 45s 370ms 2024-03-19 HSC 3\u00d73\u00d73\u00d73 6 3m 53s 450ms 2024-02-12 HSC 4\u00d74\u00d74\u00d74  3 17m 52s 810ms 2024-03-21 HSC 5\u00d75\u00d75\u00d75  3 1h 27m 10s 780ms 2023-10-01 HSC 2\u00d72\u00d72\u00d72\u00d72  1 1h 13m 07s 260ms 2024-04-01 MPU Physical 2\u00d72\u00d72\u00d72 4 1m 19s 680ms 2023-11-07 - Physical 2\u00d72\u00d72\u00d72 One-Handed  1 2m 56s 980ms 2023-10-08 - 1\u00d73\u00d73\u00d73  1 57s 460ms 2023-11-11 MPU","boost":1},{"location":"leaderboards/solvers/tymofro/#history","title":"History","text":"4D5D Virtual n<sup>4</sup>PhysicalOther 2\u00d72\u00d72\u00d723\u00d73\u00d73\u00d734\u00d74\u00d74\u00d745\u00d75\u00d75\u00d75 Single Rank Time Date Program  3 45s 370ms 2024-03-19 HSC 54s 520ms 2023-08-17 HSC Single Rank Time Date Program 6 3m 53s 450ms 2024-02-12 HSC 4m 08s 700ms 2024-01-25 HSC 4m 33s 150ms 2023-08-22 HSC 5m 41s 880ms 2023-08-21 HSC 6m 22s 380ms 2023-08-16 HSC 6m 54s 540ms 2023-07-31 HSC 7m 19s 720ms 2023-07-27 HSC 9m 08s 770ms 2023-07-22 HSC 10m 41s 570ms 2023-07-22 HSC 12m 48s 460ms 2023-07-21 HSC 15m 22s 620ms 2023-07-17 HSC Rank Time Date Program  3 17m 52s 810ms 2024-03-21 HSC 23m 21s 810ms 2024-03-19 HSC 26m 09s 960ms 2023-08-02 HSC 34m 00s 120ms 2023-07-25 HSC Rank Time Date Program  3 1h 27m 10s 780ms 2023-10-01 HSC Physical 2\u00d72\u00d72\u00d72 SingleOne Handed Rank Time Date 4 1m 19s 680ms 2023-11-07 1m 26s 100ms 2023-09-17 2m 01s 930ms 2023-08-16 Rank Time Date  1 2m 56s 980ms 2023-10-08 1\u00d73\u00d73\u00d73 Rank Time Date Program  1 57s 460ms 2023-11-11 MPU 1m 06s 710ms 2023-11-10 MPU 1m 19s 640ms 2023-11-04 MPU 2\u00d72\u00d72\u00d72\u00d72 Rank Time Date Program  1 1h 13m 07s 260ms 2024-04-01 MPU","boost":1},{"location":"leaderboards/solvers/void/","title":"The Void","text":"","boost":1},{"location":"leaderboards/solvers/void/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73 15 17m 19s 920ms 2023-06-28 HSC","boost":1},{"location":"leaderboards/solvers/void/#history","title":"History","text":"4D Virtual n<sup>4</sup> 3\u00d73\u00d73\u00d73 Single Rank Time Date Program 17m 19s 920ms 2023-06-28 HSC 15 17m 19s 920ms 2023-06-28 HSC 20m 12s 920ms 2023-06-11 HSC","boost":1},{"location":"leaderboards/solvers/weill/","title":"Freya","text":"","boost":1},{"location":"leaderboards/solvers/weill/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73 17 24m 46s 950ms 2022-12-02 HSC","boost":1},{"location":"leaderboards/solvers/weill/#history","title":"History","text":"4D Virtual n<sup>4</sup> 3\u00d73\u00d73\u00d73 Single Rank Time Date Program 17 24m 46s 950ms 2022-12-02 HSC","boost":1},{"location":"leaderboards/solvers/yuste/","title":"Sebastian Yuste","text":"","boost":1},{"location":"leaderboards/solvers/yuste/#rankings","title":"Rankings","text":"Puzzle Rank Time Date Program 3\u00d73\u00d73\u00d73 Blindfolded  1 1h 21m 17s 680ms 2022-03-17 MC4D","boost":1},{"location":"leaderboards/solvers/yuste/#history","title":"History","text":"4D Virtual n<sup>4</sup> 3\u00d73\u00d73\u00d73 Blindfolded Rank Time Date Program  1 1h 21m 17s 680ms 2022-03-17 MC4D","boost":1},{"location":"methods/","title":"Methods","text":"<p>This page lists solving methods by puzzle.</p> <p>It\u2019s a good idea to learn Notation before trying to learn any of these methods</p>"},{"location":"methods/#physical-2222","title":"Physical 2x2x2x2","text":"<p>While you can use virtual 2<sup>4</sup> methods on the physical 2<sup>4</sup>, it isn\u2019t recommended because you may have to use an excessive amount of gyros. These methods are specifically designed for the unique restrictive turning of the physical 2<sup>4</sup> in mind.</p> <ul> <li>Luna\u2019s Method</li> <li>Rowan\u2019s Method</li> <li>Grant\u2019s OBC Method</li> <li>P4L (PBLBC)</li> <li>GRCL Method</li> </ul>"},{"location":"methods/#2222","title":"2x2x2x2","text":"<ul> <li>4Tega</li> <li>Cell By Cell</li> </ul>"},{"location":"methods/#3333","title":"3x3x3x3","text":"<ul> <li>CFOP</li> <li>3-Block</li> <li>Octachoroux</li> </ul>"},{"location":"methods/#4444","title":"4x4x4x4+","text":"<ul> <li>Reduction</li> <li>3Block</li> </ul>"},{"location":"methods/big-cube-reduction/","title":"Big Cube Reduction","text":"<p>4<sup>4</sup> with paired 1c centers</p> <p></p> <p>Just like 3D reduction of big cubes, higher dimensional reduction works by pairing up groups of pieces with more and more colors until the n<sup>d</sup> is reduced into an (n-1)<sup>d</sup>. Pairing up pieces is done in a very similar way to the 3D method; If you can solve 3<sup>3</sup>, 4<sup>3</sup>, and 3<sup>4</sup>, then you can solve 4<sup>4</sup>.</p>"},{"location":"methods/dimensional-reduction/","title":"Dimensional Reduction","text":"<p>Dimensional reduced 3<sup>4</sup></p> <p></p> <p>Dimensional reduction is a technique to reduce an n<sup>d</sup> puzzle into an n<sup>d-1</sup> puzzle. It does this by pairing up n-piece long bars (e.g. to reduce 3<sup>4</sup> into 3<sup>3</sup>, pair up 3-piece long bars).</p> <p>To get to the dimensionally reduced state from a solved 3<sup>4</sup>, do only turns that don\u2019t change the colours of the I/O axis (moves that look like big 3<sup>3</sup> moves).</p> Does RKT PLC count as Dimensional Reduction? <p>RKT PLC does not count as dimensional reduction because certain states of the last cell are not reachable without incurring some form of RKT debt.</p> <p>Below is Andrey\u2019s log file of a 3<sup>4</sup> solve done with dimensional reduction. It\u2019s essentially a CFOP solve, but with some advanced pseudo-slotting and commutators. The solve is similar to doing Pseudo F2L (where the pairs can be in any slot), and then doing OLC/PLC (except solving the PLC into the scrambled state of the rest of the puzzle) and then finishing by solving the reduced puzzle that remains.</p> Andrey_34.log Andrey_34.log<pre><code>MagicCube4D 3 0 315 {4,3,3} 3\n-0.18955569589822457 0.43991704061351233 -0.877805009971115 -2.7145128148370095E-16\n-2.839993659326744E-9 1.4847274022149884E-10 6.876845398745129E-10 -1.0\n-0.14794206390078768 -0.8966035341133775 -0.41739100175276544 8.357431997622695E-19\n0.970660488472316 -0.05074544307867573 -0.2350385417871584 -2.925836319069701E-9\n*\n104,1,1 12,-1,2 82,1,4 72,1,4 101,-1,1 58,1,4 169,1,4 136,1,2 174,-1,1 158,-1,2\n100,-1,2 44,-1,2 156,1,4 201,-1,1 141,-1,4 40,1,4 208,1,2 162,1,2 143,1,2 171,1,1\n208,-1,1 144,1,4 182,-1,1 56,-1,2 186,1,4 126,1,1 200,-1,2 120,-1,2 156,1,1 194,1,2\n166,-1,2 85,1,1 6,-1,1 143,-1,1 120,1,2 182,-1,2 147,1,4 203,1,1 71,-1,2 192,-1,2\n73,1,2 5,-1,2 159,-1,1 124,-1,2 5,1,2 184,1,4 122,1,1 213,-1,1 m| 102,-1,1\n24,1,1 49,-1,1 20,1,1 131,-1,1 24,1,1 186,1,1 157,1,1 22,1,1 49,-1,1 211,-1,4\n209,1,1 75,-1,1 197,1,1 75,1,1 212,1,4 131,-1,1 194,1,1 131,1,1 195,-1,4 102,-1,1\n211,1,1 102,1,1 214,-1,4 184,1,1 214,-1,1 184,-1,1 214,1,4 78,-1,1 210,1,1 78,1,1\n210,-1,4 209,-1,1 76,1,1 205,1,1 76,-1,1 212,-1,4 78,-1,1 199,1,1 78,1,1 191,-1,4\n202,1,1 52,-1,1 204,1,4 132,1,1 210,1,1 210,1,1 132,-1,1 15,1,1 128,1,1 74,-1,1\n106,-1,1 214,1,4 131,1,1 195,-1,1 131,-1,1 214,-1,4 214,-1,1 187,-1,1 196,-1,4 158,-1,1\n213,1,1 158,1,1 196,1,4 155,1,1 211,1,4 78,1,1 210,-1,1 78,-1,1 22,1,1 214,1,1\n77,1,1 212,1,1 77,-1,1 206,1,1 185,-1,1 212,-1,1 185,1,1 77,1,1 212,-1,1 77,-1,1\n190,1,1 6,-1,1 48,1,1 209,-1,1 48,-1,1 190,1,4 182,1,1 160,-1,1 52,-1,1 24,1,1\n157,1,1 213,1,4 157,-1,1 198,1,1 157,1,1 213,-1,4 157,-1,1 213,1,4 74,1,1 187,-1,1\n189,-1,4 105,1,1 211,1,4 105,-1,1 214,1,1 105,1,1 211,-1,4 105,-1,1 189,1,4 187,1,1\n105,1,1 211,1,4 105,-1,1 214,1,1 105,1,1 211,-1,4 105,-1,1 3,1,1 210,1,1 130,-1,1\n212,-1,4 130,1,1 199,1,1 130,-1,1 212,1,4 130,1,1 192,1,4 74,1,1 193,-1,4 198,1,1\n76,-1,1 210,-1,4 76,1,1 201,1,1 76,-1,1 210,1,4 76,1,1 193,1,4 101,1,1 187,-1,1\n187,-1,1 200,1,4 48,-1,1 209,-1,4 48,1,1 191,1,1 48,-1,1 209,1,4 48,1,1 200,1,4\n51,-1,1 199,1,4 51,1,1 213,-1,1 51,-1,1 199,1,4 51,1,1 182,-1,1 78,1,1 202,1,4\n78,-1,1 210,1,1 210,1,1 78,1,1 202,1,4 78,-1,1 128,1,2 160,1,1 128,1,2 160,-1,1\n182,-1,2 182,-1,2 132,-1,1 202,1,4 132,1,1 196,1,1 132,-1,1 202,1,4 132,1,1 211,1,1\n211,1,1 47,-1,1 201,1,1 101,1,1 74,1,1 201,1,1 128,-1,1 155,-1,1 200,1,1 47,1,1\n155,1,1 200,1,1 52,-1,1 202,1,1 74,-1,1 128,-1,1 202,1,1 182,-1,1 160,1,1 208,1,1\n182,-1,1 155,-1,1 208,1,1 155,1,2 206,1,1 182,1,1 101,1,1 206,1,1 47,1,1 74,-1,1\n207,1,1 182,1,1 128,1,1 207,1,1 187,-1,1 197,1,1 47,1,1 74,1,1 47,-1,1 74,-1,1\n47,1,1 74,1,1 197,1,1 133,-1,1 155,-1,1 155,-1,1 133,-1,1 52,1,1 133,1,1 52,-1,1\n205,1,1 74,-1,1 182,-1,1 74,1,1 182,1,1 74,-1,1 182,-1,1 205,1,1 133,-1,1 203,1,1\n155,-1,1 101,-1,1 155,1,1 101,1,1 155,-1,1 101,-1,1 203,1,1 52,-1,1 79,1,1 52,1,1\n52,1,1 208,1,1 182,-1,1 155,-1,1 182,1,1 155,1,1 182,-1,1 155,-1,1 208,1,1 155,-1,1\n74,-1,1 74,-1,1 182,1,1 74,-1,1 182,-1,1 101,1,1 182,1,1 101,-1,1 182,1,1 101,-1,1\n101,-1,1 74,1,1 74,1,1 47,-1,1 128,1,1 155,-1,1 155,-1,1 47,-1,1 47,-1,1 79,-1,1\n79,-1,1 47,-1,2 47,-1,2 106,1,1 74,-1,1 74,-1,1 47,1,1 133,1,1 133,1,1 79,1,1\n79,1,1 101,1,2 101,1,2 187,-1,1 47,1,1 47,1,1 101,1,1 101,1,1 47,1,1 47,1,1\n101,1,1 101,1,1 47,1,1 47,1,1 74,-1,1 74,-1,1 47,-1,2 74,1,1 74,1,1 47,1,2\n74,1,1 74,1,1 133,1,1 133,1,1.\n</code></pre> <p>The move count is extremely low, which is pretty cool.</p>"},{"location":"methods/general-cfop/","title":"Generalized CFOP","text":"<p>This article is a generator for the steps of a dimension-generalized CFOP method. For CFOP on 3<sup>4</sup>, see CFOP.</p> <p>CFOP on: 3<sup>5</sup></p> <p></p>"},{"location":"methods/general-cfop/#cross","title":"Cross","text":""},{"location":"methods/general-cfop/#f2l","title":"F2L","text":""},{"location":"methods/general-cfop/#oll","title":"OLL","text":""},{"location":"methods/general-cfop/#pll","title":"PLL","text":""},{"location":"methods/2x2x2x2/4tega/","title":"4tega","text":"<p>4tega is the 4-dimensional equivalent of the Ortega Method on 2<sup>3</sup>. There are 2 main variants, as there is no perfect way to generalize this method to 4d.</p>"},{"location":"methods/2x2x2x2/4tega/#variant-1","title":"Variant 1","text":""},{"location":"methods/2x2x2x2/4tega/#orient-both-cells","title":"Orient Both Cells","text":"<p>Start by orienting a single side, using either colour from that side or its opposite side. This can easily be done without RKT by using blockbuilding. Next, use 2<sup>4</sup> OLC strategies to orient the other cell. Because the first cell isn\u2019t solved, you don\u2019t have to worry about messing it up, allowing you to save moves.</p>"},{"location":"methods/2x2x2x2/4tega/#separate-colors","title":"Separate colors","text":"<p>Separate the colors of the cells that are oriented, leaving you with 2 2<sup>3</sup> solves.</p>"},{"location":"methods/2x2x2x2/4tega/#permute-both-cells","title":"Permute Both Cells","text":"<p>Solve the first cell like a 2<sup>3</sup> without RKT, then solve the other cell like a 2<sup>3</sup>, but using RKT.</p>"},{"location":"methods/2x2x2x2/4tega/#variant-2","title":"Variant 2","text":""},{"location":"methods/2x2x2x2/4tega/#orient-both-cells_1","title":"Orient Both Cells","text":"<p>Same as in Variant 1.</p>"},{"location":"methods/2x2x2x2/4tega/#separate-colors_1","title":"Separate colors","text":"<p>Same as in Variant 1.</p>"},{"location":"methods/2x2x2x2/4tega/#orient-both-layers-of-both-cells","title":"Orient Both Layers of Both Cells","text":"<p>Use RKT to orient both layers of both cells, just like OBL in 3D Ortega. This can be done using the OCLL algorithms.</p>"},{"location":"methods/2x2x2x2/4tega/#p4lpblbc","title":"P4L/PBLBC","text":"<p>Permtue all 4 layers of both cells at once using algorithms. Some algorithms can be found here.</p>"},{"location":"methods/2x2x2x2/cell-by-cell/","title":"Cell by Cell","text":"<p>Cell by Cell is the 4D equivalent of Layer by Layer.</p>"},{"location":"methods/2x2x2x2/cell-by-cell/#1-solve-the-first-cell","title":"1. Solve the first cell","text":"<p>Completely solve one of the sides of the puzzle. You can do this by blockbuilding, or by getting all the same color one on side and then using RKT to permute the pieces around until they are solved.</p>"},{"location":"methods/2x2x2x2/cell-by-cell/#2-solve-the-last-cell","title":"2. Solve the last cell","text":""},{"location":"methods/2x2x2x2/cell-by-cell/#a-orient-the-last-cell","title":"a. Orient the last cell","text":"<p>Orient the last cell by using RKT to set up OCLL cases, and then using RKT to perform those algorithms.</p>"},{"location":"methods/2x2x2x2/cell-by-cell/#b-permute-the-last-cell","title":"b. Permute the last cell","text":"<p>Permute the last cell like a 2<sup>3</sup> using RKT. You may run into RKT parity in this step, or you can avoid it by using certain last layer algorithms.</p>"},{"location":"methods/2x2x2x2-physical/grant/","title":"Grant\u2019s OBC Method for physical 2x2x2x2","text":"<p>Grant\u2019s OBC Method uses only 3 gyros, making it much faster than Rowan\u2019s OBC Method. It works by secretly setting up to an H OCLL case while orienting both cells.</p>"},{"location":"methods/2x2x2x2-physical/grant/#steps","title":"Steps","text":""},{"location":"methods/2x2x2x2-physical/grant/#inspection","title":"Inspection","text":"<p>Before starting the solve, inspect the puzzle for an opposite colour pair that you can easily get exactly 8 stickers from that pair to be on the y-axis. They can be in any spot, as long as they are pointing up or down.</p>"},{"location":"methods/2x2x2x2-physical/grant/#getting-8-oriented-to-y-axis-then-gyro","title":"Getting 8 Oriented to Y-axis, then gyro","text":"<p>This is done in just a few simple moves, and should be fully planned during inspection for speedsolving. This step is very difficult to get used to, but gets easier over time. Once it looks like the image above, perform the gyro algorithm such that those 8 stickers end up on the x-axis (the \u201cpipped\u201d spots).</p>"},{"location":"methods/2x2x2x2-physical/grant/#orient-the-remaining-8-to-y-axis","title":"Orient the remaining 8 to y-axis","text":"<p>Now that 8 corners have been oriented, you can do any moves (besides a gyro), and not affect their orientation. Pair up the remaining 8 so that they are all on the same cell, and oriented to the y-axis.</p>"},{"location":"methods/2x2x2x2-physical/grant/#finish-orientation","title":"Finish orientation","text":"<p>Rotate the cell with the pieces you just paired up to the w-axis (facing in/out). Now perform the gyro algorithm, and cancel into the 5 move H OCLL case, and then gyro again.</p>"},{"location":"methods/2x2x2x2-physical/grcl/","title":"GRCL Method","text":"<p>The Grant Rowan Connor Luna method, or GRCL (pronounced gurkle) is a combination of the best parts of several methods, including Grant\u2019s OBC method, Rowan\u2019s OBC method, Luna\u2019s cell blockbuilding technique, and Connor Lindsay\u2019s P4L algorithms. The name GRCL was proposed by Hypercubers Discord member Jasper on July 18 2022.</p>"},{"location":"methods/2x2x2x2-physical/grcl/#steps","title":"Steps","text":"<ul> <li>Orient Both Cells using either Grant\u2019s method or Rowan\u2019s method (whatever looks better in that particular scramble)</li> <li>Separate the oriented colours of both cells while orienting 2 layers on those cells by holding the puzzle vertically and using Luna\u2019s method</li> <li>Permuate both layers of both cell using Rowan\u2019s updated version of Connor\u2019s P4L algorithms</li> </ul>"},{"location":"methods/2x2x2x2-physical/luna/","title":"Luna\u2019s Method for 2x2x2x2","text":"<p>A method that Luna developed in 2017-18 making heavy use of an IU move sequence.</p>"},{"location":"methods/2x2x2x2-physical/luna/#steps","title":"Steps","text":"<ul> <li>Orient the D cell with opposite colours</li> <li>Orient the U cell making use of the IU move</li> <li>Permute a single cell via blockbuilding</li> <li>Permute the last cell using RKT</li> </ul>"},{"location":"methods/2x2x2x2-physical/luna/#resources","title":"Resources","text":"<ul> <li>Luna\u2019s video</li> </ul>"},{"location":"methods/2x2x2x2-physical/p4l/","title":"P4L","text":""},{"location":"methods/2x2x2x2-physical/p4l/#history","title":"History","text":"<p>PBLBC/P4L/PAL is an advanced algorithm set for speedsolving Melinda\u2019s Physical 2x2x2x2. It is used after orientation and separation of 2 opposite cells, followed by (or simultaneously) orienting both layers on both of those cells. This leaves you with two 2x2x2 PBL cases, one on each cell. The original idea for this came from Connor Lindsay, who created most of the algorithms in his algorithm sheet.</p> <p>2 years later, Rowan tried optimizing the algorithms, and compiling them in a new document, which can be found here.</p>"},{"location":"methods/2x2x2x2-physical/p4l/#algorithms","title":"Algorithms","text":"<p>Each layer can be in 3 different permutations: solved, adjacent swap, and opposite swap. This gives us 81 cases, but some of these are impossible. Cases can also be rearranged via Case Manipulation, further reducing the number of cases to 29. Practically however, only a few algorithms are used because all the bad cases are really slow to execute.</p>"},{"location":"methods/2x2x2x2-physical/p4l/#big-3d-cases","title":"Big 3D Cases","text":"<p>Big 3D cases are the cases where you have 2 pairs of the same layers, such as OOAA. In such a case, you can just use the normal 2<sup>3</sup> PBL algorithm for that case (but it must be a version with the moveset <code>&lt;R2,L2,F2,B2,U*,D*&gt;</code> only, due to the restrictions in turning the puzzle).</p>"},{"location":"methods/2x2x2x2-physical/rowan/","title":"Rowan\u2019s OBC Method for 2x2x2x2","text":"<p>Rowan developed this method for Orienting Both Cells while trying to solve the physical 2x2x2x2 for the first time in a YouTube video.</p>"},{"location":"methods/2x2x2x2-physical/rowan/#steps","title":"Steps","text":""},{"location":"methods/2x2x2x2-physical/rowan/#inspection","title":"Inspection","text":"<p>Before starting the solve, inspect the puzzle for an opposite colour pair that has 4 or fewer stickers oriented to the Left/Right axis (x-axis). They can be made of any colour in the colour pair, and can be in any spot on the puzzle.</p> <p> <p> 4 red/orange corners oriented to L/R  </p>"},{"location":"methods/2x2x2x2-physical/rowan/#getting-8-oriented-to-y-axis","title":"Getting 8 Oriented to Y-axis","text":"<p>Hold the puzzle vertically, and use block building to orient 8 pieces on a cell to the y-axis using the same colour pair that has 4 or less from inspection. This step is intuitive and does not require any RKT.</p> <p> <p> 8 red/orange corners oriented to U/D  </p>"},{"location":"methods/2x2x2x2-physical/rowan/#getting-12-oriented-to-y-axis","title":"Getting 12 Oriented to Y-axis","text":"<p>Now use RKT to orient a layer of 4 stickers on the other cell, leaving you with a \u201clast layer\u201d of 4 unoriented pieces on one of the cells.</p> <p> <p> 12 red/orange corners oriented to U/D  </p>"},{"location":"methods/2x2x2x2-physical/rowan/#fixing-the-last-layer","title":"Fixing the Last Layer","text":"<p>Gyro the puzzle such that the 12 pieces that were oriented end up on the x-axis. Now you should have 4 (or fewer) stickers from that colour pair oriented in other directions besides the x-axis. All you need to do is use RKT to make it into a layer that looks like a possible OCLL case, not worrying about messing up the other 12 corners.</p> <p> <p> an H OCLL case set up on LU  </p> <p>From here, gyro back. Now you will have a normal OCLL case that you can solve using RKT. After doing that algorithm, you should have all 16 corners oriented to the y-axis. Finally, you just gyro to put them all on the x-axis, and OBC is solved.</p>"},{"location":"methods/2x2x2x2-physical/rowan/#analysis","title":"Analysis","text":"<p>This technique takes more moves than other known OBC methods, and it uses up to 4 gyros. Besides the skip case where everything is already oriented, the best possible case for this technique uses 3 gyros, making it slower than other techniques. It also requires knowing the OCLL algorithms, which other techniques don\u2019t.</p>"},{"location":"methods/3x3x3x3/3block/","title":"3-Block","text":"<p>3-Block is a method designed for quickly speedsolving the 3<sup>4</sup>. Many speedsolving world records have been set using this method. It was primarily invented by Luna and HactarCE, and has been described as \u201cZZ without EO\u201d. 3-Block is most analogous to the 3<sup>3</sup> method FreeFOP (which omits a single cross piece in order to pair pieces easier). Compared to 4D CFOP, 3-Block uses ~20% fewer moves.</p> <p>Prerequisites</p> <ul> <li>Knowledge of how the 3<sup>4</sup> moves</li> <li>Notation</li> <li>RKT</li> <li>3D CFOP with 2-look OLL &amp; PLL</li> </ul> HSC Piece filters Pink crossRowan\u2019s filters (white cross)Rowan\u2019s new filters (pink cross)Triplets instead of pairs <pre><code>- preset_name: 4-cross\n  visible_pieces: 000200080a5010284280\n- preset_name: Mid (back)\n  visible_pieces: 000200084a5090294284\n- preset_name: Mid\n  visible_pieces: 000200094a5294294294\n- preset_name: Left (cross)\n  visible_pieces: 000200094a5294296294\n- preset_name: Left\n  visible_pieces: 0002000d4a5a943962d4\n- preset_name: BL-a\n  visible_pieces: 0002000d4a7a943963d4\n- preset_name: BL\n  visible_pieces: 0002000d6a7ad4b963d6\n- preset_name: FL-a\n  visible_pieces: 0002000d6b7ad4bd63d6\n- preset_name: FL\n  visible_pieces: 0002008d6b7bd6bd6bd6\n- preset_name: Right (cross)\n  visible_pieces: 0002008d6b7bd6bdebd6\n- preset_name: Right\n  visible_pieces: 0002008d7b7bf6fdebd7\n- preset_name: BR-a\n  visible_pieces: 0002008d7bfbf6fdefd7\n- preset_name: BR\n  visible_pieces: 0002008dfbfbf7ffefdf\n- preset_name: FR-a\n  visible_pieces: 0002008dfffbf7ffffdf\n- preset_name: FR\n  visible_pieces: 0002008fffffffffffff\n- preset_name: OLC 2c\n  visible_pieces: \"01471400000000000000\"\n- preset_name: OLC 3c\n  visible_pieces: aaa8aa20000000000000\n- preset_name: OLC 4c\n  visible_pieces: \"54104150000000000000\"\n- preset_name: OLC\n  visible_pieces: ffffff70000000000000\n- preset_name: PLC 2c\n  visible_pieces: 014714080a5010004000\n- preset_name: PLC cross\n  visible_pieces: \"01479e20000000000000\"\n- preset_name: PLC F2L\n  visible_pieces: 01efff70000000000000\n- preset_name: PLC\n  visible_pieces: ffffff70000000000000\n- preset_name: End\n  visible_pieces: ffffffffffffffffffff\n</code></pre> <pre><code>- preset_name: 4/6Cross\n  visible_pieces: 000204080a5830004080\n- preset_name: Middle 1\n  visible_pieces: 00070e080a5830004080\n- preset_name: Middle 2\n  visible_pieces: 00070e080a583000e0c1\n- preset_name: Left Block 1\n  visible_pieces: 00478e080a5a3008e0d1\n- preset_name: Left Block 2\n  visible_pieces: 00478e080e5e3008e0d1\n- preset_name: Left Block 3\n  visible_pieces: 00c78f080e5e3008e0d1\n- preset_name: Left Block 4\n  visible_pieces: 00c78f080e5e3008f0f1\n- preset_name: Left Block 5\n  visible_pieces: 00c78f080f5f3008f0f1\n- preset_name: Left Block 6\n  visible_pieces: 00e7cf080f5f3008f0f1\n- preset_name: Left Block 7\n  visible_pieces: 00e7cf080f5f300cf8f1\n- preset_name: Right Block 1\n  visible_pieces: 00e7df280f5fb00cfaf5\n- preset_name: Right Block 2\n  visible_pieces: 00e7df280fdfb10cfaf5\n- preset_name: Right Block 3\n  visible_pieces: 00e7ff680fdfb10cfaf5\n- preset_name: Right Block 4\n  visible_pieces: 00e7ff680fdfb10cfefd\n- preset_name: Right Block 5\n  visible_pieces: 00e7ff680ffff10cfefd\n- preset_name: Right Block 6\n  visible_pieces: 00efff780ffff10cfefd\n- preset_name: Right Block 7\n  visible_pieces: 00efff780ffff10cffff\n- preset_name: 2c OLC\n  visible_pieces: 01efff7d5ffff12cffff\n- preset_name: 3c OLC\n  visible_pieces: abeffffffffff57dffff\n- preset_name: 4c OLC\n  visible_pieces: 54ffff700ffffb8effff\n- preset_name: 2c PLC\n  visible_pieces: 01efff7d5ffff12cffff\n- preset_name: RKT PLC Cross\n  visible_pieces: ab00000d500000204000\n- preset_name: RKT PLC F2L\n  visible_pieces: ff10008ff00000204000\n- preset_name: RKT PLC LL\n  visible_pieces: ff10008ff0000ef30000\n</code></pre> <pre><code>- preset_name: 4-cross\n  visible_pieces: 000200080a5010284280\n- preset_name: odM\n  visible_pieces: 000200094a5014294280\n- preset_name: ouM\n  visible_pieces: 000200094a5294294294\n- preset_name: OLES\n  visible_pieces: 000200094a5294296294\n- preset_name: oLS\n  visible_pieces: 0002000d4a5a943962d4\n- preset_name: oBLE\n  visible_pieces: 0002000d4a7a943963d4\n- preset_name: oDBL\n  visible_pieces: 0002000d6a7a94b963d4\n- preset_name: oUBL\n  visible_pieces: 0002000d6a7ad4b963d6\n- preset_name: oFLE\n  visible_pieces: 0002000d6b7ad4bd63d6\n- preset_name: oDFL\n  visible_pieces: 0002008d6b7ad6bd63d6\n- preset_name: oUFL\n  visible_pieces: 0002008d6b7bd6bd6bd6\n- preset_name: ORES\n  visible_pieces: 0002008d6b7bd6bdebd6\n- preset_name: oRS\n  visible_pieces: 0002008d7b7bf6fdebd7\n- preset_name: oBRE\n  visible_pieces: 0002008d7bfbf6fdefd7\n- preset_name: oDBR\n  visible_pieces: 0002008dfbfbf6ffefd7\n- preset_name: oUBR\n  visible_pieces: 0002008dfbfbf7ffefdf\n- preset_name: oFRE\n  visible_pieces: 0002008dfffbf7ffffdf\n- preset_name: oDFR\n  visible_pieces: 0002008ffffbffffffdf\n- preset_name: oUFR\n  visible_pieces: 0002008fffffffffffff\n- preset_name: OLC 2c\n  visible_pieces: \"01471400000000000000\"\n- preset_name: OLC 3c\n  visible_pieces: aaa8aa20000000000000\n- preset_name: OLC 4c\n  visible_pieces: \"54104150000000000000\"\n- preset_name: PLC 2c\n  visible_pieces: 014714080a5010004000\n- preset_name: PLC cross\n  visible_pieces: \"01479e20000000000000\"\n- preset_name: PLC F2L\n  visible_pieces: 01efff70000000000000\n- preset_name: PLC\n  visible_pieces: ffffff70000000000000\n- preset_name: End\n  visible_pieces: ffffffffffffffffffff\n</code></pre> <pre><code>- preset_name: 4-cross\n  visible_pieces: 000200080a5010284280\n- preset_name: odM\n  visible_pieces: 000200094a5014294280\n- preset_name: ouM\n  visible_pieces: 000200094a5294294294\n- preset_name: OLES\n  visible_pieces: 000200094a5294296294\n- preset_name: oLS\n  visible_pieces: 0002000d4a5a943962d4\n- preset_name: triplet 1\n  visible_pieces: 0002000d6a7ad43962d4\n- preset_name: triplet 2\n  visible_pieces: 0002000d6a7ad4b963d6\n- preset_name: triplet 3\n  visible_pieces: 0002008d6b7bd4b963d6\n- preset_name: triplet 4\n  visible_pieces: 0002008d6b7bd6bd6bd6\n- preset_name: ORES\n  visible_pieces: 0002008d6b7bd6bdebd6\n- preset_name: oRS\n  visible_pieces: 0002008d7b7bf6fdebd7\n- preset_name: triplet 5\n  visible_pieces: 0002008dfbfbf7fdebd7\n- preset_name: triplet 6\n  visible_pieces: 0002008dfbfbf7ffefdf\n- preset_name: triplet 7\n  visible_pieces: 0002008ffffff7ffefdf\n- preset_name: triplet 8\n  visible_pieces: 0002008fffffffffffff\n- preset_name: OLC 2c\n  visible_pieces: \"01471400000000000000\"\n- preset_name: OLC 3c\n  visible_pieces: aaa8aa20000000000000\n- preset_name: OLC 4c\n  visible_pieces: \"54104150000000000000\"\n- preset_name: PLC 2c\n  visible_pieces: 014714080a5010004000\n- preset_name: PLC cross\n  visible_pieces: \"01479e20000000000000\"\n- preset_name: PLC F2L\n  visible_pieces: 01efff70000000000000\n- preset_name: PLC\n  visible_pieces: ffffff70000000000000\n- preset_name: End\n  visible_pieces: ffffffffffffffffffff\n</code></pre>"},{"location":"methods/3x3x3x3/3block/#summary","title":"Summary","text":"<ol> <li>4-Cross \u2014 Solve 4 out of the 6 cross pieces</li> <li>Middle Block \u2014 Solve 4 2c3c pairs betwen the 4 cross pieces</li> <li>Left Block \u2014 Blockbuild or pair pieces to solve the Left Cell</li> <li>Right Block \u2014 Blockbuild or pair pieces to solve the Right Cell</li> <li>OLL-4 - Orient LC 2c, 3c, and 4c pieces using 3D algorithms</li> <li>PLL-4 - Permute LC 2c, 3c, and 4c pieces using 3D techniques</li> </ol>"},{"location":"methods/3x3x3x3/3block/#steps","title":"Steps","text":""},{"location":"methods/3x3x3x3/3block/#4-cross","title":"4-Cross","text":"<p>Solve the four 2c cross pieces in a ring in the M slice. Leave the L and R cross pieces unsolved.</p> <p></p>"},{"location":"methods/3x3x3x3/3block/#middle-block","title":"Middle Block","text":"<p>Tip</p> <p>For the entirety of F2L, the last layer is held on the I cell, as opposed to CFOP where it is held on the U cell. This allows us to see more information at once.</p> <p>Create and insert 4 F2L-a (2c3c) pairs into the 4/6 cross. This will solve 2/3 of the M slice. Because the Left and Right cells don\u2019t have their cross pieces, you can use them to aid with building and inserting the pairs.</p> <p></p>"},{"location":"methods/3x3x3x3/3block/#left-block","title":"Left Block","text":"<p>Solve the Left cell. This is done in 3 blocks, hence the name of the method. The first block consists of the cross edge, followed by two 2c3c F2L-a pairs that are opposite of each other. This solves the middle column of the left cell. The final two blocks consist of a 2c3c pair, and two 3c4c pairs.</p> <p></p>"},{"location":"methods/3x3x3x3/3block/#right-block","title":"Right Block","text":"<p>Solve the Right cell. This is also done by breaking it up into the 3 blocks, except now you don\u2019t have an empty opposite cell to aid you in making pairs. You could just solve the cross edge, and then finish the whole solve using CFOP style F2L and Last Cell. You can also do it the 3 blocks way, except having less freedom means that it is slightly trickier to set up the correct cases.</p> <p></p>"},{"location":"methods/3x3x3x3/3block/#last-layer","title":"Last Layer","text":"<p>This is done in the exact same way as CFOP.</p>"},{"location":"methods/3x3x3x3/3block/#big-cubes","title":"Big cubes","text":"<p>Solve all the centers, then pair up only the pieces you need during the step of 3-block you\u2019re on. For example: after solving centers, pair up 4 cross ridges. For last cell, you can either just orient everything, and then do an RKT 4<sup>4</sup> solve, or you can pair everything and end up with an RKT 3<sup>3</sup> solve.</p>"},{"location":"methods/3x3x3x3/cfop/","title":"CFOP","text":"<p>3D CFOP can be easily implemented on the 4D Rubik\u2019s Cube. This method was also called Sheerin-Zhao Method (Hybrid) V1, named after the people who discovered its higher dimensional equivalence.</p> <p>Prerequisites</p> <ul> <li>Knowledge of how the 4D puzzle moves</li> <li>Notation</li> <li>RKT</li> <li>3D CFOP with 2-look OLL &amp; PLL</li> </ul>"},{"location":"methods/3x3x3x3/cfop/#summary","title":"Summary","text":"<ol> <li>Cross \u2014 Build a cross by solving six 2c pieces on the O or D cell</li> <li>F2L-a \u2014 Join 12 2c+3c pairs together and insert them into the first two layers</li> <li>F2L-b \u2014 Join 8 3c+4c pairs together and insert them into the first two layers</li> <li>OLL-4 \u2014 Orient LC 2c, 3c, and 4c pieces using 3D EOLL and OCLL</li> <li>PLL-4 \u2014 Permute 2c pieces of the LL using EPLL, then solve the rest like a 3<sup>3</sup></li> </ol>"},{"location":"methods/3x3x3x3/cfop/#steps","title":"Steps","text":""},{"location":"methods/3x3x3x3/cfop/#cross","title":"Cross","text":"<p>Using the same techniques from 3D, intuitively place the cross 2c pieces such that they lie between their centers, correctly oriented. After this step, the cross should be kept on the D layer.</p>"},{"location":"methods/3x3x3x3/cfop/#f2l-a","title":"F2L-a","text":"<p>Find a pair of 2C and 3C pieces. Find a way to bring them onto the P slice using easy intuitve setups. Now, you should be able to pair them up using \u201cnormal\u201d looking 3x3x3 moves.</p> <p>Repeat this until you have solved all 12 2c3c pairs of F2L-a.</p> <p>Misoriented pairs</p> <p>It is possible to insert a pair into its slot, but rotated in place. Make sure to line it up so that it looks like a normal 3x3x3 case before inserting the pair. Oftentimes, this just means doing a Ux2 or Uz2 move beforehand.</p>"},{"location":"methods/3x3x3x3/cfop/#f2l-b","title":"F2L-b","text":"<p>Find any 3C piece that doesn\u2019t have a U cell colour. Find its respective 4C piece.</p> <ul> <li>If they both have the same coloured sticker on the U cell, use RKT on the U cell to pair them up.</li> <li>If the 4C is stuck in a slot in the D cell, bring the edge over the slot such that its colour on the I cell matches the 4C\u2019s colour on the I cell. Then use RKT to pair them up.</li> <li>If the 3C is stuck in a slot in the middle layer, bring the 4C on top of it until its colour on the I cell matches the 3C\u2019s colour on the I cell. Then use RKT to pair them up.</li> <li>If none of the above cases occured, then you kind of just have to fiddle around with it or pick a different pair to solve.</li> </ul> <p>Repeat for all 8 3c4c pairs of F2L-b.</p>"},{"location":"methods/3x3x3x3/cfop/#oll-4","title":"OLL-4","text":""},{"location":"methods/3x3x3x3/cfop/#2c-oll-4","title":"2c OLL-4","text":"<p>Use EOLL algorithms from 2-look OLL to orient the 2C pieces. This can always be done in 2 EOLL algorithms (or less).</p>"},{"location":"methods/3x3x3x3/cfop/#3c-oll-4","title":"3c OLL-4","text":"<p>Use RKT on the last cell to set up the slice layers of the last cell into configurations that look like possible OCLL cases. Then use the OCLL algorithms to solve that case. This can always be done in 3 OCLL algorithms (or less)</p> <p>3c monotwist</p> <p>It\u2019s possible to have just 1 3c piece twisted in place. To avoid this, make sure that your last OCLL algorithm will solve all of the 3c pieces. For example if you have 5 left, you can\u2019t set it up into an H OCLL case, because that will solve 4/5, leaving you with 1 left. Instead, you can set it up into a Sune case, which would then leave you with 2 (which you can solve using a T or U case OCLL algorithm).</p>"},{"location":"methods/3x3x3x3/cfop/#4c-oll-4","title":"4c OLL-4","text":"<p>Use RKT on the last cell to set up the 4c pieces into possible OCLL cases. Rotate the last cell to U, such that your OCLL case is in the IU plane, then execute that algorithm with RKT on I.</p> <p>4c monoflip</p> <p>It\u2019s possible to have just 1 4c piece flipped in place. To avoid this, make sure that your last OCLL algorithm will solve all of the 4c pieces. For example if you have 5 left, you can\u2019t set it up into an H OCLL case, because that will solve 4/5, leaving you with 1 left. Instead, you can set it up into a Sune case, which would then leave you with 2 (which you can solve using a T or U case OCLL algorithm).</p>"},{"location":"methods/3x3x3x3/cfop/#pll-4","title":"PLL-4","text":""},{"location":"methods/3x3x3x3/cfop/#2c-pll-4","title":"2c PLL-4","text":"<p>It is always possible to solve 2c permutation using just U-perms, but many cases have faster methods. There are seven cases for 2c PLL-4:</p> <ul> <li>Solved</li> <li>Adjacent swap - Do a 90-degree twist of I to turn this case into a 3-cycle, then use a 3D U-perm algorithm to solve it, such as <code>M2 U M U2 M' U M2</code> (7 STM) to cycle IL \u2192 IF \u2192 IR.</li> <li>Opposite swap - Do a 90-degree twist of I to turn this case into a pair of adjacent swaps, then use a 3D Z-perm algorithm to solve it, such as <code>M2 U M2 U M' U2 M2 U2 M'</code> (9 STM) to swap IF \u2194 IR and IB \u2194 IL.</li> <li>Adjacent 3-cycle (clockwise) - Use <code>[[RD, ID], {1-2}LO]</code> = <code>(RD ID RU IU) RO (IF RF IB RB) (RI)</code> (9 STM + 1 move RKT debt) to cycle IF \u2192 IU \u2192 IR.</li> <li>Adjacent 3-cycle (counterclockwise) - Use <code>[[RF, IF], {1-2}LI]</code> = <code>(RF IF RB IB) RI (ID RD IU RU) (RO)</code> (9 STM + 1 move RKT debt) to cycle IR \u2192 IU \u2192 IF.</li> <li>Double adjacent swap (right-handed) - Use <code>[[RU, IU] IR2 RU, IDR]</code> = <code>(RU IU RD IFR RU) IDR (RD IFR RU ID RD) (IUR)</code> (11 STM + 1 move offset) to swap IF \u2194 IU and IR \u2194 IB.</li> <li>Double adjacent swap (left-handed) - Use <code>[[RU, IU] IR2 RU, IUR]</code> = <code>(RU IU RD IFR RU) IUR (RD IFR RU ID RD) (IDR)</code> (11 STM + 1 move offset) to swap IF \u2194 ID and IR \u2194 IB.</li> </ul> <p>This is currently no known reliable way to recognize which case you have.</p>"},{"location":"methods/3x3x3x3/cfop/#pll-3","title":"PLL-3","text":"<p>From here, you use RKT to solve the rest of the puzzle like a whole 3<sup>3</sup>. The CFOP method is recommended for this because you arrive at this step inspectionless, meaning that in a speedsolve, you don\u2019t really have the time to count Edge Orientation, or plan a Roux First Block. Finding 4 cross pieces is pretty easy inspectionless.</p> <p>RKT parity</p> <p>If the \u201ctop face\u201d of the LL is 180 degrees off from the rest of the puzzle, you have to use a special 4D algorithm to correct this. See RKT for algorithms.</p> <p>RKT parity avoidance</p> <p>You can avoid RKT parity by using 2-look PLL. When you get to PLL, correct any RKT debt you have. Then put the solved LL corner in the UIFR spot. Now you can do whichever A-perm you have (clockwise or anticlockwise). Finally, just solve the 3c with EPLL algorithms.</p>"},{"location":"methods/3x3x3x3/octachoroux/","title":"Octachoroux","text":"<p>Octachoroux</p> <ul> <li><code>Algorithms:</code> 3D Roux + RKT Parity</li> <li><code>Move count:</code> way too many</li> </ul> <p>This method is Rowan Fortier\u2019s attempt to bring the Roux method to the 3x3x3x3.</p>"},{"location":"methods/3x3x3x3/octachoroux/#summary","title":"Summary","text":"<ol> <li><code>1st Block</code> \u2014 Solve a 1x2x3x3 block using blockbuilding techniques.</li> <li><code>2nd Block</code> \u2014 Solve a 1x2x3x3 block on the other side of the puzzle.</li> <li><code>CMLC</code> \u2014 Orient and permute the corners of the U cell.</li> <li><code>L/R</code> \u2014 Solve the Left and Right cells.</li> <li><code>M slice</code> - Permute the M slice.</li> </ol>"},{"location":"methods/3x3x3x3/octachoroux/#steps","title":"Steps","text":""},{"location":"methods/3x3x3x3/octachoroux/#1st-block","title":"1st Block","text":"<p>Start with the \u201ccross piece\u201d of the 1st block. Then build four 2c3c and four 3c4c pairs around it, to complete the 1x2x3x3 block. No RKT is needed for this, as none of the other pieces have been solved yet.</p>"},{"location":"methods/3x3x3x3/octachoroux/#2nd-block","title":"2nd Block","text":"<p>Use the free M slice to help you build the pairs to make the 2nd 1x2x3x3 block on the opposite side of the puzzle from the 1st block.</p>"},{"location":"methods/3x3x3x3/octachoroux/#cmlc","title":"CMLC","text":"<p>Use the same strategies from CFOP, but only for the 4C pieces. This step feels like solving the last cell of a 2<sup>4</sup>, except you have to use 3<sup>4</sup> algorithms so that you don\u2019t mess up other pieces.</p>"},{"location":"methods/3x3x3x3/octachoroux/#lr","title":"L/R","text":"<p>Insert the UR and UL 2c pieces using setup moves and EPLL algorithms. Now set up the 3c pieces that need to go to L/R into the IDF spot with the L/R colour on the I cell and the U colour on the D cell. Then move the spot where that L/R edge needs to go above that edge and insert that piece using the RKT algorithm of M D2 M\u2019 D2 (2RO\u2019 IF\u2019 RO2 IF 2RO IF\u2019 RO2 IF). Repeat this for all of the edges (pretty tedious).</p>"},{"location":"methods/3x3x3x3/octachoroux/#m-slice","title":"M slice","text":"<p>Now all that\u2019s left to be solve is the M slice of the puzzle. Notice how the M slice is more like a 3<sup>3</sup> than the PLC of CFOP. The centers are already permuted too! However, this step is much more painful than normal RKT PLC due to the strange parities that can happen.</p> <p>tricky situations</p> <ul> <li>A 3c piece can look \u201cmirrored\u201d in place.</li> <li>A single 3c piece can be rotated wrong.</li> </ul>"},{"location":"no/","title":"No","text":""},{"location":"no/#_1","title":"No","text":"<p> NO </p>"},{"location":"puzzles/","title":"Puzzles","text":"<p>In hypercubing, we generalize the notion of a twisty puzzle beyond 3D space. The best introduction to hypercubing is the standard 3x3x3x3 4D Rubik\u2019s cube.</p> <p>See the navigation sidebar for a list of puzzles that have wiki pages.</p>"},{"location":"puzzles/2x2x2x2/","title":"2x2x2x2","text":"<p>2x2x2x2</p> <p></p> <p>Shape: Tesseract</p> <p>Pieces: 16</p>"},{"location":"puzzles/2x2x2x2/#history","title":"History","text":"<p>The 2x2x2x2 (normally referred to as the 2<sup>4</sup>) is a 4-dimensional twisty puzzle in the shape of a hypercube that is cut in half on each of the 4 axes.</p> <p>The first official 2<sup>4</sup> solve on the Hall of Fame was done by Jay Berkenbilt in 2004 using MC4D, although it was probably solved several times before that.</p>"},{"location":"puzzles/2x2x2x2/#permutations","title":"Permutations","text":"<p>The 16 4cs of the 2x2x2x2 can be placed in any even permutation. In order to identify positions that are a whole-puzzle rotation apart from each other, we fix one 4c, leaving 15 4cs that can be permuted. Each 4c can be placed in \\(\\frac{4!}{2}\\) orientations, except the last, which can be placed in only \\(4\\) orientations. Thus, the number of permutations of the puzzle is \\(\\frac{15!}{2} \\cdot \\left(\\frac{4!}{2}\\right)^{14} \\cdot 4 \\approx 3.36 \\cdot 10^{27}.\\)</p>"},{"location":"puzzles/2x2x2x2/#physical-version","title":"Physical version","text":"<p>Since 2013, Melinda Green has been refining her physical 2x2x2x2. See her project home page for more details.</p>"},{"location":"puzzles/2x2x2x2/#see-also","title":"See also","text":"<ul> <li>Leaderboard section for 2x2x2x2</li> </ul>"},{"location":"puzzles/3x3x3/","title":"3x3x3","text":"<p>There\u2019s not much we can say about the traditional Rubik\u2019s cube that hasn\u2019t already been said on Wikipedia or the Speedsolving.com Wiki.</p>"},{"location":"puzzles/3x3x3/#333-with-1d-vision","title":"3x3x3 with 1D vision","text":"<p>What if you were a 2D being trying to solve a 3D Rubik\u2019s Cube? This is directly analagous to us 3D beings trying to solve a 4D cube, and MagicCube3D has a setting to view the 3x3x3 with 1D vision. The first known solver was Markk in December 2022.</p>"},{"location":"puzzles/3x3x3x3/","title":"3x3x3x3","text":"<p>3x3x3x3</p> <p></p> <p>Shape: Tesseract</p> <p>Pieces: 8 1c, 24 2c, 32 3c, 16 4c</p> <p>The 3x3x3x3 (normally referred to as the 3<sup>4</sup>) is a 4-dimensional twisty puzzle in the shape of a hypercube that has 2 cuts along each of the 4 axes. It is a direct higher dimensional analogy of the 3x3x3 Rubik\u2019s Cube.</p> <p>The 3<sup>4</sup> is recommended as one\u2019s first introduction to solving higher dimensional puzzles.</p>"},{"location":"puzzles/3x3x3x3/#pieces","title":"Pieces","text":"<p>The 3<sup>4</sup> has 81 hypercubies, of which 72 are movable. It has 8 1c, 24 2c, 32 3c, and 16 4c pieces. The 3c pieces can be rotated in 6 different ways, and the 4c pieces in 12 different ways.</p>"},{"location":"puzzles/3x3x3x3/#turning","title":"Turning","text":"<p>Each turn of the 3<sup>4</sup> is a rotation of one of its cubic cells (which can be oriented in any of 24 orientations of a cube). A normal move disturbs 8 4c, 12 3c, and 4 2c pieces.</p>"},{"location":"puzzles/3x3x3x3/#history","title":"History","text":"<p>The 3<sup>4</sup> has always been the main focus of the community. The first solve was done by Don Hatch in ~1988 using MC4D. After that, the Hall of Fame gradually began to increase in size. It eventually closed on December 7th, 2022 due to it reaching 500 solvers.</p>"},{"location":"puzzles/3x3x3x3/#permutations","title":"Permutations","text":"<p>The 16 4cs of the 3x3x3x3 can be placed in any even permutation. Each 4c can be placed in \\(\\frac{4!}{2}\\) orientations, except the last, which can be placed in only \\(4\\) orientations. The 32 3cs can be in any permutation, and can have \\(3!\\) orientations, except the last, which can only have \\(3\\). The 24 2cs can be in any permutation, and can have \\(2!\\) orientations, except the last, which is determined by the others. However, the permutation parity of the 2cs and 3cs are linked. Thus, the number of permutations of the puzzle is \\(\\left[\\frac{16!}{2} \\cdot \\left(\\frac{4!}{2}\\right)^{15} \\cdot 4\\right] \\cdot \\left[32! \\cdot 3!^{31} \\cdot 3\\right] \\cdot \\left[\\frac{24!}{2} \\cdot 2!^{23}\\right] \\approx 1.76 \\cdot 10^{120}.\\)</p>"},{"location":"puzzles/3x3x3x3/#speedsolving","title":"Speedsolving","text":"<p>(See the leaderboards for the current records)</p> <p>There were a few hypercube speedsolving competitions during the early days of hypercubing, with the controversy at the time being if they were to allow macros or not. One of the first competitions happened in 2010, with the fastest time being 15:57 by Mateusz Burnicki (using prepared macros) Some contestants recieved a t-shirt with an image of the 3<sup>4</sup> in MC4D on it.</p> <p>In mid 2017, The speedsolving scene was single handedly revived by Tetrian22, lowering his best from 37:07 to 10:11 in just under 10 months.</p> <p>Starting in November 2022, a 3<sup>4</sup> speedsolving frenzy began due to the popularity of the recently created Hyperspeedcube program, and its keyboard controls. The record bounced between Hactar and Grant as it smashed through all the barriers, finally lowering to sub-2 minutes in May 2023.</p>"},{"location":"puzzles/3x3x3x3x3/","title":"3x3x3x3x3","text":"<p>3x3x3x3x3</p> <p></p> <p>Shape: Penteract</p> <p>Pieces: 10 1c, 40 2c, 80 3c, 80 4c, 32 5c</p> <p>The 3x3x3x3x3 or 3<sup>5</sup> is a 5-dimensional twisty puzzle in the shape of a penteract that has 2 cuts along each of the 5 axes. The 3<sup>5</sup> is recommended as one\u2019s first introduction to solving 5D puzzles.</p>"},{"location":"puzzles/3x3x3x3x3/#pieces","title":"Pieces","text":"<p>The 3<sup>5</sup> has 243 hypercubies, of which 232 are movable. It has 10 1c, 40 2c, 80 3c, 80 4c, and 32 5c pieces. 1cs are called centers, 2cs ridges, 3cs peaks, 4cs edges, and 5cs corners.</p>"},{"location":"puzzles/3x3x3x3x3/#turning","title":"Turning","text":"<p>Each turn of the 3<sup>5</sup> is a rotation of one of its hypercube cells. A hypercube can be reoriented in 192 different ways; a lot of ways just to turn a single side! However in most programs, only some of these moves are able to be done with 2 clicks.</p>"},{"location":"puzzles/3x3x3x3x3/#programs","title":"Programs","text":"<p>There are 3 programs that currently have implementations of the 3<sup>5</sup>: MPU, MC5D, and MC7D. When HSC2 releases, it will be the 3<sup>5</sup> program of choice with its amazing piece filters and keybind settings. Until then, the 3 programs all come with their different pros and cons.</p>"},{"location":"puzzles/3x3x3x3x3/#mpu","title":"MPU","text":"<p>3<sup>5</sup> in MPU</p> <p></p> <p>Magic Puzzle Ultimate objectively has the nicest view of the 3<sup>5</sup> out of all the programs. The projection is as symmetrical as possible, treating all dimensions equally. It lacks piece filters such that you can only toggle all pieces with a certain number of colours on or off, which makes finding pieces extremely time consuming. To turn the sides you have to click on 3 different 5c pieces.</p>"},{"location":"puzzles/3x3x3x3x3/#mc5d","title":"MC5D","text":"<p>3<sup>5</sup> in MC5D</p> <p></p> <p>This program was designed specifically for 5D puzzles. The pros are that it has a feature to locate a certain piece, as well as an extensive macro system. However, the puzzle is projected in an interesting way that uses the 4D inside to outside projection twice. This makes many of the stickers overlap. Additionally it uses Euler angles for rotation, meaning that sometimes you get stuck at the poles when reorienting the puzzle with the mouse. There are some buttons in the bottom-right of the UI to rotate the puzzle to make up for this.</p>"},{"location":"puzzles/3x3x3x3x3/#mc7d","title":"MC7D","text":"<p>3<sup>5</sup> in MC7D</p> <p></p> <p>Magic Cube 7D was made by Andrey Astrelin, and has a different way of projecting higher dimensions. The dimensions higher than 4 are represented with stickers that are smaller than the others. Many of them are also duplicates of each other because they are attached to the other stickers of that piece. While not being the nicest to look at, it does have very useable piece filters and nice 2-click controls, making it a prime candidate to use for one\u2019s first 3<sup>5</sup> solve.</p>"},{"location":"puzzles/3x3x3x3x3/#permutations","title":"Permutations","text":"<p>The 32 5cs of the 3x3x3x3x3 can be placed in any even permutation, and each 5c can be placed in \\(\\frac{5!}{2}\\) orientations, including the last one. The 80 4cs can be in any even permutation, and can each have \\(4!\\) orientations, except the last which can only have \\(\\frac{4!}{2}\\) orientations. The 80 3cs can be in any permutation, and can each have \\(3!\\) orientations, except the last which can only have \\(\\frac{3!}{2}\\) orientations. Finally, the 40 2cs can be in any permutation with the same parity as that of the 3cs, and each one can have 2 orientations, except the last, whose orientation is determined by the rest of the 2cs.<sup>1</sup> Thus, the number of permutations of the puzzle is \\(\\left[\\frac{32!}{2} \\cdot \\left(\\frac{5!}{2}\\right)^{32}\\right] \\cdot \\left[\\frac{80!}{2} \\cdot \\frac{4!^{80}}{2}\\right] \\cdot \\left[80! \\cdot \\frac{3!^{80}}{2}\\right] \\cdot \\left[\\frac{40!}{2} \\cdot 2^{39}\\right] \\approx 7.02 \\cdot 10^{560}.\\)</p>"},{"location":"puzzles/3x3x3x3x3/#speedsolving","title":"Speedsolving","text":"<p>(See the leaderboards for the current records)</p> <p>A full solve of the 3<sup>5</sup> had not even been recorded until 2024-03-21 with Rowan Fortier\u2019s first solve, uploading all 15 hours of footage to YouTube. Sadly this did not count as the first speedsolve because it was done over multiple days in different sessions. But a few days later, Luna managed to do it in one sitting, achieving a time of 3h 39m, automatically getting the first world record.</p> <ol> <li> <p>http://www.gravitation3d.com/magiccube5d/permutations.html \u21a9</p> </li> </ol>"},{"location":"puzzles/4d-skewb/","title":"4D Skewb","text":"<p>There are many puzzles that could be called a \u20184D skewb\u2019. Each one has some characteristics similar to the skewb. By constructing the skewb in a certain way, and replacing 3D objects of the definition with similar 4D objects, you can construct a 4D puzzle that has some things in common with the skewb.</p>"},{"location":"puzzles/4d-skewb/#cube-like","title":"Cube-like","text":""},{"location":"puzzles/4d-skewb/#vertex-turning-hypercube","title":"Vertex turning hypercube","text":"<p>Vertex turning hypercube</p> <p></p> <p>The skewb is a vertex-turning cube with the cuts passing through the origin. If you replace the 3D cube in the definition with the 4D hypercube, you get the half-cut vertex-turning hypercube. This puzzle has 32 edge pieces, 64 X-centers, and 8 center pieces. Both the X-centers and the centers are 1c pieces. </p> <p>In three dimensions, a plane perpendicular to the vertex axis passes through 1 corner, then 3, then 3, then 1 corner. This causes a plane passing through the origin to go between the two layers of 3 corners, which is why the skewb has corners. In four dimensions, a hyperplane perpendicular to the vertex axis passes through 1, 4, 6, 4, then 1 corner. Therefore, a hyperplane passing through the origin passes directly through 6 vertices, and there are no corner pieces on this 4D puzzle. Similarly, the pattern of cuts on one cell of the puzzle looks like a dino cube, not a skewb.</p>"},{"location":"puzzles/4d-skewb/#skewb-lookalike","title":"Skewb lookalike","text":"<p>Skewb lookalike</p> <p></p> <p>You can place a cut to pass between the layers of 4 and 6 corners. If you do this, you get two cuts per axis and three layers per axis. This puzzle has 16 vertex pieces, 64 X-centers, and 24 ridge pieces. Like the skewb, the vertex pieces are separated into two orbits, but this puzzle has a middle layer on each axis. The cut pattern on the cells of this puzzle resembles a 3D skewb with additional trivial tips. </p> <p>By rectifying the hypercube, the trivial tip cuts on the cut patterns of the cells are removed, meaning the cells look like cuboctahedral skewbs.</p>"},{"location":"puzzles/4d-skewb/#demi-vertex-turning-hypercube","title":"Demi vertex turning hypercube","text":"<p>Demi vertex turning hypercube</p> <p></p> <p>On the cube, the vertices can be separated into two tetrahedral subsets (the orbits of the skewb\u2019s corners). Each cut corresponds to one corner in the tetrahedron. On the hypercube, a similar partitioning of the vertices results in two sets of 8, each at the vertices of the 16-cell, or dually, the facets of a differently-oriented hypercube. If you only cut along vertex axes corresponding to these cuts, you will get a puzzle with only 4 cuts, half as many as the vertex turning hypercube. This puzzle has 8 corners and 8 centers. Unlike on the skewb, only half of the vertices of the hypercube have a corner piece, and all the corner pieces are in one orbit.</p>"},{"location":"puzzles/4d-skewb/#demi-skewb-lookalike","title":"Demi skewb lookalike","text":"<p>Demi skewb lookalike</p> <p></p> <p>If you only use the axes along half the vertices as above, but you use the cut depths of the skewb lookalike, it results in a puzzle that still has three layers per axis, but only half as many axes. The cut pattern on the cells of this puzzle also resembles a 3D skewb, but with only 4 trivial tips per cell. The puzzle has 8 corner pieces, 8 dual corner pieces of a different shape, 32 X-centers, and 24 ridge pieces.</p> <p>As before, the hypercube can be rectified, which removes the trivial tips from the cut patterns of the cells.</p> <p></p> Extra turns <p>In the two demi puzzles, the 8 vertices are arranged like the cells of a hypercube. This means they are actually shapemods of hypercubic puzzles. As such, they have an additional shapeshifting move in which you turn one layer by 90\u00b0. There is no analogous move on the skewb. In particular, the demi vertex turning hypercube is a shapemod of a 2x2x2x2, and the demi skewb lookalike is a shapemod of a 3x3x3x3, but with the 8 corner pieces that would be at the center of the cells missing.</p> <p>Because the 16-cell axis system, or the vertex turning hypercube system, is composed of two disjoint hypercube axis systems, these puzzles also have additional shapeshifting moves in which you turn a layer 90\u00b0. Unlike those in the previous section, though, performing one of these turns would bandage the puzzle. If you unbandaged these puzzles, you would get additional cuts parallel to the cells, resulting in the axis system of a 24-cell.</p>"},{"location":"puzzles/4d-skewb/#simplex-like","title":"Simplex-like","text":"<p>The skewb can be constructed in a different way: take four axes corresponding to a tetrahedron, and cut perpendicular to each axis through the origin. The tetrahedron is the 3D simplex, so if you replace it with the 5-cell, the 4D simplex, you get a new puzzle in 4D. This puzzle has several types of pieces, but since the shape of the puzzle does not yet exist, we can\u2019t name them after their position. Thus, we will name the pieces by how many layers they are turned by. For the skewb, there are 4 pieces that are in one layer, 6 pieces that are in two layers, and 4 pieces that are in three layers. We will call these 1g, 2g, and 3g pieces. This 4D puzzle will have 5 1g pieces, 10 2g pieces, 10 3g pieces, and 5 4g pieces. The skewb has a symmetry (90\u00b0 rotation of the puzzle) that swaps 1g and 3g pieces and sends 2g to 2g pieces, and like it, this 4D puzzle has a symmetry that swaps 1g and 4g pieces and swaps 2g and 3g pieces. Like the skewb, the cuts on this puzzle can each be offset in a consistent direction while preserving the functionality of the puzzle.</p> <p>Constructing the skewb like this, we can describe how to construct its cubic shape. On each face of the cube, there is one 2g piece in its center. Thus, given our abstractly constructed skewb, we can construct a plane perpendicular to each 2g piece\u2019s axis of symmetry. The shape bounded by all 6 of these planes is a cube.</p>"},{"location":"puzzles/4d-skewb/#2g-carved-simplex","title":"2g carved simplex","text":"<p>2g carved simplex</p> <p></p> <p>Like in 3D, you can put a hyperplane perpendicular to the symmetry axis of each 2g piece. Since there are 10 2g pieces, this creates a polychoron with 10 triangular-bipyramidal cells called the joined 5-cell. On this puzzle, the 1g pieces are 4c at the tetrahedral vertices, the 2g pieces are 1c at the cell centers, the 3g pieces are 3c at the triangular edges, and the 4g pieces are 6c at the triangular-bipyramidal vertices. Unlike on the skewb, where the 1g and 3g pieces look alike, here, the 1g and 4g pieces are distinguishable by their number of colors, and so are the 2g and 3g pieces.</p>"},{"location":"puzzles/4d-skewb/#2g-3g-carved-simplex","title":"2g-3g carved simplex","text":"<p>2g-3g carved simplex</p> <p></p> <p>You can also put hyperplanes perpendicular to the symmetry axis of both the 2g and 3g pieces. This gives the puzzle a 20-celled shape called the bijungato-10-cell. On this puzzle, the 1g and 4g pieces are both 4c at tetrahedral vertices, and the 2g and 3g pieces are both 1c at the cell centers. Unlike the previous shape but like the skewb, full symmetry of the puzzle is reflected in the shape.</p> <p>Each cell of the puzzle either has two 1g and one 2g pieces, or two 4g and one 3g pieces. These two orbits of cells are only adjacent across the 2g-3g boundary. Because of this, this puzzle has multiple solved states, where each cell is a solid color, but the color schemes of the two orbits are rotated relative to each other.</p>"},{"location":"puzzles/4d-skewb/#2g-3g-carved-simplex-hemi-colors","title":"2g-3g carved simplex, hemi colors","text":"<p>The puzzle can be recolored with 10 colors by giving opposite cells the same color. By asserting that the solved state has to have the two same-colored cells opposite to each other, it restricts the relative orientations of the two orbits to only one configuration, leading to there being only one solved state. Because of the geometry of the puzzle, a 1g-2g cell is opposite a 4g-3g cell, so the pieces on these cells are not swappable and coloring these two cells the same color leads to no ambiguity in the position.</p>"},{"location":"puzzles/4d-skewb/#2g-3g-ridge-carved-simplex","title":"2g-3g ridge carved simplex","text":"<p>2g-3g ridge carved simplex</p> <p></p> <p>There are 30 square ridges between the 2g and 3g pieces. By constructing a shape bounded by the hyperplanes perpendicular to the symmetry axes of these ridges, you get a 30-cell shape with disphenoidal cells called the bi-10-cell. The 1g and 4g pieces are 12c at triakis-tetrahedral vertices, and the 2g and 3g pieces are 3c at triangular ridges. This shape of the puzzle also reflects the symmetry that swaps 1g and 4g and swaps 2g and 3g.</p>"},{"location":"puzzles/4d-skewb/#prism","title":"Prism","text":"<p>Prism</p> <p></p> <p>By starting with a skewb, you can extend it into the fourth dimension by taking the cartesian product of it with a line segment. This extends the cube to a cubic prism, and the skewb cut planes to hyperplanes all perpendicular to the original cube. This creates a skewb prism, which has exactly the same pieces as the skewb but with shapes that are the prisms of the originals. It allows all the moves of the skewb, and an additional set of moves that involve flipping the new dimension, which appear as reflection moves on the original skewb. By adding more cuts parallel to the original skewb, you can create multi-layer skewb prisms.</p>"},{"location":"puzzles/4d-skewb/#24-cell-like","title":"24-cell-like","text":""},{"location":"puzzles/4d-skewb/#24-cell-skewb-diamond-lookalike","title":"24-cell skewb diamond lookalike","text":"<p>24-cell skewb diamond lookalike</p> <p></p> <p>The 24-cell\u2019s cells are octahedra, which have the same symmetry as the skewb, and its dual the skewb diamond. Construct cutting planes parallel to the cells which pass through the centers of the adjacent cells. This creates a puzzle with 24 vertex pieces, 96 ridge pieces, and 144 X-centers. This puzzle is not half-cut, but each cell\u2019s cut pattern looks like a skewb diamond with trivial tips. It is possible to apply RKT to a cell of this puzzle, in which case it acts like a skewb diamond.</p> <p>By rectifying the 24-cell, the trivial tip cuts on the cut patterns of the cells are removed, meaning the cells look like cuboctahedral skewbs.</p>"},{"location":"puzzles/4d-skewb/#24-cell-skewb-diamond-lookalike-16-cell-cuts","title":"24-cell skewb diamond lookalike, 16-cell cuts","text":"<p>24-cell skewb diamond lookalike, 16-cell cuts</p> <p></p> <p>The 24-cell has a subset of cells that correspond to the cells of the 16-cell. If you only keep those cuts, you get a puzzle similar to the one above, but where 8 of the cells no longer appear to have trivial tips in their cut patterns. This puzzle has 16 large corner pieces, 8 small corner pieces, 96 ridge pieces, and 144 X-centers. Like before, RKT can be applied.</p> <p> </p>"},{"location":"puzzles/4d-skewb/#24-cell-skewb-diamond-lookalike-8-cell-cuts","title":"24-cell skewb diamond lookalike, 8-cell cuts","text":"<p>24-cell skewb diamond lookalike, 8-cell cuts</p> <p></p> <p>The 24-cell also has a subset of cells that correspond to the cells of the 8-cell, or hypercube. If you only keep those cuts, you get another puzzle similar to the one above, but where 16 of the cells do not appear to have trivial tips in their cut patterns, and 8 of the cells appear to have only the trivial tip cuts. This puzzle has 8 large corner pieces, 16 small corner pieces, 32 ridge pieces, and 8 center pieces. Unlike before, RKT cannot be applied to the skewb diamond cells. This puzzle is a shapemod of the 3x3x3x3 without corner pieces.</p>"},{"location":"puzzles/hemimegaminx/","title":"Hemimegaminx","text":"<p>Hemimegaminx</p> <p></p> <p>Shape: Hemi-dodecahedron</p> <p>Pieces: 6 1c, 15 2c, 10 3c</p> <p>The hemimegaminx is a twisty puzzle in the shape of a hemi-dodecahedron. In MagicTile, it inhabits the projective plane.</p> <p>The puzzle can be constructed by identifying opposite faces on a megaminx. On this realization of the puzzle, opposite faces will turn in opposite directions. In order to be a true hemimegaminx, opposite faces should also be colored the same, so the puzzle will have 6 colors total.</p>"},{"location":"puzzles/hemimegaminx/#permutations","title":"Permutations","text":"<p>The 10 3cs of the hemimegaminx can be placed in any even permutation. Each 4c can be placed in \\(3!\\) orientations, except the last, which can be placed in only \\(3\\) orientations. The 15 2cs can be placed in any even permutation, and each one has \\(2\\) orientations, except the last, whose orientation is determined by the other pieces. Thus, the number of permutations of the puzzle is \\(\\left[\\frac{10!}{2} \\cdot 3!^{9} \\cdot 3\\right] \\cdot \\left[\\frac{15!}{2} \\cdot 2^{14}\\right] \\approx 5.87 \\cdot 10^{29}.\\)</p>"},{"location":"puzzles/hemimegaminx/#physical-version","title":"Physical version","text":"<p>In 2019, after several prototypes, Oskar van Deventer built the first working hemimegaminx. In 2024, Akkei created another physical hemimegaminx and did the first known timed solve on it.</p>"},{"location":"puzzles/nxnxnxn/","title":"NxNxNxN","text":"<p>4x4x4x4</p> <p></p> <p>Shape: Tesseract</p> <p>NxNxNxN, or N<sup>4</sup> is a generic term for a 4-dimensional twisty puzzle in the shape of a hypercube with N layers per axis. It is a direct higher dimensional analogy of the NxNxN Rubik\u2019s Cube.</p> <p>This page is concerned with the case where N is greater than 3. The 2x2x2x2 and 3x3x3x3 have their own pages.</p>"},{"location":"puzzles/nxnxnxn/#pieces","title":"Pieces","text":"<p>The N<sup>4</sup> has \\(N^4 - (N-2)^4\\) hypercubies. If N is even, all hypercubies are movable, and if N is odd, all but 8 are movable. It has \\(8(N-2)^3\\) 1c, \\(24(N-2)^2\\) 2c, \\(32(N-2)\\) 3c, and \\(16\\) 4c pieces. These pieces come in many subtypes.</p> <ul> <li>1c<ul> <li>Centers: These pieces are at the centers of the facets. When \\(N \\geq 3\\) is odd, 8 of these pieces exist and they are immovable. They are not present when \\(N\\) is even.</li> <li>T-centers: These pieces exist in orbits of 48 between the facet centers and the ridge centers. When \\(N \\geq 5\\) is odd, there are \\(\\frac{N-3}{2}\\) orbits. They are not present when \\(N\\) is even.</li> <li>Y-centers: These pieces exist in orbits of 96 between the facet centers and the edge centers. When \\(N \\geq 5\\) is odd, there are \\(\\frac{N-3}{2}\\) orbits. They are not present when \\(N\\) is even.</li> <li>X-centers: These pieces exist in orbits of 64 between the facet centers and the corners. When \\(N \\geq 5\\) is odd, there are \\(\\frac{N-3}{2}\\) orbits. When \\(N \\geq 4\\) is even, there are \\(\\frac{N-2}{2}\\) orbits.</li> <li>Semi-oblique centers: These pieces exist in orbits of 192. There are several subtypes, each of which have \\(\\frac{(N-3)(N-5)}{4}\\) orbits when \\(N \\geq 7\\) is odd, and \\(\\frac{(N-2)(N-4)}{4}\\) when \\(N \\geq 6\\) is even.<ul> <li>TY-centers: These pieces are between the facet centers, ridge centers, and edge centers.</li> <li>TX-centers: These pieces are between the facet centers, ridge centers, and corners.</li> <li>YX-centers: These pieces are between the facet centers, edge centers, and corners.</li> </ul> </li> <li>Oblique centers: These pieces exist in orbits of 192 off all hyperplanes of symmetry. They come in two chiralities. When \\(N \\geq 9\\) is odd, there are \\(\\frac{(N-3)(N-5)(N-7)}{8}\\) orbits of each chirality. When \\(N \\geq 8\\) is even, there are \\(\\frac{(N-2)(N-4)(N-6)}{8}\\) orbits of each chirality.</li> </ul> </li> <li>2c<ul> <li>Middle ridges: These pieces are at the centers of the ridges. When \\(N \\geq 3\\) is odd, they come in one orbit of 24. They are not present when \\(N\\) is even.</li> <li>T-ridges: These pieces exist in orbits of 96 between the ridge centers and the edge centers. When \\(N \\geq 5\\) is odd, there are \\(\\frac{N-3}{2}\\) orbits. They are not present when \\(N\\) is even.</li> <li>X-ridges: These pieces exist in orbits of 96 between the ridge centers and the corners. When \\(N \\geq 5\\) is odd, there are \\(\\frac{N-3}{2}\\) orbits. When \\(N \\geq 4\\) is even, there are \\(\\frac{N-2}{2}\\) orbits.</li> <li>Oblique ridges: These pieces exist in orbits of 192, but they are not chiral. When \\(N \\geq 7\\) is odd, there are \\(\\frac{(N-3)(N-5)}{4}\\) orbits of each chirality. When \\(N \\geq 6\\) is even, there are \\(\\frac{(N-2)(N-4)}{4}\\) orbits of each chirality.</li> </ul> </li> <li>3c<ul> <li>Middle edges: These pieces are at the centers of the edges. When \\(N \\geq 3\\) is odd, they come in one orbit of 32. They are not present when \\(N\\) is even.</li> <li>Wings: These pieces exist in orbits of 64 between the edge centers and the corners. When \\(N \\geq 5\\) is odd, there are \\(\\frac{N-3}{2}\\) orbits. When \\(N \\geq 4\\) is even, there are \\(\\frac{N-3}{2}\\) orbits of each chirality.</li> </ul> </li> <li>4c<ul> <li>Corners: These pieces are at the corners. When \\(N \\geq 2\\), they come in one orbit of 16.</li> </ul> </li> </ul>"},{"location":"puzzles/nxnxnxn/#turning","title":"Turning","text":"<p>Each turn of the N<sup>4</sup> is a rotation of one of its cubic cells, or a slice layer between two parallel cuts. Each layer turned can be oriented in any of 24 orientations of a cube.</p>"},{"location":"puzzles/physical/","title":"Physical Puzzles","text":"<p>Warning</p> <p>It is highly recommended to learn how virtual puzzles work first before trying to understand the physical puzzles. See Why not start with the physical 2x2x2x2?.</p> <p>Physical 3x3x3x3</p> <p></p> <p>Physical puzzles refer to higher dimensional puzzles that are physically built in real life (using only 3 dimensions). This involves clever designs, strange symmetry-abusing tricks, and lots and lots of magnets. Often, these puzzles are too impractical to use, defeating their sole purpose.</p> <p>For a documentary about the history of physical puzzles as of December 2022, see Rowan\u2019s video.</p>"},{"location":"puzzles/physical/#physical-puzzles-that-have-been-built","title":"Physical puzzles that have been built","text":"<ul> <li>Melinda\u2019s 2x2x2x2</li> <li>Grant\u2019s 2x2x2x3</li> <li>Grant\u2019s 2x2x3x3</li> <li>Grant\u2019s 2x3x3x3</li> <li>Grant\u2019s 1x1x1x1</li> <li>Grant\u2019s 3x3x3x3</li> <li>Dominik\u2019s 4D Pyraminx</li> <li>Tymon\u2019s 1x2x2x2</li> <li>Tymon\u2019s 1x2x2x3</li> <li>Tymon\u2019s 1x2x3x3</li> <li>Tymon\u2019s 1x3x3x3</li> </ul>"},{"location":"puzzles/physical/#designs-that-havent-been-built-yet","title":"Designs that haven\u2019t been built yet","text":"<ul> <li>AxBxCxD (any hypercube or hypercuboid with layers bigger than 1)</li> <li>1x1xAxB series</li> <li>Markk\u2019s duoprisms</li> <li>{5}x{4} duoprism</li> <li>Akkei\u2019s 2x2x2x2x2</li> </ul>"},{"location":"puzzles/physical/1x2x2x2/","title":"Tymon\u2019s 1x2x2x2","text":"<p>Tymon\u2019s 1x2x2x2</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Cube</p> <p>Pieces: 8 5c</p> <p>Magnets: 384</p> <p>Completed: 2024 Jan 11</p>"},{"location":"puzzles/physical/1x2x2x2/#history","title":"History","text":"<p>Tymon F began some initial tests for this puzzle in October 2023. The first 2 pieces were fully assembled and magnetized by December 2023. Finally (conincidentally exactly 1 year after he discovered hypercubing), Tymon completed the 1x2x2x2 hypercuboid on 2024-01-11. After that, he started work on creating the cuboids up to 1x3x3x3.</p>"},{"location":"puzzles/physical/1x2x2x2/#moves","title":"Moves","text":"<p>Legal moves of a layer include basic 2x2x2 90\u00b0 twists, 180\u00b0 twists in any plane which also rotate pieces in 4d axis, or a combination of both.</p> <p></p>"},{"location":"puzzles/physical/1x2x2x2/#solving","title":"Solving","text":"<p>Beside basic stickers (white, yellow, orange, red, green, blue) every piece on the puzzle has pink and purple stickers which indicate in which 4d orientation the piece is. In the solved state every piece must have the same 4d axis orientation. The 1x2x2x2 is not much more difficult than the 2x2x2. It can be solved by: orienting 5c pieces in 4d axis, except \u201cOLL parity\u201d (because of the extra axis, a single 5c can be missoriented) the rest of the puzzle can be solved like a 3d 2x2x2. Tymon made a YouTube video showing an example solve of the puzzle.</p>"},{"location":"puzzles/physical/1x2x2x3/","title":"Tymon\u2019s 1x2x2x3","text":"<p>Tymon\u2019s 1x2x2x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Cuboid</p> <p>Pieces: 8 5c, 4 4c</p> <p>Magnets: 512</p> <p>Completed: 2024 Jan 15</p>"},{"location":"puzzles/physical/1x2x2x3/#history","title":"History","text":"<p>A few days after completing the physical 1x2x2x2 Tymon F finished assembling four new 4c pieces that combined with the previous 5c pieces to create a physical analog of the 1x2x2x3 puzzle. This one was another important milestone on the way to create a physical 1x3x3x3 puzzle.</p>"},{"location":"puzzles/physical/1x2x2x3/#moves","title":"Moves","text":"<p>Legal moves of a layer include basic 2x2x2 90\u00b0 and 180\u00b0 twists that rotate pieces without changing their 4d orientation, 4d 180\u00b0 twists that besides moving pieces in 3d, rotate them in 4d axis, or a combination of both.</p> <p></p>"},{"location":"puzzles/physical/1x2x2x3/#solving","title":"Solving","text":"<p>Besides basic stickers (white, yellow, orange, red, green, blue) every piece on the puzzle has pink and purple stickers which indicate in which 4d orientation the piece is. In the solved state every piece must have the same 4d axis orientation. The 1x2x2x3 is a bit more complicated than 2x2x3. It can be solved by: orienting 4c piece in 4d axis, orienting 5c pieces in 4d axis, solving the rest of the puzzle like a 2<sup>3</sup>. Tymon made a YouTube video showing an example solve of the puzzle.</p>"},{"location":"puzzles/physical/1x2x3x3/","title":"Tymon\u2019s 1x2x3x3","text":"<p>Tymon\u2019s 1x2x3x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Cuboid</p> <p>Pieces: 8 5c, 8 4c, 2 3c</p> <p>Magnets: 688</p> <p>Completed: 2024 Jan 24</p>"},{"location":"puzzles/physical/1x2x3x3/#history","title":"History","text":"<p>Over a week after completing the physical 1x2x3x3, Tymon F finished assembling another four 4c pieces and two new 3c pieces that combined with the 1x2x3x3 to create the physical 1x2x3x3 puzzle. This was the last puzzle made with the goal of creating a physical 1x3x3x3.</p>"},{"location":"puzzles/physical/1x2x3x3/#moves","title":"Moves","text":"<p>Legal moves of a layer include normal 2x3x3 90\u00b0 and 180\u00b0 twists that rotate pieces without changing their 4d orientation, 4d 180\u00b0 twists that change the pink/purple stickers, or a combination of both.</p>"},{"location":"puzzles/physical/1x2x3x3/#solving","title":"Solving","text":"<p>Besides basic stickers (white, yellow, orange, red, green, blue) every piece on the puzzle has pink and purple stickers which indicate in which 4d orientation the piece is. In the solved state every piece must have the same 4d axis orientation. The 1x2x3x3 puzzle is much more complicated than smaller hypercuboids, but it can be solved by: orienting 3c pieces in 4d axis, orienting 4c piece in 4d axis, orienting 5c pieces in 4d axis, solving the rest of the puzzle like 3d 2x3x3. Tymon made a YouTube video showing an example solve of the puzzle.</p>"},{"location":"puzzles/physical/1x3x3x3/","title":"Tymon\u2019s 1x3x3x3","text":"<p>Tymon\u2019s 1x3x3x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Cube</p> <p>Pieces: 8 5c, 12 4c, 6 3c, 1 2c (2 1c)</p> <p>Magnets: 936</p> <p>Completed: 2024 Jan 26</p>"},{"location":"puzzles/physical/1x3x3x3/#history","title":"History","text":"<p>Two days after finishing the 1x2x3x3 Tymon F completed his final goal, creating a physical analog of the 1x3x3x3 puzzle. To do this he had to assemble another four 4c pieces, four 3c pieces and one 2c piece that represents two 1c pieces on the virtual puzzle. This ended Tymon\u2019s journey of creating all physical puzzles from the AxBxCx1 family.</p>"},{"location":"puzzles/physical/1x3x3x3/#moves","title":"Moves","text":"<p>Legal moves of a layer include 90\u00b0 twists, 180\u00b0 twists in any plane, or a combination of both.</p> <p></p>"},{"location":"puzzles/physical/1x3x3x3/#solving","title":"Solving","text":"<p>Every piece on the puzzle has pink and purple stickers which indicate which 4d orientation the piece is. In the solved state every piece must have the same 4d axis orientation. 1x3x3x3 is harder than the 3d Rubik\u2019s cube, but it can be solved by: orienting 3c pieces in 4d axis, orienting 4c pieces in 4d axis, orienting 5c pieces in 4d axis, except \u201cOLL parity\u201d (because of the extra axis, a single 5c can be missoriented), then solving the rest of the puzzle like a 3d Rubik\u2019s cube. Tymon made a YouTube video explaining the puzzle as well as showing an example solve.</p>"},{"location":"puzzles/physical/1x3x3x3/#gyro","title":"Gyro","text":"<p>This puzzle has two 1c pieces that are physicaly represented by one 2c piece (the core). Technically the puzzle is solved only when all of the other pieces have the pink sticker on the outside cell (because pink is outside on the core piece). To be able to solve the puzzle with purple color facing outwards, Tymon created a gyro algorithm that flips all pieces inside out and puts the core outside of the puzzle. This represents that pink/purple axis is flipped and now the puzzle is only solved when all of the pieces are oriented with purple on the ouside. The gyro can be reversed to get back to default projection.</p> <p></p>"},{"location":"puzzles/physical/1x3x3x3/#oll-parity","title":"OLL Parity","text":"<p>Becuase of the extra freedom of the 4th dimension a monoflip (single missoriented corner) can occur. It can be solved by doing one of the 4d moves, to set up a valid OLL case or just rotate corners and undoing 4d move. A single corner can also be rotated with a simple commutator.</p>"},{"location":"puzzles/physical/1x3x3x3/#alternative-solved-state","title":"Alternative Solved state","text":"<p>The original solved state well represents which sticker on a piece is on the inside and which one is on the outside, but some people prefer a solved state with edges rotated 4 dimensionaly. This is because then the overall look of the puzzle is less chaotic and more friendly to non hypercubers.</p> <p></p>"},{"location":"puzzles/physical/2x2x2x3/","title":"Grant\u2019s 2x2x2x3","text":"<p>Grant\u2019s 2x2x2x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 16 4c, 8 3c</p> <p>Magnets: 1152</p> <p>Completed: 2022 Feb 3</p> <p>Grant\u2019s 2x2x2x3 is a physical 4D twisty puzzle that was designed and 3D printed by Grant S. It works almost the same as its virtual counterpart, with the restrictions of only certain moves being canonical, plus the extra gyro algorithms needed to rotate the puzzle 4 dimensionally.</p>"},{"location":"puzzles/physical/2x2x2x3/#history","title":"History","text":"<p>In December of 2021, Melinda green posted this image to the Hypercubers Discord server, jokingly calling it a 2x2x2x3:</p> <p></p> <p>After Melinda posted that, Luna started sketching out some ideas of possible layouts for an actual 2x2x2x3.</p> <p></p> <p>She invented the design for the 3c pieces by dividing the edges of a cube into 12 sections like this, grouping 4 sets of 3 together symmetrically.</p> <p>This is when Grant joined the server, and shared his 3D printed 2x2x2x2. Rowan then challenged him to build Luna\u2019s design for the 2x2x2x3. After a lot of time tweaking the designs, printing them, magnetizing them, and assembling them, the 2x2x2x3 was completed on February 3rd 2022.</p> <p></p>"},{"location":"puzzles/physical/2x2x2x3/#how-does-it-work","title":"How Does it Work?","text":"<p>It follows the same basic principles as Melinda\u2019s 2x2x2x2, except gyros get more complicated. Grant made a YouTube video showing off the legal twists, and how it matched the virtual puzzle in MPU exactly.</p>"},{"location":"puzzles/physical/2x2x3x3/","title":"Grant\u2019s 2x2x3x3","text":"<p>Grant\u2019s 2x2x3x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 16 4c, 16 3c, 4 2c</p> <p>Magnets: 1728</p> <p>Completed: 2022 May 14</p>"},{"location":"puzzles/physical/2x2x3x3/#history","title":"History","text":"<p>After the invention of grant\u2019s 2x2x2x3, hypercubers were already thinking about what was next. The 2x2x3x3 has an extra middle layer that the 2x2x2x3 doesn\u2019t have, which introduces the 2c piece to the design. Hactar designed the new 2c piece, and then Grant made the first rendering of what a physical 2x2x3x3 would look like.</p> <p></p> <p>It took a while to get the designs just right, but after printing and assembling 4 of the new 2c pieces and 8 more 3c pieces, the puzzle was completed on May 14th, 2022.</p>"},{"location":"puzzles/physical/2x2x3x3/#functionality","title":"Functionality","text":"<p>In order to prove that it was fully functional, it had to be shown that moves matched the virtual puzzle, and that it was possible to gyro the puzzle into different orientations.</p> <p>The gyro starts by removing the middle layer, and then gyroing just like the 2x2x2x3, which involves separating that middle layer and then gyroing like a 2x2x2x2. Next, the middle layer has some 4 dimensional black magic done to it, and then finally the puzzle is reassembled into the gyroed state. After doing this, Grant realized that some of the 2x2x3 cell moves aren\u2019t accessible, meaning that we actually need a 2nd type of gyro! This secondary gyro involves centering a 2x2x3 cell, and then making the middle layer stick out. Now the puzzle was fully functional.</p>"},{"location":"puzzles/physical/2x3x3x3/","title":"Grant\u2019s 2x3x3x3","text":"<p>Grant\u2019s 2x3x3x3</p> <p></p> <p>4D Shape: Hypercuboid</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 16 4c, 24 3c, 12 2c, 2 1c</p> <p>Magnets: 2496</p> <p>Completed: 2022 Jul 6</p> <p>The next logical step to take after Grant built his 2x2x3x3 was the 2x3x3x3, which once again requires a new piece type: the 1c. But this was no big deal because a 1-colored piece only has 1 color.</p> <p>The production went pretty smoothly, and after printing 8 more 3c and 2c pieces, and 2 of the new 1c pieces, the puzzle was completed on July 6th, 2022.</p> <p>Now given what we\u2019ve seen before with the previous gyro algorithms, you\u2019d think that the 2x3x3x3 needs an extremely long complicated recursive gyro, and although the design of the puzzle has at least 15 different possible types of gyros, it turns out that it actually doesn\u2019t need one at all! All the moves are accessible from this state, which makes for a really nice solving experience.</p> <p>The 4th ever physical 4D puzzle was constructed, bringing us closer and closer to our ultimate goal: the physical 3x3x3x3.</p>"},{"location":"puzzles/physical/3x3x3x3/","title":"Grant\u2019s 3x3x3x3","text":"<p>Physical 3x3x3x3</p> <p></p> <p>4D Shape: Tesseract</p> <p>Physical Shape: Rectangular prism with 8 pieces sticking out</p> <p>Pieces: 8 1c, 24 2c, 32 3c, 16 4c</p> <p>Magnets: 3,840</p> <p>Completed: 2022 July 22</p> <p>Permutations: \\(1.7\\times 10^{120}\\)</p>"},{"location":"puzzles/physical/3x3x3x3/#history","title":"History","text":"<p>With the expansion of Melinda\u2019s 2x2x2x2 through the hypercuboid series, only 1 puzzle remained unmade: the physical 3x3x3x3. A true 4-dimensional analog of the classic 3x3x3 Rubik\u2019s Cube.</p> <p>Melinda Green</p> <p>I can\u2019t believe progress is being made towards the holy grail. The cost and effort doesn\u2019t matter since one will have to be made if it\u2019s at all possible. (The main reason to be sure it\u2019s right) It also doesn\u2019t matter how clumsy it is to operate, though of course to get it into multiple people\u2019s hands, you\u2019ll want to explore every possible way to improve it.</p> <p>At first, it was not clear how to expand the physical 2x3x3x3 into the 3x3x3x3, as it would need extra pieces that would no longer make it a nice cuboid shape. This is because we have one more slice layer than the number of dimensions we\u2019re trying to simulate. For example a 3x3x3 has 3 slice layers, so to represent it in 2D space, some of the pieces have to stick out like this:</p> <p></p> <p>After months and months of effort, Grant completed assembling the puzzle on July 22nd, 2022. To this day, Grant has not scrambled or solved the physical 3x3x3x3 due to it being extremely big, heavy, and awkward to use. The most that was done on it was a checkerboard algorithm, but he did make a video showing off all of the hypercuboids and their legal twists.</p> <p></p> <p>In April 2023, Akkei made a new program that simulated the physical 3<sup>4</sup>, and then Hyperespy became the first person to ever fully solve the physical 3<sup>4</sup>. The actual gyros are pretty painful to do, but luckily the program does them for you :)</p> <p>In just under 6 months, the community went from having 1 physical 4d puzzle, to having 5!</p>"},{"location":"puzzles/physical/4d-pyraminx/","title":"Dominik\u2019s 4D Pyraminx","text":"<p>Dominik\u2019s 4D Pyraminx</p> <p></p> <p>4D Shape: 5-cell</p> <p>Physical Shape: Tetrahedron + small Octahedron</p> <p>Pieces: 5 4c, 10 3c</p> <p>Magnets: 60 (better version needs 180)</p> <p>Completed: 2023 Dec 28</p>"},{"location":"puzzles/physical/4d-pyraminx/#history","title":"History","text":"<p>Based on some ideas for the 4D pyraminx, Dominik first created a paper model in mid-December of 2023. After some suggestions from Melinda Green he created the current prototype with magnets which was the first functioning version of this design.</p>"},{"location":"puzzles/physical/4d-pyraminx/#how-does-it-work","title":"How does it work?","text":"<p>The puzzle can be moved like a pyraminx but with some additional legal moves. The edges that are in the position of the trivial tips can\u2019t legally be twisted.</p> <p>There are a few ways to project a 5-cell into 3d space. In a vertex-first projection the \u201chidden\u201d cell is on the \u201coutside\u201d of the others while in a cell-first projection it is on the \u201cinside\u201d. My design for the 4D pyraminx represents the latter way. In a solved state we have 4 colors on the outside and one on the inside of the puzzle.</p> <p></p> <p>2D visualizations of 3D perspective projections of the first iteration of a pentatope-based fractal: a) vertex-first, b) cell-first, c) face-first, d) edge-first.</p> <p> </p> <p>(pictures: projections Source, vertex first pyraminx, cell first pyraminx Source)</p>"},{"location":"puzzles/physical/4d-pyraminx/#the-pieces","title":"The Pieces","text":"<p>There are ten tetrahedron-shaped 3-colored edge pieces where the fourth face is split into three colors.</p> <p></p> <p>Then there are five octahedron-shaped 4-colored center pieces where four of the faces are split into three colors of the adjacent faces.</p> <p></p> <p>The five 4-colored trivial tips can also be represented by tetrahedrons but with the current design they would need to be a separate arrangement. So this puzzle without the trivial tips represents just the truncated pyramnix.</p> <p></p>"},{"location":"puzzles/physical/4d-pyraminx/#chirality","title":"Chirality","text":"<p>For the pieces to fit together in the correct color arrangement they need to have the same chirality. There is a left-handed and a right-handed version of the pieces and the centers and trivial tips need to have the same order of colors. Since the edges are allowed to be in more states the chirality doesn\u2019t matter as much but if the chiralities don\u2019t line up one color will be \u201cfavored\u201d in a certain orientation.</p>"},{"location":"puzzles/physical/4d-pyraminx/#moves","title":"Moves","text":"<p>There are some legal moves that don\u2019t represent a movement in the 4D puzzle.</p>"},{"location":"puzzles/physical/4d-pyraminx/#edge-migration","title":"Edge Migration","text":"<p>You can move edges to a corresponding position on the \u201cfree center\u201d and back.</p> <p> </p>"},{"location":"puzzles/physical/4d-pyraminx/#reorient-edges","title":"Reorient Edges","text":"<p>Edges can be in two states in relation to a center. They can align with the split face towards the center which will be call a \u201ccorrect\u201d state or the split face can be away from the center which will be called an \u201cincorrect\u201d state. In the latter case the edge can legally be oriented in three different ways.</p> <p> </p> <p></p> <p>Next we have moves which do represent a movement in the 4D puzzle. Unlike the normal 3D pyraminx the tips can\u2019t legally be twisted. Other than that the four different moves of turning two layers of the pyraminx is legal. In the 4D version of the puzzle we have 20 different of such slice moves. Here are the four axes of rotations that are allowed for each 2-layered pyramid.</p> <p> </p> <p>If you perform such a move on each of the four sides of the tetrahedron you get a total of 16 moves. For the missing four moves we can \u201cequip\u201d the free octahedron with the edges by swapping them onto it and perform the rest of the rotations that way.</p> <p> </p> <p> </p> <p>After the rotation you have can move the edges back.</p> <p> \u2026</p> <p>This is not necessary for a solve, though, since you have access to all the edge pieces through the 16 other moves.</p>"},{"location":"puzzles/physical/4d-pyraminx/#legal-states","title":"Legal States","text":"<p>To keep the puzzle in a legal state sometimes after certain rotations we need to make edge reorientations. When performing a non-standard slice move an edge that isn\u2019t in a correct state regarding the center that has rotated can after a turn show a split face.</p> <p></p> <p>If it isn\u2019t in a tip position it needs to be reoriented for otherwise the puzzle can get into an illegal or impossible state and also the color alignment becomes unknown for practical purposes when the puzzle is scrambled.</p> <p>How does this work? Before the rotation the colors A and B are on the outside.</p> <p></p> <p>After a non-standard rotation either A or B will be on the inside and then there are two possible cases. Firstly, if the edge is \u201ccorrect\u201d then the split face will remain touching the rotated center and the full face with color C will show on the outside.</p> <p></p> <p>The other case is when the edge is \u201cincorrect\u201d. Here the split face will be on the outside and the full color C will be touching the center.</p> <p> </p> <p>As a rule you can now rotate the edge in the \u201cdown\u201d direction in regards to the the rotation (where the center would be in the \u201cup\u201d direction) as shown here.</p> <p> </p> <p>This way we can simulate a 3-cycle of the faces A, B and C with the 4-sided shape of the tetrahedron.</p>"},{"location":"puzzles/physical/4d-pyraminx/#gyro","title":"Gyro","text":"<p>While it isn\u2019t necessary for a solve it is possible to reorient the whole puzzle by what\u2019s usually called a gyro. There might be better ways to do it but here is one way that can be done in four steps.</p>"},{"location":"puzzles/physical/4d-pyraminx/#step-1","title":"Step 1","text":"<p>First you have to align the free octahedron with one of the \u201couter\u201d edges. Regarding the colors it\u2019s best to look at the colors of the adjacent octahedron. In this step you have two cases. Either the edge is already correct the you don\u2019t have to do anything or the edge is incorrect then you have to reorient it towards the free octahedron.</p> <p> </p>"},{"location":"puzzles/physical/4d-pyraminx/#step-2","title":"Step 2","text":"<p>Now you have to separate one 2-layered pyramid next to the aligned free octahedron. Here you have to watch out for the three edges facing you. In case they are \u201cincorrect\u201d you have to reorient them towards you. Then you can move it together towards the free octahedron.</p> <p> </p>"},{"location":"puzzles/physical/4d-pyraminx/#step-3","title":"Step 3","text":"<p>Here you have to look at what\u2019s left of the \u201cupper pyramid\u201d. The topmost piece and the \u201cinner\u201d piece have to be reoriented in case they are incorrect. This time the direction you have to reorient them towards is \u201cdown\u201d, which means it\u2019s just like you would do in a normal slice move. One handy thing is that for the \u201cinner\u201d piece you simply have to look on the inside by only taking these three pieces off and if you see a whole face you can just leave the piece there. If the face is 3 colored you can just take it and rotate it together with the other pieces and it will be correct.</p> <p> </p>"},{"location":"puzzles/physical/4d-pyraminx/#step-4","title":"Step 4","text":"<p>The last step only involves the last edge. Again, if it\u2019s incorrect you first have to reorient it, this time towards the \u201cdown\u201d direction. And then you take the piece and move it \u201cover the Pyraminx\u201d, like this, and simply put it in the right spot.</p> <p> </p> <p>That\u2019s all there is to the gyro and here we have all in one movement.</p> <p></p>"},{"location":"puzzles/physical/4d-pyraminx/#comparison-of-moves-with-mc4d","title":"Comparison of Moves with MC4D","text":"Dominik\u2019s Pyraminx MagicCube 4D"},{"location":"puzzles/physical/4d-pyraminx/#example-solve","title":"Example solve","text":"<p>Here is a link to a video of an example scamble and solve of the puzzle: Link.</p>"},{"location":"puzzles/physical/4d-pyraminx/#notes-for-a-solve","title":"Notes for a solve","text":"<p>The 4D pyraminx can end up with a single edge flipped incorrectly unlike the 3D pyraminx. This state can be solved with an algorithm that flips two edges, the right slice move and an additional two edges flip. But if a piece was moved in a wrong way accidentally it can also end up in a state that\u2019s not solvable like this. The reason for this is that there are three states that flipping an edge moves between: (a) solved state, (b) one edge correct and the other two flipped and (c) all edges incorrect.</p> <p>Going from (c) to (a) requires two flips so the method above can flip edge A from (b) to (a) or (c) but then edge B will go to state (b). In the following tree diagram it can be seen how all 2 flip moves only lead to looping between unsolved states:</p> <p></p>"},{"location":"puzzles/physical/restricted-2x2x2x2x2/","title":"Restricted 2x2x2x2x2","text":"<p>Restricted 2x2x2x2x2</p> <p></p> <p>4D Shape: Penteract</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 32 5c</p> <p>Magnets: 768 (without buffer)</p> <p>The restricted 2x2x2x2x2 or 2<sup>5</sup> (also called the physical domino reduced 2x2x2x2x2) is a physical puzzle that represents the state space of a virtual 2<sup>5</sup> puzzle, with one of the axes only being able to do 180 degree turns. This puzzle is like the 5D equivalent of scrambling a 2<sup>3</sup> with only <code>&lt;U,D,R2,F2,L2,B2&gt;</code>, which makes the solve way easier than the non-restricted version.</p> <p>The first known restricted 2<sup>5</sup> was made by Grant Staten which he showed off in a YouTube video. Hyperespy also made a version using foldable paper cubes to cover the pieces.</p> <p></p>"},{"location":"puzzles/physical/restricted-2x2x2x2x2/#pieces-and-twists","title":"Pieces and Twists","text":"<p>There are 32 5c pieces, but each piece can only be oriented in 12 ways instead of 60 because of the axis restriction. And just like Melinda\u2019s physical 2<sup>4</sup>, this puzzle has certain legal moves that a solver must follow. Each twist of this puzzle is like rotating a tesseract. You can take off half of it and do any reorientation like you would on the physical 2<sup>4</sup>. This includes simple rotations and gyros. The only thing you can\u2019t do is a 90 degree twist of the square layers (this results in a legal puzzle state, but is not analogous to any move on the virtual 2<sup>5</sup>). See Hyperespy\u2019s video for a full overview of the canonical moves and a way to scramble the puzzle quickly.</p>"},{"location":"puzzles/physical/restricted-2x2x2x2x2/#how-to-make-one","title":"How to make one","text":"<p>Buffer pieces magnet layout</p> <p></p> <p>Order a 2<sup>4</sup> DIY kit from Melinda Green. Then assemble it with a mirrored colour scheme from your current 2<sup>4</sup>, but with the same magnet layout. For the 5D stickers 192 are needed in total, with half (96) of them being black and the other half grey. This means that each normal physical 2<sup>4</sup> piece gets 6 stickers on it. A good option is to order a couple of custom sticker sets online such as these.</p> <p>Grant used buffer pieces when making his version in order to make it obvious to avoid doing illegal twists. If you want to add buffer pieces, you need 8 monocolored hypercubies with a custom magnet layout. Although there\u2019s only a few different illegal twists that are even possible so it\u2019s not too tricky to avoid altogether.</p>"},{"location":"puzzles/physical/2x2x2x2/","title":"Melinda\u2019s 2x2x2x2","text":"<p>Melinda\u2019s 2x2x2x2</p> <p></p> <p>4D Shape: Tesseract</p> <p>Physical Shape: Rectangular prism</p> <p>Pieces: 16 4c</p> <p>Magnets: 384</p> <p>Permutations: \\(3.3*10^{27}\\)</p> <p>See Melinda\u2019s 2x2x2x2 website for her project overview.</p>"},{"location":"puzzles/physical/2x2x2x2/#history","title":"History","text":""},{"location":"puzzles/physical/2x2x2x2/#invention","title":"Invention","text":"<p>Many hypercubers, including Melinda Green (one of the developers of MC4D) wanted to create a physical 3<sup>4</sup>, but sadly it just seemed too complicated. Eventually, she decided to focus on the 2<sup>4</sup> due to its simplicity of only having 16 4c pieces.</p> <p>Throughout 2013 and 2014, Melinda was in contact with Oskar van Deventer, and together they tried to think of any possible mechanism for a physical 2<sup>4</sup>. Originally they were determined to find a good mechanism that didn\u2019t have to rely on magnets, but after several failed attempts a magnetic mechanism was the only solution. In 2017, Melinda built the first prototype and shared an unlisted YouTube video showing it off to the mailing list members.</p> <p>A few months later, Melinda built a 2nd prototype using 3D printing from a company called Shapeways (which just so happened to offer 8 colors, 6 of them being standard Rubik\u2019s Cube colors, plus pink and purple (this is where the standard 4D colour scheme comes from)).</p>"},{"location":"puzzles/physical/2x2x2x2/#popularization","title":"Popularization","text":"<p>Professor Erno Rubik inspecting a physical 2<sup>4</sup> at G4G 2018</p> <p></p> <p>At the Gathering For Gardner conference of 2018, Roice Nelson got to show his physical 2<sup>4</sup> to Erno Rubik. It was reported that his only comment was something along the lines of \u201cnone of the derivative puzzles matter and that only his original invention is important\u201d.</p> <p>Also in 2018, the YouCuber CanChrisSolve? made a series of videos where he solved the physical 2<sup>4</sup>, which have now amassed over 100,000 views combined! A month later, a Spanish YouCuber called TheMaoiSha made a video explaining the physical 2<sup>4</sup> which now sits at over 800,000 views, exposing the world of hypercubing to more and more people.</p> <p>Because of all this recognition, many new people bought the puzzle, but it was still pretty expensive because of the costs of 3d printing and the labor of manual assembly. Eventually Melinda moved away from 3D printing in favour of injection molding, which greatly reduced the price while increasing the quality dramatically.</p> <p>Where can I buy one?</p> <p>Read this section of Melinda\u2019s website.</p>"},{"location":"puzzles/physical/2x2x2x2/#how-does-it-work","title":"How Does it Work?","text":"<p>Animations showing how the virtual and physical 2<sup>4</sup> transform into each other</p> <p> </p> <p>Each twist and rotation on the virtual 2<sup>4</sup> is possible to do on the physical puzzle, albeit with certain moves requiring some extra setup. See the canonical moves page for a more detailed explanation.</p> <p>Also see Melinda\u2019s video on the official canonical moves.</p> <p>In December of 2017, Melinda made a video fully explaining the puzzle, including its canonical moves, scrambling, and more.</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/","title":"Physical 2x2x2x2 Canonical Moves &amp; Notation","text":"<p>Info</p> <p>Watch Melinda Green\u2019s video for a quick overview of the canonical moves</p> <p>The Canonical Moveset is a set of moves agreed upon by the community for solving the physical 2<sup>4</sup>. To get accepted into the official Hall of Fame, you must follow the canonical moves exactly. Make sure that you have already solved a virtual 2<sup>4</sup>, and are familiar with how the pieces of the physical 2<sup>4</sup> correspond. Also make sure that you know your 3D rotations (<code>x</code> <code>y</code> <code>z</code>) very well.</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#canonical-moves","title":"Canonical Moves","text":""},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#simple-rotations","title":"Simple Rotations","text":"<p>Simple Rotations</p> <p></p> <p>A lot of the whole puzzle reorientations can be reached without the need for the gyro algorithm. These are called simple rotations, and consist of rotaing the L and R cells together in opposing directions (as to not change the state of the puzzle, only its orientation).</p> <p><code>zy</code> <code>yz</code> <code>yw</code> <code>wy</code> <code>zw</code> <code>wz</code></p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#cell-twists","title":"Cell Twists","text":"<p>The left and right cells of the puzzle can be twisted into any reorientation of a cube. In other words, there are 23 different twists of the L/R cells:</p> <p>Left cell twists: <code>Ly</code> <code>Ly'</code> <code>Ly2</code> <code>Lx2</code> <code>Lz2</code> <code>Lx2,y</code> <code>Lx2,y'</code> <code>Lx</code> <code>Lx,y</code> <code>Lx,y'</code> <code>Lx,y2</code> <code>Lx'</code> <code>Lx',y</code> <code>Lx',y'</code> <code>Lx',y2</code> <code>Lz</code> <code>Lz,y</code> <code>Lz,y'</code> <code>Lz,y2</code> <code>Lz'</code> <code>Lz',y</code> <code>Lz',y'</code> <code>Lz',y2</code></p> <p>Right cell twists: <code>Ry</code> <code>Ry'</code> <code>Ry2</code> <code>Rx2</code> <code>Rz2</code> <code>Rx2,y</code> <code>Rx2,y'</code> <code>Rx</code> <code>Rx,y</code> <code>Rx,y'</code> <code>Rx,y2</code> <code>Rx'</code> <code>Rx',y</code> <code>Rx',y'</code> <code>Rx',y2</code> <code>Rz</code> <code>Rz,y</code> <code>Rz,y'</code> <code>Rz,y2</code> <code>Rz'</code> <code>Rz',y</code> <code>Rz',y'</code> <code>Rz',y2</code></p> <p>Each move here either starts with an L or an R, followed by the rotations (separated by commas).</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#insideoutside-twists","title":"Inside/Outside Twists","text":"<p>Ix2 twist</p> <p></p> <p>The I and O cells are the sides with the next most turning freedom after L and R. This was referred to as an \u201caxial twist\u201d in Melinda\u2019s video. The canonical moves for the I/IO cells are <code>Ix</code> <code>Ix'</code> <code>Ix2</code> <code>Ox</code> <code>Ox'</code> <code>Ox2</code></p> <p>These twists can be difficult to perform for speedsolving, so most people tend to split it up by temporarily doing 2 illegal 90 degree twists that yield the same result. Be careful though, as this can lead to an illegal state if you accidentally screw up while doing it this way.</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#slab-twists","title":"Slab Twists","text":"<p>U2 twist</p> <p></p> <p>The remaining canonical twists involve picking up a 2x2x4 \u201cslab\u201d off the puzzle, and rotating it 180 degrees in the same plane. These slabs you can pick up are the U, F, D, and B cells. Because the slabs can only be turned 180 degrees those moves will just be referred to as <code>U2</code> <code>F2</code> <code>D2</code> <code>B2</code></p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#gyro","title":"Gyro","text":"<p>If you try to scramble the puzzle with all the moves above, you will quickly notice that the 2 colours on the x-axis aren\u2019t mixing with the other colours. This is because the simple rotations and slab twists are restricting what we can do because of the symmetry of the physical puzzle. To fix this, we need a series of illegal moves that rotate the puzzle 4-dimensionally in a way that changes the x-axis. This is called the Gyro, and will allow us to access all the rest of the puzzle rotations (<code>xz</code> <code>zx</code> <code>yx</code> <code>xy</code> <code>xw</code> <code>wx</code>)</p> <p></p> <p>There are several different algorithms for this, some of which gyro different axes. Melinda has several videos about different gyro algorithms, the shortest known one being 6 snaps. Below is a common gyro algorithm that several people in the community use.</p> <ul> <li>Take the left endcap off and put it on the right so it becomes the right endcap (this brings the puzzle into the inverted state)</li> <li><code>Ly</code> <code>Ry'</code></li> <li>Take the right endcap off and put it on the left so it becomes the left endcap (this brings the puzzle back into the normal state)</li> <li><code>Rx2</code> <code>B2</code> <code>D2</code> <code>Lx2</code></li> </ul>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#expanded-canonical-moveset","title":"Expanded Canonical Moveset","text":"<p>The expanded canonical moveset is what is accepted for the Hypercubing.xyz leaderboards. These moves all correspond perfectly with twists on the virtual puzzle, but weren\u2019t allowed in the canonical moveset because people agreed not to for some reason.</p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#extra-slab-twists","title":"Extra slab twists","text":"<p>Several new slab twists are added. For the U cell, this means going from having just <code>Uy2</code> to now having <code>Uy2</code> <code>Ux,y2</code> <code>Ux',y2</code> <code>Ux</code> <code>Ux'</code> <code>Ux2</code> <code>Uz2</code></p>"},{"location":"puzzles/physical/2x2x2x2/canonical-moves/#extra-io-cell-twists","title":"Extra I/O cell twists","text":"<p><code>Iz2</code> <code>Iy2</code> <code>Oz2</code> <code>Oy2</code> are added (although they are very hard to fingertrick and perform quickly).</p>"},{"location":"puzzles/physical/2x2x2x2/image-generator/","title":"Physical 2x2x2x2 Image Generator","text":"<p>Generate an image of a physical 2x2x2x2 by inputting moves using canonical moves notation, or by specifying the color per sticker. You can also do this directly from the URL by adding <code>?&amp;moves=</code> or <code>?&amp;stickers=</code> at the end, and using - to separate (and <code>H</code> instead of <code>#</code> for gyro).</p> Generate by move input <p>Moves that the generator will accept: <code>zy</code> <code>yz</code> <code>xz</code> <code>zx</code> <code>yx</code> <code>xy</code> <code>yw</code> <code>wy</code> <code>xw</code> <code>wx</code> <code>zw</code> <code>wz</code> <code>Ly</code> <code>Ly'</code> <code>Ly2</code> <code>Lx2</code> <code>Lz2</code> <code>Lx2,y</code> <code>Lx2,y'</code> <code>Lx</code> <code>Lx,y</code> <code>Lx,y'</code> <code>Lx,y2</code> <code>Lx'</code> <code>Lx',y</code> <code>Lx',y'</code> <code>Lx',y2</code> <code>Lz</code> <code>Lz,y</code> <code>Lz,y'</code> <code>Lz,y2</code> <code>Lz'</code> <code>Lz',y</code> <code>Lz',y'</code> <code>Lz',y2</code> <code>Ry</code> <code>Ry'</code> <code>Ry2</code> <code>Rx2</code> <code>Rz2</code> <code>Rx2,y</code> <code>Rx2,y'</code> <code>Rx</code> <code>Rx,y</code> <code>Rx,y'</code> <code>Rx,y2</code> <code>Rx'</code> <code>Rx',y</code> <code>Rx',y'</code> <code>Rx',y2</code> <code>Rz</code> <code>Rz,y</code> <code>Rz,y'</code> <code>Rz,y2</code> <code>Rz'</code> <code>Rz',y</code> <code>Rz',y'</code> <code>Rz',y2</code> <code>Ix</code> <code>Ix'</code> <code>Ix2</code> <code>Ox</code> <code>Ox'</code> <code>Ox2</code> <code>U2</code> <code>F2</code> <code>B2</code> <code>D2</code> <code>#</code> Input moves: (separated by spaces) </p> <p>Generate Image</p> <p><p></p></p> <p><p></p> </p> Generate by sticker input <p>Colors: <pre><code>W = white\nY = yellow\nR = red\nO = orange\nG = green\nB = blue\nM = magenta (purple)\nP = pink\nS = silver (gray)\n</code></pre> Piece/Sticker order: <code>LUBO</code> <code>LUBI</code> <code>LUFO</code> <code>LDBO</code> <code>LDBI</code> <code>LDFI</code> <code>LDFO</code> <code>RUBI</code> <code>RUBO</code> <code>RUFO</code> <code>RUFI</code> <code>RDBI</code> <code>RDBO</code> <code>RDFI</code> <code>RDFO</code></p> <p>Input stickers by piece: (separated by line breaks) </p> <p>Generate Image</p> <p><p></p></p>"},{"location":"puzzles/physical/2x2x2x2/scramble-generator/","title":"Physical 2x2x2x2 Scramble Generator","text":"<p>Scrambles: 5</p> <p> Generate Scrambles</p> <p>Scrambles</p> <p><p></p> </p>"},{"location":"software/","title":"Software","text":"<p>Since building physical representations of higher-dimensional puzzles is challenging, we use computer software to simulate them.</p>"},{"location":"software/#what-program-should-i-download","title":"What program should I download?","text":"<p>We recommend Hyperspeedcube to get started.</p> <p>If you want macro support (recorded sequences of moves) or other 4D puzzles, Magic Cube 4D is a good option.</p> <ul> <li>For 5D+ puzzles: Magic Cube 5D, Magic Cube 7D, and Magic Puzzle Ultimate</li> <li>For puzzles in non-Euclidean geometries: MagicTile</li> <li>For 3D puzzles: pCubes</li> </ul> <p>For hypercubing on mobile devices, see Android apps or iOS apps.</p>"},{"location":"software/#general-cubing-hypercubing","title":"General cubing &amp; hypercubing","text":"What do the icons mean? <ul> <li> Mouse controls</li> <li> Keyboard controls</li> <li> Customizable keyboard controls</li> <li> Find/filter piece by color</li> <li> Filter pieces</li> <li> Timer</li> <li> Macros</li> <li> Move input</li> <li> Custom colors</li> <li> Custom puzzles</li> <li> VR support</li> </ul> Program Platforms Features Puzzles Hyperspeedcube  \u2022   {1-9}<sup>{3-4}</sup> Magic Cube 4D  \u2022   4D via Schl\u00e4fli symbol MagicTile  \u2022   2D tilings Magic Puzzle Ultimate  \u2022   3D+ doctrinaire Magic Cube 7D  \u2022   {3-5}<sup>{4-7}</sup> Magic Cube 5D  \u2022   {2-7}<sup>5</sup> Magic Cube 4D VR  \u2022   3<sup>4</sup> Flat Hypercube  \u2022   {1-19}<sup>{1-8}</sup> Gelatinbrain<sup>1</sup>  \u2022   many cursed things pCubes nearly every 3D puzzle"},{"location":"software/#specific-puzzles","title":"Specific puzzles","text":"Program Platforms Features Puzzle Magic Hyperbolic Tile {6,3,3} (7 quotients) Magic Simplex 5D  \u2022   5D simplex (+ recuts) Magic120Cell  \u2022   120-cell (+ recolorings) Nan Ma\u2019s 11-cell  \u2022   11-cell"},{"location":"software/#1d-and-2d-puzzles","title":"1D and 2D puzzles","text":"<ul> <li>k-Card Game</li> <li>Loopover</li> <li>Heav\u2019s Relocation Puzzle</li> <li>Slidysim</li> <li>Luna\u2019s \u201cGreen\u201d (generalization of Lights Out and Green The Board)</li> </ul>"},{"location":"software/#complex-laminated-puzzles","title":"Complex &amp; laminated puzzles","text":"<ul> <li>Complex Loopover</li> <li>Complex Cube</li> <li>Luna\u2019s Complex Puzzles</li> <li>Milo\u2019s laminated puzzles</li> </ul>"},{"location":"software/#other","title":"Other","text":"<ul> <li>Nan Ma\u2019s puzzles (Reflecube, Lollipop, Clockwork Cube, and more)</li> <li>Akkei\u2019s physical 3<sup>4</sup> program</li> <li>Arnaud Ch\u00e9ritat\u2019s Hungarian Rings</li> <li>Magic Cube 3D</li> <li>MagmaMcFry\u2019s Quaternion Cube</li> <li>Banderson\u2019s \u201csus non-associative puzzle\u201d</li> </ul>"},{"location":"software/#android-apps","title":"Android apps","text":"<p>Hypercubing on mobile devices is not recommended; however, if this is your only option, these apps are available for Android:</p> <ul> <li>Magic Cube 4D (Raynefork) (recommended)</li> <li>Magic Cube 4D (superceded by Raynefork)</li> <li>The Tesseract Puzzle</li> <li>4D Hypercube Puzzle</li> </ul>"},{"location":"software/#ios-apps","title":"iOS apps","text":"<p>There are no known apps for hypercubing on iOS.</p> <p>If you\u2019re able to connect an external mouse &amp; keyboard, the web version of Hyperspeedcube may work on mobile devices but it\u2019s not officially supported.</p>"},{"location":"software/#tools","title":"Tools","text":"<ul> <li>Orb, for planning puzzle cut depths</li> <li>RocKeT, for finding RKT cancels for 3D algorithms</li> </ul>"},{"location":"software/#games","title":"Games","text":"<p>This is not a complete list of 4D games. This is specifically 4D software that hypercubers often recommend for understanding 4D geometry better.</p> <ul> <li>4D Blocks</li> </ul>"},{"location":"software/#visualizations","title":"Visualizations","text":"<ul> <li>IMAC2 Rubik4D by Oradimi, melokye, and MMeche</li> </ul> <ol> <li> <p>Full name: gelatinbrain\u2019s Virtual Magic Polyhedra (permutationpuzzles)\u00a0\u21a9</p> </li> </ol>"},{"location":"software/hyperspeedcube/","title":"Hyperspeedcube","text":"<p>Hyperspeedcube (HSC) is a modern, beginner-friendly 3D and 4D Rubik\u2019s cube simulator with customizable mouse and keyboard controls and advanced features for speedsolving. It\u2019s been used to break numerous speedsolving records and runs on all major operating systems plus the web. Hyperspeedcube was first released in early 2022 and is developed by Andrew Farkas (a.k.a. HactarCE).</p> <p> </p>"},{"location":"software/hyperspeedcube/#downloadinstallation","title":"Download/installation","text":"<ul> <li> <p> Download Hyperspeedcube</p> </li> <li> <p> Use Hyperspeedcube online</p> </li> </ul> <p>HSC does not have an installer. On Windows, open <code>hyperspeedcube_win64.zip</code> and move <code>hyperspeedcube.exe</code> out of  to a folder on your computer.</p> <p>Features missing from the web version</p> <ul> <li>Saving &amp; loading logs to file (can still save/load via clipboard)</li> <li>Awareness of alternate keyboard layouts</li> <li>Antialiasing</li> </ul>"},{"location":"software/hyperspeedcube/#troubleshooting","title":"Troubleshooting","text":"<p>If none of the instructions below help, join the Hypercubers Discord server and start a thread in the <code>#\u2753help</code> forum. Mention in your post that you\u2019ve read the FAQ.</p>"},{"location":"software/hyperspeedcube/#windows","title":"Windows","text":"My antivirus thinks Hyperspeedcube is malicious <p>Try opening the Windows Security app, and digging around in the settings there to disable it, then try the download again.</p> \u201cWindows protected your PC\u201d <p>Microsoft Defender SmartScreen prevented an unrecognized app from starting. Running this app might put your PC at risk.</p> <p>Click More info and then Run anyway.</p> <p>In order to prevent that message from appearing, Hactar would have to spend a lot of money to buy a Microsoft developer license and go through a lot of hassle every time there is a new release of HSC. You\u2019ll only have to click through the warnings once.</p> \u201cThe program can\u2019t start because VCRUNTIME140.dll is missing from your computer.\u201d <p>You need to install the Microsoft Visual C++ Redistributable. Here is a direct download.</p> \u201cHyperspeedcube crashed. A crash report has been saved to \u2026\u201d <p>First, make sure your graphics drivers are up-to-date! This is the most common cause of Hyperespeedcube crashes. Here is a video tutorial if you don\u2019t know how to do that.</p> <p>If you still get an error message, then follow these steps:</p> <ol> <li>Press +R, type <code>%LocalAppData%</code>, and press Enter</li> <li>Open the <code>Temp</code> folder</li> <li>Find the file named in the error message and send it to Hactar either in a GitHub issue or a new thread in the <code>#\u2753help</code> forum on Discord</li> </ol>"},{"location":"software/hyperspeedcube/#macos","title":"macOS","text":"\u201c\u2018Hyperspeedcube.app\u2019 cannot be opened because the developer cannot be verified.\u201d <p>macOS cannot verify that this app is free from malware.</p> <p>Go to System Settings \u2192 Privacy &amp; Security, then scroll down to Security. Select App Store and identified developers, then click Open Anyway.</p> <p>In order to prevent that message from appearing, Hactar would have to spend a lot of money to buy an Apple developer license and go through a lot of hassle every time there is a new release of HSC.</p>"},{"location":"software/hyperspeedcube/#linux","title":"Linux","text":"<p>Check that you have up-to-date graphics drivers installed. If that doesn\u2019t help, you\u2019re on your own.</p> <p>If there\u2019s any changes you make to the Hyperspeedcube source code to get it working, please open an issue or PR on GitHub. If you\u2019re able to make an package for HSC for your package manager, please let me know either on Discord or GitHub Issues.</p>"},{"location":"software/hyperspeedcube/#historydevelopment","title":"History/Development","text":"<p>On April 24th, 2020, Hactar wrote a small program called Keyboard Speedcube that simulated a 3<sup>3</sup> using keybinds inspired by Ryan Heise\u2019s Rubik\u2019s Cube Simulator. In October 2021, rudimentary 4D support was added and a screenshot was posted on the Hypercubers Discord server. A month later, Rowan Fortier asked Hactar if he could receive an early version of the program, and showcased it in a YouTube video. Shortly before the video\u2019s release, the project was renamed to Hyperspeedcube.</p> <p> </p> <p>The first official release was v0.1.0 in January 2022, featuring customizable keybinds and support for the 3<sup>3</sup> and 3<sup>4</sup>. Over the next year, many community-requested features were added, including mouse controls and more n<sup>3</sup> and n<sup>4</sup> puzzles. (See the changelog for a complete list of releases and changes.)</p> <p>Hyperspeedcube began to see widespread use after the addition of mouse controls and more advanced piece filters in August 2022, kickstarting the hyperspeedsolving revolution. The web version was released in January 2023.</p> <p>Shortly after the web version was released, Hactar and Luna began reading the MPU source code, intending to make a tool to ease the process of writing MPU puzzle definitions. Instead, they were able to replicate MPU\u2019s puzzle generation algorithms, and Hactar set to work on a new puzzle simulator using this backend. Over the next year, they ported the algorithm to Conformal Geometric Algebra in the hopes of supporting curved cuts. Puzzles would be defined using Lua, since it is a well-known programming language with a simple type system that is easy to embed, sandbox, and extend with custom types.</p> <p>The first dev build of the new version, Hyperspeedcube v2.0.0-pre.1, was released on July 16th, 2023, and supported Lua shape definitions but not twists. As of early 2024, HSC 2.0 is still in development.</p>"},{"location":"software/hyperspeedcube/#future-updates","title":"Future updates","text":"<p>HSC 2.0 is the next major update in the works, with no set release date as of yet. Below is a list of upcoming features:</p> <ul> <li>Build nearly any puzzle in 3D to 7D space</li> <li>Complete overhaul of the graphics engine</li> <li>Built-in timer for speedsolves, including a configurable autosplitter</li> <li>Timeline of progress during solve</li> <li>More piece filter customization</li> </ul> <p>See Hactar\u2019s website for more details.</p> <p> </p> <p> </p> <p> Development screenshots by Hactar  </p>"},{"location":"software/magiccube4d/","title":"Magic Cube 4D","text":"<p>Magic Cube 4D (MC4D) was one of the first ever programs capable of simulating higher dimensional twisty puzzles. It was first released in 1988 and was developed by Melinda Green, Don Hatch, Jay Berkenbilt, and Roice Nelson.</p> <p> <p> 3<sup>4</sup> puzzle in Magic Cube 4D  </p>"},{"location":"software/magiccube4d/#downloadinstallation","title":"Download/installation","text":"<p>Magic Cube 4D requires java to be installed. Once you have java, go to the Superliminal website and click on the <code>Click here to download MagicCube4D</code> button. Save the executable <code>mc4d-4-3-343.jar</code> file somewhere you will remember, as this file is how you open the program.</p>"},{"location":"software/magiccube4d/#alternative-versions","title":"Alternative versions","text":""},{"location":"software/magiccube4d/#raynefork","title":"Raynefork","text":"<p>Raynefork is Raymond Zhao\u2019s version of MC4D, which has the updated default colour scheme (standard 3<sup>3</sup> colours plus pink/purple), and some more options in the settings menu. It can be found from its GitHub here.</p>"},{"location":"software/magiccube4d/#dons-version","title":"Don\u2019s version","text":"<p>Don\u2019s version contains some 2D puzzles, many 3D puzzles, and some interesting 4D puzzles. It also has a menu for 5D and 6D puzzles, however they don\u2019t work when you select them. Don\u2019s version can be downloaded from its GitHub here.</p>"},{"location":"software/magiccube4d/#troubleshooting","title":"Troubleshooting","text":"<p>Try reading MC4D\u2019s FAQ on the superliminal website. If you\u2019re still having an issue, try asking for help on the Discord server or mailing list.</p> my computer wants to open the <code>.jar</code> file with notepad <p>This means that you haven\u2019t installed java properly. Make sure to get the newest version from Java\u2019s website. After the installation, right click on the <code>mc4d-4-3-343.jar</code> file, and click <code>open with Java(TM) Platform SE Binary</code>.</p> facecolors.txt doesn\u2019t change my colors <ol> <li>Try closing and reopening the program, and then reloading the puzzle using the menu.</li> <li>If you\u2019re on windows and you have show file extensions off in settings, then you may have accidentally named the file <code>facecolors.txt.txt</code>. Try renaming it to just <code>facecolors</code>. (Alternatively, enable show file extensions in settings)</li> </ol>"},{"location":"software/magicpuzzleultimate/","title":"Magic Puzzle Ultimate","text":"<p>Magic Puzzle Ultimate (MPU or MPUlt) is a higher-dimensional puzzle simulator developed by Andrey Astrelin that can simulate nearly any symmetric doctrinaire puzzle and supports, including user-defined ones.</p> <p>Download MPU</p> <p></p> <p> 32-cell puzzle in MPU </p>"},{"location":"software/magicpuzzleultimate/#records","title":"Records","text":"<p>Some records for the shortest and first solutions of a puzzle are kept on the Superliminal Wiki page.</p>"},{"location":"software/magicpuzzleultimate/#virtual-puzzles","title":"Virtual Puzzles","text":"<p>While we\u2019re waiting for Hyperspeedcube 2.0 to release, Magic Puzzle Ultimate is a great program to get your feet wet in the world of other 4D puzzles.</p> <p>Open the location where your <code>MPUlt</code> folder is. Next, open the <code>MPUlt_puzzles.txt</code> file. This file is a big list of all the puzzles in the program. Now you can copy &amp; paste the puzzles that you want below under their appropriate <code>Block</code>. Just save the file, reopen MPUlt, and the puzzle you added will be in the menu.</p>"},{"location":"software/magicpuzzleultimate/#puzzle-definitions","title":"Puzzle Definitions","text":"3D Puzzles 3x3x3 3x3x3<pre><code>Puzzle 3x3x3\nDim 3\nNAxis 1\nFaces 1,0,0\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,0,0\nTwists 0,1,0/0,1,1\nCuts -0.33 0.33\n</code></pre> Skewb Skewb<pre><code>Puzzle Skewb\nDim 3\nNAxis 1\nFaces 1,0,0\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,1,1\nTwists 1,-1,0/1,0,-1\nCuts 0\n</code></pre> Compy Rainbow Compy Rainbow<pre><code>Puzzle Compy_Rainbow\nDim 3\nNAxis 1\nFaces 1,0,0 0.6667,0.6667,0.6667\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,1,1\nTwists 1,-1,0/1,0,-1\nCuts -0.45 0.45\nFixedMask 2\n</code></pre> Cuboctahedron Cuboctahedron<pre><code>Puzzle Cuboctahedron\nDim 3\nNAxis 2\nFaces 1,0,0 0.667,0.667,0.667\nGroup 1,0,0/1,1,0 1,0,0/1,0,1\nAxis 1,0,0\nTwists 0,1,0/0,1,1\nCuts 0.5 -0.5\nAxis 1,1,1\nTwists 1,-1,0/1,0,-1\nCuts 0.5 -0.5\n</code></pre> 4D Puzzles Tesseract Family 2x2x1x1 2x2x1x1<pre><code>Puzzle 2x2x1x1\nDim 0\nNAxis 2\nFaces 1,0,0,0 0,0,0,0.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,1,1\n</code></pre> 2x2x2x1 2x2x2x1<pre><code>Puzzle 2x2x2x1\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,0,0.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts 0 0\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts\n</code></pre> 2x2x2x3 2x2x2x3<pre><code>Puzzle 2x2x2x3\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,0,1.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts 0\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts 0.5 -0.5\n</code></pre> 2x2x3x3 2x2x3x3<pre><code>Puzzle 2x2x3x3\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1.5,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nAxis 1,0,0,0\nTwists 0,0,1,0/0,0,1,1 0,1,0,0/0,0,1,0 0,1,0,0/0,0,1,1\nCuts 0\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 0,0,0,1/1,0,0,0 0,0,0,1/1,1,0,0\nCuts 0.5 -0.5\n</code></pre> 2x2x3x4 2x2x3x4<pre><code>Puzzle 2x2x3x4\nDim 4\nNAxis 3\nFaces 1,0,0,0 0,0,1.5,0 0,0,0,2\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts 0\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,0,1 0,0,0,1/0,1,0,0\nCuts 0.5 -0.5\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,1,0,0\nCuts 1 0 -1\n</code></pre> 2x3x4x5 2x3x4x5<pre><code>Puzzle 2x3x4x5\nDim 4\nNAxis 4\nFaces 1,0,0,0 0,1.5,0,0 0,0,2,0 0,0,0,2.5\nGroup 1,0,0,0/0,1,0,0 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,1,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts 0\nAxis 0,1,0,0\nTwists 1,0,0,0/0,0,1,0 1,0,0,0/0,0,0,1 0,0,1,0/0,0,0,1\nCuts 0.5 -0.5\nAxis 0,0,1,0\nTwists 1,0,0,0/0,1,0,0 1,0,0,0/0,0,0,1 0,0,0,1/0,1,0,0\nCuts 1 0 -1\nAxis 0,0,0,1\nTwists 1,0,0,0/0,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,1,0,0\nCuts 1.5 0.5 -0.5 -1.5\n</code></pre> 3x3x3x1 3x3x3x1<pre><code>Puzzle 3x3x3x1\nDim 4\nNAxis 2\nFaces 1.5,0,0,0 0,0,0,0.5\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts 0.5 -0.5\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts\n</code></pre> 3x3x3x2 3x3x3x2<pre><code>Puzzle 3x3x3x2\nDim 4\nNAxis 2\nFaces 1.5,0,0,0 0,0,0,1\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,0,0,1\nCuts -0.5 0.5\nAxis 0,0,0,1\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0\nCuts 0\n</code></pre> 4x4x4x4 4x4x4x4<pre><code>Puzzle 4^4\nDim 4\nNAxis 1\nFaces 1,0,0,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,-1,0/0,0,0,1 0,2,-1,-1/0,1,1,-2\nCuts 0.5 0 -0.5\n</code></pre> Other {4}x{4} 3 {4}x{4} 3<pre><code>Puzzle {4}x{4} 3\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,1,0 0,0,1,0/0,0,1,1\nCuts 0.5 -0.5\nAxis 0,0,1,0\nTwists 1,0,0,0/1,1,0,0 1,0,0,0/0,0,0,1\nCuts 0.5 -0.5\n</code></pre> 3^4 Skewb 3^4 Skewb<pre><code>Puzzle 3^4 Skewb\nDim 4\nNAxis 1\nFaces 1,0,0,0\nSimplified\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,1,1,1\nTwists 0,2,-1,-1/0,1,1,-2 1,-1,0,0/0,0,1,-1\nCuts 0\n</code></pre> 5-5_Duotegum 5-5_Duotegum<pre><code>Puzzle 5-5_Duotegum\nDim 4\nNAxis 1\nFaces -1,1,0,0\nGroup 1,0,0,0/0.809016994,0,0.587785252,0 1,1,0,0/0,0,1,1\nAxis -1,1,0,0\nTwists 0,0,1,0/0,0,0,1 1,1,0,0/0,0,1,1 1,1,0,0/0,0,-1,1\nCuts 0.65\n</code></pre> 16-cell Face Turning 16-cell Face Turning<pre><code>Puzzle 16-cell_FT\nDim 4\nNAxis 1\nFaces 1,1,1,1\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,1,1,1\nTwists 0,2,-1,-1/0,1,1,-2 1,-1,0,0/0,0,1,-1\nCuts 0.6 -0.6\nFixedMask 2\n</code></pre> Chamfered Pentagonal Duoprism Chamfered Pentagonal Duoprism<pre><code>Puzzle Chamfered_Pentagonal_Duoprism\nDim 4\nNAxis 2\nFaces -1.41429,0,0,0 1.41429,0,0,0 -1,1,0,0\nGroup 1,0,0,0/0.809016994,0,0.587785252,0 1,1,0,0/0,0,1,1\nAxis -1,0,0,0\nTwists 0,1,0,0/0,0.809016994,0,0.587785252 0,0,1,0/0,0,0,1\nCuts 1.3 -1.23\nAxis -1,1,0,0\nTwists 0,0,1,0/0,0,0,1 1,1,0,0/0,0,1,1 1,1,0,0/0,0,-1,1\nCuts 0.85\n</code></pre> Chamefered Tesseract Chamfered Tesseract<pre><code>Puzzle Chamfered_Tesseract\nDim 4\nNAxis 2\nFaces 1,0,0,0 0.70710678,0.70710678,0,0\nGroup 1,0,0,0/1,1,0,0 1,0,0,0/1,0,1,0 1,0,0,0/1,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,0,0/0,1,0,1 0,0,1,0/0,0,1,1\nCuts 0.85 -0.85\nAxis 1,1,0,0\nTwists 0,0,1,0/0,0,1,1 1,-1,0,0/0,0,1,0 1,-1,0,0/0,0,1,1\nCuts 0.57 -0.57\n</code></pre> Octahedral Prism Octahedral Prism<pre><code>Puzzle Octahedral_Prism\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,1,1,1\nGroup 1,0,0,0/0,1,0,0 0,1,0,0/0,1,1,0 0,1,0,0/0,1,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,1,0 0,1,1,0/0,0,1,1 0,1,0,0/0,0,1,1\nCuts 0.5 -0.5\nAxis 0,1,1,1\nTwists 0,1,-1,0/0,1,0,-1 1,0,0,0/0,1,-1,0\nCuts 0.5 -0.5\n</code></pre> Snub 24-cell Snub 24-cell<pre><code>Puzzle Snub24cell\nDim 4\nNAxis 2\nFaces 1,0,0,0 0.809017,0.809017,0,0 0.9045085,0.6545085,0.25,0\n#Faces 1,0,0,0 0.809017,0.809017,0,0 0.9045085,0.6545085,0.25,0 0.9045085,0.6545085,-0.25,0\nGroup 0,2,-1,-1/0,1,1,-2 0,1,1,2/0,2,-1,1 2,-2,-2,0/1,-1,-1,3\nAxis 1,0,0,0\nTwists 0,2,-1,-1/0,1,1,-2 0,0,1,0/0,0,0,1 0,1,1,2/0,2,-1,1\nCuts 0.9 -0.9\nFixedMask 2\nAxis 0.809017,0.809017,0,0\nTwists 2,-2,-2,0/1,-1,-1,3 1,-1,-1,-3/2,-2,-2,0 0,0,0,1/0,0,1,0\nCuts 0.95 -0.95\nFixedMask 2\n</code></pre> Square Antiprism Prism Square Antiprism Prism<pre><code>Puzzle Square_Antiprism_Prism\nDim 4\nNAxis 3\nFaces -0.5,0,0,0 0,0,0.42044820,0 0,0.56903559,0.14014940,0\nGroup 0,0,1,0/0,0.38268343,0,0.92387953 0,0,0,1/0,1,0,1 1,0,0,0/0,0,0,1\nAxis 1,0,0,0\nTwists 0,1,0,0/0,1,0,1 0,0,1,0/0,0.38268343,0,0.92387953 0,0,1,0/0,-0.38268343,0,0.92387953\nCuts 0.1666 -0.1666\nAxis 0,0,1,0\nTwists 0,1,0,0/0,1,0,1 1,0,0,0/0,1,0,0 1,0,0,0/0,1,0,1\nCuts 0.1235 -0.1235\nAxis 0,0.56903559,0.14014940,0\nTwists 1,0,0,0/0,0,0,1\nCuts 0.621\n</code></pre> Triangular Antitegmatic Icoschoron Triangular Antitegmatic Icosachoron<pre><code>Puzzle Triangular-antitegmatic_Icosachoron\nDim 4\nNAxis 1\nFaces 1,0,0,0\nGroup 1,0,0,0/0.5,0.866025404,0,0 0,0.577350269,0.816496581,0/0,0,0.612372436,0.790569415\n#1,0,0,0/0.5,sqrt(3)/2,0,0 0,1/sqrt(3),sqrt(2/3),0/0,0,1/sqrt(6),sqrt(5/6)\nAxis 1,0,0,0\nTwists 0,0.577350269,0.816496581,0/0,0,0.612372436,0.790569415 0,0.790569,-0.559017,0.25/0,0.57735,1.22474,0.912871\nCuts 0.75 -0.75\n</code></pre> 5D Puzzles Penteract Family 1x1x1x1x2 1x1x1x1x2<pre><code>Puzzle 1x1x1x1x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,0,0,0,1\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/1,0,0,1,0 1,0,0,0,0/0,0,0,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0 0,1,0,0,0/0,0,0,0,1\nCuts\nAxis 0,0,0,0,1\nTwists 1,0,0,0,0/1,1,0,0,0\nCuts 0\n</code></pre> 1x1x1x2x2 1x1x1x2x2<pre><code>Puzzle 1x1x1x2x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,0,0,1,0\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/0,0,0,1,0 0,0,0,1,0/0,0,0,1,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0 0,1,0,0,0/0,0,0,1,0 0,0,0,1,0/0,0,0,1,1\nCuts\nAxis 0,0,0,1,0\nTwists 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/0,0,0,0,1\nCuts 0\n</code></pre> 1x1x2x2x2 1x1x2x2x2<pre><code>Puzzle 1x1x2x2x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,0,1,0,0\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/0,0,1,0,0 0,0,1,0,0/0,0,1,1,0 0,0,1,0,0/0,0,1,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,0,1,0,0 0,0,1,0,0/0,0,1,1,0\nCuts\nAxis 0,0,1,0,0\nTwists 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/0,0,0,1,0 0,0,0,1,0/0,0,0,1,1\nCuts 0\n</code></pre> 1x2x2x2x2 1x2x2x2x2<pre><code>Puzzle 1x2x2x2x2\nDim 5\nNAxis 2\nFaces 0.5,0,0,0,0 0,1,0,0,0\nGroup 1,0,0,0,0/0,1,0,0,0 0,1,0,0,0/0,1,1,0,0 0,1,0,0,0/0,1,0,1,0 0,1,0,0,0/0,1,0,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0\nCuts\nAxis 0,1,0,0,0\nTwists 1,0,0,0,0/0,0,1,0,0 0,0,1,0,0/0,0,1,1,0\nCuts 0\n</code></pre> 2x2x2x2x2 2x2x2x2x2<pre><code>Puzzle 2^5\nDim 5\nNAxis 1\nFaces 1,0,0,0,0\nGroup 1,0,0,0,0/1,1,0,0,0 1,0,0,0,0/1,0,1,0,0 1,0,0,0,0/1,0,0,1,0 1,0,0,0,0/1,0,0,0,1\nAxis 1,0,0,0,0\nTwists 0,1,0,0,0/0,1,1,0,0\nCuts 0\n</code></pre> Other Simplex Prism Simplex Prism<pre><code>Puzzle Simplex_Prism\nDim 5\nNAxis 2\nFaces 0,0,0,0,1 1,0,0,0,0\nGroup 1,0,0,0,0 0,0,1,1,0/0,0,1,-1,0 0,2,-1,-1,0/0,1,1,-2,0 0,2,-2,0,0/0,1,1,-1,-2.236068\nAxis 0,0,0,0,1\nTwists 1,0,0,0,0/0,1,-1,0,0 0,0,1,1,0/0,0,1,-1,0 0,2,-1,-1,0/0,1,1,-2,0\nCuts 0\nAxis 1,0,0,0,0\nTwists 0,2,-1,-1,0/0,1,1,-2,0\nCuts 0\n</code></pre> {3,3}x{4} {3,3}x{4}<pre><code>Puzzle {3,3}x{4}\nDim 5\nNAxis 2\nFaces 1,1,1,0,0 0,0,0,1.73205081,0\nGroup 1,1,0,0,0/1,0,-1,0,0 1,1,0,0,0/0,1,-1,0,0 0,0,0,1,0/0,0,0,1,1\nAxis 1,1,1,0,0\nTwists 0,0,0,1,0/0,0,0,1,1 1,-1,0,0,0/1,0,-1,0,0 1,-1,0,0,0/0,0,0,1,0\nCuts -0.33333\nAxis 0,0,0,1,0\nTwists 1,1,0,0,0/1,0,-1,0,0 0,0,0,0,1/1,-1,0,0,0\nCuts 0\n</code></pre>"},{"location":"software/magicpuzzleultimate/#making-your-own-puzzles","title":"Making your own puzzles","text":"<p>If you figure out the notation, you can try adding your own puzzles. You define the symmetry group, rotational axes, cutting planes, possible twists and puzzle boundary.</p> <p>There is also a general formula for 4D duoprism puzzles, made by Luna: {p}x{q}<pre><code>Puzzle {p}x{q}\nDim 4\nNAxis 2\nFaces 1,0,0,0 0,0,1,0\nGroup 1,0,0,0/1,tan(pi/p),0,0 0,0,1,0/0,0,1,tan(pi/q)\nAxis 1,0,0,0\nTwists 0,1,0,0/0,0,0,1 0,0,1,0/0,0,1,tan(pi/q)\nCuts ...\nAxis 0,0,1,0\nTwists 0,0,0,1/0,1,0,0 1,0,0,0/1,tan(pi/p),0,0\nCuts ...\n</code></pre></p>"},{"location":"techniques/","title":"Solving Techniques","text":"<p>Hypercubing methods typically rely on a few fundamental techniques. By mastering these, you can even develop your own solutions to new puzzles.</p> <p>Learn Notation before trying to learn any of these techniques</p> <ul> <li>Commutators</li> <li>RKT</li> </ul>"},{"location":"techniques/commutators/","title":"Commutators","text":"<p>A commutator (or \u201ccomm\u201d) is a sequence of moves where you do a sequence A, then a sequence B, then the inverse of A, and finally the inverse of B. Usually, you want the intersection of the pieces affected by sequence A and the pieces affected by sequence B to be small but non-empty. In turn, creating a commutator with those sequences makes it easier to solve a puzzle by only affecting a few specific pieces at a time.</p> <p>One of the earliest solutions for the 3x3x3x3 was The Ultimate Solution to a 3x3x3x3 by Roice Nelson, which made heavy use of intuitive setup moves and commutators. Commutators were also much easier to use in MC4D due to its Macro feature, which allowed users to record sequences of moves and then replay them later from any angle.</p>"},{"location":"techniques/commutators/#notation","title":"Notation","text":"<p>Commutator notation extends traditional twisty puzzle notation by adding the following definitions:</p> <ul> <li>Commutators are notated <code>[A, B]</code>, which expands to <code>A B A' B'</code>.</li> <li>Conjugates are notated <code>[A: B]</code>, which expands to <code>A B A'</code>.</li> </ul> <p>Here are some example commutators that can be executed on a 3x3x3: - <code>[R, U]</code> expands to <code>R U R' U'</code>. - <code>[M', U2]</code> expands to <code>M' U2 M U2</code>, which cycles 3 edges on the M slice. - <code>[D: [M', U2]]</code> expands to <code>D (M' U2 M U2) D'</code>, which cycles 3 slightly different edges. Conjugates are often combined with commutators to influence different sets of pieces. - <code>[F: [R, U]]</code> expands to <code>[F: R U R' U']</code>, which expands further to <code>F (R U R' U') F'</code>. - <code>[D, [R, U]]</code> expands to <code>D (R U R' U') D' (U R U' R')</code>, which cycles 3 corners on the D layer.</p> <p>(Parentheses are added for readability but have no special meaning.)</p>"},{"location":"techniques/commutators/#strategy","title":"Strategy","text":"<p>Once you find commutators for cycling different types of pieces on a puzzle (2c, 3c, etc) then you can almost solve the whole thing! (There may be some situations where you need an algorithm to swap 2 pieces of a type and 2 of a different type.)</p>"},{"location":"techniques/rkt/","title":"RKT","text":"<p>You must know 3<sup>4</sup> notation in order for this page to make sense!</p> <p>RKT is a technique that lets you treat a single cell of a (cell-turning) higher dimensional puzzle as if it were a lower dimensional puzzle. This is very useful to do moves that damage fewer pieces. For example: RKT lets you treat a side of a 3<sup>4</sup> just like a 3<sup>3</sup> cube, meaning that you can use all the 3D algorithms you already know to solve the full 4D puzzle.</p> <p>It has been invented independently several times, but was mainly popularized by Raymond Zhao in his article here.</p>"},{"location":"techniques/rkt/#naming","title":"Naming","text":"<p>Other proposed names:</p> <ul> <li>SFM (Single Facet Manipulation)</li> <li>FRM (Facet Redution Method)</li> </ul> <p>The name RKT comes from the move set <code>&lt;RK,T*&gt;</code> on n<sup>4</sup> puzzles (in the old notation, the Inside and Outside cells were called Top and Kata). In the new notation it should be called ROI, but the old name stuck.</p> <p>Grant</p> <p>Also it\u2019s the part of the solve where you can get ReKT</p>"},{"location":"techniques/rkt/#doing-moves-with-rkt-n4","title":"Doing moves with RKT (n<sup>4</sup>)","text":"<p>RKT lets us do any n<sup>3</sup> sequence of moves on one side of an n<sup>4</sup>. The beginner\u2019s way to learn this is by \u201ctranslating\u201d 3D algorithms into RKT (although this is not the best way to think about how RKT works beacuse you can really perform any sequence of moves). Below is a simple 3 step guide to translate your algorithms into RKT.</p> <p>Example: Sune algorithm with RKT</p> <p>Say you want to do the Sune algorithm <code>R U R' U R U2 R'</code> with RKT. The first step is to try and think of how you can execute the algorithm using only R moves and cube rotations. <code>R U R' U R U2 R'</code> becomes <code>R z R z' R' z R z' R z R2 z' R'</code>. Now we replace R with RO, and cube rotations with I cell rotations: <code>RO IF RO IF' RO' IF RO IF' RO IF RO2 IF' RO'</code></p> <p></p> <ol> <li>Rewrite the algorithm to only use cube rotations and R moves</li> <li>Rewrite cube rotations in this new algorithm (<code>x</code>, <code>y</code>, or <code>z</code>) to their respective I cell rotation (<code>IR</code>, <code>IU</code>, <code>IF</code>)</li> <li>Replace all R moves with their RO counterpart</li> </ol> <p>This can definitely be very confusing and disorienting to beginners, as you have to think about 3x3x3 moves with only R moves and rotations. It takes a lot of practice to get comfortable with RKT, but it is an extremely powerful technique.</p> <p>The best way to learn RKT before doing your first 3<sup>4</sup> solve is by manually scrambling the last cell using any RO moves and random I cell rotations until it looks scrambled. Then practice doing PLC by solving it with RKT.</p> <p>Tip</p> <p>Even though this technique is called RKT, it is not limited to those types of turns. Thus, you can use LO and I- moves instead, or rotate your view and use RU and D- instead of RK and I-.</p> <p>Another popular way to do RKT is to use wide O cell turns (instead of normal I cell turns). This has the benefit of keeping the cell you\u2019re doing RKT to in the same orientation the entire time. Instead of rotating a side of the I cell to the RI plane, you rotate all the outside layers over the side that you\u2019re twisting.</p>"},{"location":"techniques/rkt/#parity","title":"Parity","text":"<p>RKT Parity</p> <p></p> <p>RKT parity is a state you can get to that appears to rotate a single layer of a cell by 180\u00b0. If you try and fix this with RKT, then the outer layers will be off by 180\u00b0. This means that you must use an algorithm (or intuition) to solve it.</p> <p>You can use a 3D supercube algorithm that rotates the U center 180\u00b0 (<code>(R U R' U)5</code>, or <code>(L R U2 R' L' U)2</code>).</p> <p>Harder to memorize (but much lower in movecount) is this 9-mover RKT parity alg: <code>IU UR IU' IF' UO' IF RF UR RF' UIR</code>, found by Tetrian22.</p> <ul> <li>3<sup>4</sup> Commutators List by Alvin (RKT parity algs are near the bottom)</li> <li>PLL + RKT parity algs by Eff</li> </ul> <p>On 2<sup>4</sup>, the algorithm is shorter because it doesn\u2019t have to worry about messing up other pieces besides corners. A commonly used one is <code>R2 B2 R2 U R2 B2 R2 U'</code><sub>RKT</sub>.</p> <p>On bigger n<sup>4</sup> puzzles (where \\(n&gt;3\\)), it can look like a single slice layer of a cell is off by 180\u00b0. An intuitive way to solve this is to do the 2<sup>4</sup> RKT parity algorithm with wide moves, and then the normal 3<sup>4</sup> RKT parity algorithm. It can also be avoided by just lining up your slice the same way you line up centers in 3D before finishing last 4 edges (when using freeslice).</p> <p><code>[f' r': [[r' U' l': D2], Iy2]]</code> (swaps UF and UR)</p>"},{"location":"techniques/rkt/#debt","title":"Debt","text":"<p>RKT Debt is when the R cell isn\u2019t aligned with the rest of the puzzle aftering performing an algorithm or sequence of moves with RKT. For example: after executing a T perm algorithm with RKT the R cell will be misaligned by 90\u00b0. RKT Debt always has to be \u201cpaid back\u201d at some point during the solve. During complicated setup moves for fancy inserts, RKT debt can be used as \u201cammo\u201d. That is, undoing the debt in a useful way to help solve the puzzle. An easy way for beginners to \u201cavoid\u201d debt is to just do a move on a layer that you don\u2019t care about messing up at that point in the solve. For example: in a CFOP solve during the final F2L-b pair insertion, you could do any U* move that fixes the debt.</p>"},{"location":"techniques/rkt/#cancels","title":"Cancels","text":"<p>Sune with RKT: left = normal RKT, right = RKT cancel</p> <p></p> <p>RKT cancelling is a technique that reduces the move count of certain RKT algorithms and triggers by abusing symmetry of rotations. HactarCE made a program called RocKeT to find cancels for 3<sup>4</sup> algorithms. Often, it just involves inserting some flipping moves at certain points throughout the algorithm.</p> <p>Consider <code>R U R' U'</code>. Conventional RKT rotates after every move, but we don\u2019t have to do that. We can build up multiple moves of RKT debt and then cancel them later:</p> <ul> <li><code>RO UO</code> \u2014 do <code>R U</code> using RKT, building up two moves of RKT debt (<code>R U</code>)</li> <li><code>IF RO'</code> \u2014 do <code>R'</code> using RKT, undoing the debt from <code>U</code></li> <li><code>IF2 UO'</code> \u2014 do <code>U'</code> using RKT, undoing the debt from the <code>R</code></li> </ul> <p>But we can do even better!</p> <ul> <li><code>RO UO</code> \u2014 do <code>R U</code> using RKT</li> <li><code>IUR</code> \u2014 swap <code>R</code> with <code>U</code></li> <li><code>UO' RO'</code> \u2014 do <code>R' U'</code> using RKT (because we swapped <code>R</code> and <code>U</code>), undoing the debt from <code>R U</code></li> </ul> <p>If you squint, you might notice that this is a conjugate <code>[RO UO: IUR]</code>. This corresponds to the fact that <code>R U R' U'</code> can be written as a conjugate where one part is a pure rotation: <code>[R U: z x2]</code>. When executing this algorithm, we apply it to <code>I</code> with the rotation (so it\u2019s equivalent to <code>R U R' U'</code>) and to the outer layers without the rotation (so <code>[RU: _]</code> expands to <code>R U U' R'</code>, which completely cancels out). This is the fundamental theory behind how to do RKT cancels: by rewriting algorithms as conjugates and commutators with pure rotations.</p> <p>Recall how in 3D you can replace a <code>U y'</code> with <code>Dw</code>. We can do the same thing here: replace <code>IUR</code> with <code>{1-2}OUR</code>, which is a rotation of the outer layers instead of the inner layers. Now it just looks like a normal algorithm with a flip thrown in the middle: <code>RO UO {1-2}OUR RO' UO'</code>. So we can notate it a little more simply: <code>R U {1-2}OUR R' U'</code></p> <p>Here\u2019s a more complex example, the Sune algorithm: <code>RO UO RO' {1-2}OUR UO RO {1-2}OUR UO2 RO'</code>. This works because you can rewrite Sune using conjugates with rotations: <code>[R U: [R': z x2] [U: z x2]]</code>. Notice how if you remove the rotations, the whole thing cancels out. (You don\u2019t need to expand the conjugates to see this.)</p> <p>Warning</p> <p>You do not need to learn RKT cancel algs to solve any puzzle. RKT can and should be done completely intuitively unless you are already speedsolving at a high level and wish to improve this step.</p> RKT Cancel Algs"},{"location":"techniques/rkt/#notation","title":"Notation","text":"<ul> <li>single letter moves are the \u201cbig 3d\u201d moves. (R = RO, U = UO, etc)</li> </ul>"},{"location":"techniques/rkt/#ocll","title":"OCLL","text":"OCLL Case RKT Cancel Algorithm Sune <code>R U R' ORUw U R ORUw U2 R'</code> Antisune <code>R U2 ORUw R' U' ORUw R U' R'</code> H <code>R U2 R' U' ORUw R U R' U' ORUw R U' R'</code> U <code>(R U R' U R U2 R') IU (R U2 R' U' R U' R') IU'</code> T <code>(R U R' U R U2 R') IU' (R U2 R' U' R U' R') IU</code> L <code>(R U R' U R U2 R') IU2 (R U2 R' U' R U' R') IU2</code> Pi <code>R U2 ORUw R2 U' R2 U' R2 ORUw U2 R</code>"},{"location":"techniques/rkt/#epll","title":"EPLL","text":"EPLL Case RKT Cancel Algorithm Ub <code>R2 U R U ORUw R' U' R' U' R' ORUw U R'</code> Ua <code>R U' ORUw R U R U R ORUw U' R' U' R2</code> Z <code>(R U' R U R U R U' R' U' R2) IU2 (R2 U R U R' U' R' U' R' U R') IU2</code> <code>M2 U' M U2 M' Iy2 M U2 M' U M2</code> H <code>M2 U' M2 U2 M IU2 M' U2 M IU2 M U M2</code>"},{"location":"techniques/rkt/#simultaneous-rkt","title":"Simultaneous RKT","text":"<p>RKT can be done by using 2 opposite sides (e.g. <code>RO</code> and <code>LO</code> turns) as well as normal I cell turns. This would allow you to execute <code>&lt;R,U,L&gt;</code> gen algorithms easier, at the cost of having to fix RKT debt on both layers. Another interesting way to do this is in a method like Belt Method. After solving the belt, orienting opposite sides, and separating the colours, the user is left with solving 2 opposite cells that can be solved simultaneously using RKT. If you turn one of the sides with the belt going through it, it essentially does a twist to both cells. One case that can be annoying is if you want to do a 180\u00b0 turn on one side, and a 90\u00b0 turn on the other (you would have to wait until both cells\u2019 debt lined up).</p>"},{"location":"techniques/rkt/#higher-dimensional-rkt","title":"Higher Dimensional RKT","text":"<p>The term Double/Triple/Quadruple/etc\u2026 RKT is used to refer to using RKT to do RKT in 5D+ puzzles. Because RKT lets us treat a single side of an n<sup>d</sup> like an n<sup>d-1</sup>, using RKT on the 3<sup>5</sup> lets us treat a single 4D cell as a 3<sup>4</sup>. And if you know how to use RKT to treat a 3<sup>4</sup> like a 3<sup>3</sup>, then you can do Double RKT. This generalizes to any number of dimensions, but the movecount doubles each time, making it impractical. This is why bigger n<sup>d</sup> puzzles are mostly solved using commutators.</p>"},{"location":"techniques/rkt/#rkt-in-3d","title":"RKT in 3D","text":"<p>If RKT treats a single layer of an n<sup>d</sup> puzzle like an n<sup>d-1</sup> puzzle, then technically the last step of the 3<sup>3</sup> Roux method counts as RKT. The last step of Roux is to permute the M-slice like a 3<sup>2</sup> (with mirroring moves allowed).</p> <p>Another thing that \u201cfeels like RKT\u201d is solving 3x3xn cuboids where \\(n&gt;3\\). A typical strategy for these is to solve from the innermost layers to the outermost layers, treating it as several nested 3x3x2 puzzles. Doing an R2 on the whole puzzle does an R2 to each of the subpuzzles.</p>"},{"location":"theory/gods-number/","title":"God\u2019s Number","text":"<p>God\u2019s number is the minimum number of moves that is sufficient to solve a twisty puzzle from any starting position. For 3x3x3, this has been been proven to be 20 HTM (or 26 QTM).</p> <p>God\u2019s number for 3<sup>3</sup> took lots of creative mathematical work and 35 years of CPU time to scan \\(\\sim 4.3 \\times 10^{19}\\) states. For comparison, the 2<sup>4</sup> has \\(\\sim 3.4 \\times 10^{27}\\) states and 4<sup>3</sup> has \\(\\sim 7.4 \\times 10^{45}\\) states. There isn\u2019t a single nontrivial 4D puzzle for which God\u2019s number is known, let alone remotely possible to compute.</p> <p>There are three strategies we can use to estimate it:</p> <ol> <li>Setting a lower bound using the branching factor of move sequences</li> <li>Setting an upper bound by analyzing the worst-case solution of every stage in a given method</li> <li>Estimation by measuring move counts produced by a near-optimal solver</li> </ol>"},{"location":"theory/gods-number/#2222","title":"2x2x2x2","text":""},{"location":"theory/gods-number/#lower-bound","title":"Lower bound","text":"<p>There are 92 possibilities for the first move and 69 possibilities for each subsequent move.<sup>1</sup> To even have a chance of reaching \\(4.3 \\times 10^{19}\\) states, we need at least that many move sequences. \\(log_{69}(\\frac{4.3 \\times 10^{19}}{92}) \\approx 9.6\\), so God\u2019s number for 2<sup>4</sup> is at least 10.</p>"},{"location":"theory/gods-number/#upper-bound","title":"Upper bound","text":"<p>Anderson Taurence wrote a 3-stage 2<sup>4</sup> solver using a method that has a worst case of 39 STM, so God\u2019s number for 2<sup>4</sup> is at most 39.</p>"},{"location":"theory/gods-number/#estimate","title":"Estimate","text":"<p>Anderson\u2019s solver typically produces solutions in the range of 20-30 STM. Note that this solver does not produce optimal solutions<sup>2</sup>, and we cannot measure every scramble so it\u2019s impossible to use this to put a hard bound on God\u2019s number, but God\u2019s number for 2<sup>4</sup> is probably not higher than 20-30.</p>"},{"location":"theory/gods-number/#conclusion","title":"Conclusion","text":"<p>God\u2019s number for 2<sup>4</sup> is definitely between 10 and 39 inclusive, and probably \\(\\sim 15 \\pm 5\\).</p> <p>Could this be improved?</p> <ul> <li>A better method or lots of compute time might improve slightly on the upper bound</li> <li>Unless there is some fundamental breakthrough in our understanding of computation, there\u2019s basically no way to improve on the lower bound or estimate.</li> </ul> <p>If you\u2019re an expert in quantum computing then perhaps you can devise some clever quantum algorithm to help, but as of 2023 quantum computers haven\u2019t solved a single real-world problem faster than a classical computer so we remain skeptical.</p>"},{"location":"theory/gods-number/#3333","title":"3x3x3x3","text":""},{"location":"theory/gods-number/#lower-bound_1","title":"Lower bound","text":"<p>We can compute a lower bound of 56 in the OBTM. This begins by showing that algorithms of limited length can generate, at most, only a subset of the possible positions on the 3<sup>4</sup>. We then optimize the argument by showing that some positions were over counted.</p> Lower Bound, Winning Ways Method <p>Moves here will be measured using something equivalent (as far as this discussion is concerned) to OBTM. Our focus here is on positions that can be reached by algorithms of a certain length. Wide moves contribute to algorithm length in the same way that single cell turns do (wide move = single cell move + cube rotation, where cube rotations count as 0 moves), so we will make a simplification by restricting to single cell turns. There are 23 moves on each of the 8 cells, so 184 one-move algorithms are possible at any given time.</p> <p>We know the 3<sup>4</sup> can be scrambled in over 1.7 novemtrigintillion ways. When solving, we have 184 choices for the first turn, and 161 (non cancelling) choices for the following turns. The number of positions reachable by 54 turns or fewer is at most</p> \\[1 + 184 \\times \\sum_{n=0}^{53} 161^n \\approx 1.695 \\times 10^{119} &lt; 1.757 \\times 10^{120}.\\] <p>This shows that there exist positions on the 3<sup>4</sup> that require 55 or more turns to solve.</p> <p>In the book Winning Ways for Your Mathematical Plays Vol. 4, the authors optimize this argument (as it applies to the Rubik\u2019s Cube in the half turn metric) by accounting for relations like \\(LR = RL\\). We can apply a similar optimization for the 3<sup>4</sup>.</p> <p>We will refer to the number of possible 3<sup>4</sup> positions after \\(n\\) moves as \\(u_n\\). It is not too hard to convince ourselves that \\(u_1 = 184\\). After turning one cell, moving the same cell again is what we might call a \u201ccancelling move\u201d, since the two moves could have been measured as a single move. So, we have \\(161\\) non cancelling choices for a second move. We should be able to reduce that \\(161\\) further by avoiding double counting positions reachable by two algorithms which differ only by the order of commuting elements.</p> <p>There are different ways that a pair of moves can commute on 3<sup>4</sup>. One is by the cell turns affecting completely distinct subsets of pieces, which happens when turning opposite cells, like \\(OL\\ IL = IL\\ OL\\). This is analogous to the commuting cases on the Rubik\u2019s Cube as addressed in Winning Ways. There is at least one more way, which can involve certain adjacent cell moves. \\(OL\\ LO = LO\\ OL\\) is one example. We have not yet reached a description of all commuting cases of this kind. Accounting for these may allow us to further improve the lower bound. For now, we will factor out the commutativities that we can describe, which we will call \u201copposite-commuting\u201d moves.</p> <p>First, there are \\(161-23 = 138\\) possible non-cancelling, non-opposite-commuting choices for the second move. We\u2019ll add the opposite-commuting cases separately.</p> <p>There are four \u201cflavors\u201d of opposite-commuting cases: I cell moves with O cell moves, R moves with L moves, U moves with D moves, and B moves with F moves. In any of these, choose any one of the 23 moves possible on each cell (order doesn\u2019t matter), so there are \\(23 \\times 23 = 529\\) opposite-commuting cases of each flavor. Then across the four flavors, we have \\(529\\times 4 = 2,116\\) distinct cases after the second move, when it opposite-commuted with the first. So we have that the number of \\(3^4\\) positions after \\(n\\) moves is at most \\(138u_1 + 2,116 = 27,508\\). That is, we can say \\(u_2 \\leq 27,508\\).</p> <p>As a sanity check, we could note at this point the \\(27,508\\) positions after two turns is better than the \\(184\\times 161 = 29,624\\) positions we would have estimated without accounting for opposite-commutativity of two successive turns here.</p> <p>To complete the argument, we can derive a recurrence relation (more accurately a recurrence estimate) that gives us an upper bound on the size of \\(u_{n+2}\\) in terms of \\(u_n\\) and \\(u_{n+1}\\)</p> <p>In the case where the \\(n+2\\)th move will not opposite-commute (or cancel) with the \\(n+1\\)th move, we have \\(138u_{n+1}\\) possible puzzle states. If the \\(n+2\\)th move is going to opposite-commute with the \\(n+1\\)th move, we might have \\(529\\times 4 = 2,116\\) cases to follow up the \\(n\\)th move. However, one of those four flavors of opposite commuting cases would have cancelled with the \\(n\\)th move, so this time we only have \\(529 \\times 3 = 1,587\\) cases to follow the \\(n\\)th move. This gives us the recurrence estimate \\(u_{n+2} \\leq 138u_{n+1} + 1,587u_{n}\\).</p> <p>Note that as we have defined it, \\(u_n\\) is the number of positions accessible by exactly \\(n\\) moves. If we sum the \\(u_n\\)s from 1 to \\(N\\), that will gives us (an upper bound on) the number of positions accessible by \\(n\\) moves or fewer.</p> <p>In this case, our recurrence estimate is an order 2 linear recurrence with constant coefficients. There exists a method to derive a general formula for \\(u_n\\). In the end, we find </p> \\[u_n = C\\lambda_1^n + D\\lambda_2^n,\\] <p>where</p> \\[ \\begin{array}{c c} \\lambda_{1}=69+46\\sqrt{3}, &amp; \\lambda_{2}=69-46\\sqrt{3}, \\\\ C=\\displaystyle \\frac{1}{4}\\left(-22+13\\sqrt{3}\\right), &amp; D=\\displaystyle \\frac{1}{4}\\left(-22-13\\sqrt{3}\\right). \\\\ \\end{array} \\] <p>Finally, the number of positions reachable by 55 turns or fewer is at most</p> \\[1\\ +\\ \\sum_{n=1}^{55}u_n \\approx 3.865 \\times 10^{118} &lt; 1.757 \\times 10^{120}.\\] <p>This shows that there exist positions on the \\(3^4\\) that require 56 or more turns to solve.</p> <p>We should address the other side of the inequality,</p> \\[1.757 \\times 10^{120} &lt;1\\ +\\ \\sum_{n=1}^{56}u_n \\approx 5.746 \\times 10^{120}.\\] <p>So, the argument as applied here can\u2019t necessarily show that there are positions requiring 57 or more turns to solve.</p>"},{"location":"theory/gods-number/#upper-bound_1","title":"Upper bound","text":"<p>Hactar computed a generous upper bound of 570 STM using CFOP.</p> Step-by-step breakdown <ul> <li>cross: 6 pieces x 4 STM per piece = 24 STM</li> <li>F2L-a: 12 pairs x 13 STM per pair = 156 STM<ul> <li>3 STM to put corner on I (with corner first-cell color not on I)</li> <li>3 STM to put edge on I</li> <li>3 STM to pair + 2 STM to fix RKT debt</li> <li>4 STM to insert</li> </ul> </li> <li>F2L-b: 8 pairs x 26 STM per pair = 208 STM<ul> <li>6 STM to put corner on I (with corner first-cell color not on I)</li> <li>6 STM to put edge on I</li> <li>4 RKT = 7 STM to pair them and fix RKT debt</li> <li>7 STM to insert</li> </ul> </li> <li>ridge OLC: worst case (all ridges bad) is 17 STM</li> <li>edge OLC:<ul> <li>solve at least 3/4 pieces in each slice using OCLL: 3 slices x 11 STM = 33 STM</li> <li>worst case is 3 unsolved edges remaining: 5 RKT + 9 STM = 18 STM<ul> <li>2 RKT to arrange any two edges so that they are adjacent in the same slice but do not form a valid 2-corner OLL case</li> <li>2 RKT to place the last edge in a way that forms a valid 3-corner OLL case</li> <li>1 RKT to fix RKT debt</li> <li>9 STM to solve the OLL case (consider OCLLs with at least one corner solved)</li> </ul> </li> </ul> </li> <li>corner OLC: 58 STM<ul> <li>11 RKT = 23 STM to solve a 2^3 into a state where the D and U layer each contains a valid 3-corner OLC case<ul> <li>if there is exactly one remaining corner unsolved, then misorient two corners when solving one of those 3-corner OLC cases.</li> <li>if there are exactly two remaining corners unsolved, then misorient one corner when solving one of the 3-corner OLC cases.</li> <li>arrange the cases so that the 3 unsolved corners left will form a sune</li> </ul> </li> <li>13 STM to solve each OLL case on U/D using RKT cancels (worst case is double antisune)</li> <li>9 STM to solve the remaining sune case</li> </ul> </li> <li>ridge PLC: 14 STM (2x U perm in the worst case)</li> <li>PLC: 42 STM<ul> <li>solve a 3^3 using God\u2019s algorithm in 20 moves</li> <li>adjust I cell to solve</li> </ul> </li> </ul>"},{"location":"theory/gods-number/#estimate_1","title":"Estimate","text":"<p>We do not have a near-optimal 3<sup>4</sup> solver. Good FMC speedsolves average 200 STM, so God\u2019s number is probably lower than that.</p>"},{"location":"theory/gods-number/#conclusion_1","title":"Conclusion","text":"<p>God\u2019s number for 3<sup>4</sup> is definitely between 55 and 570 inclusive, and probably \\(\\sim 125 \\pm 50\\)<sup>[citation needed]</sup>.</p> <p>Could this be improved?</p> <ul> <li>A better method could easily improve the upper bound, probably to around 300<sup>[citation needed]</sup>.</li> <li>A better manual computation could give a slightly better lower bound.</li> <li>An automated 3<sup>4</sup> solver or search program could give a much better estimate.</li> </ul> <ol> <li> <p>Only one cell on each axis matters. Each face has 24 orientations, but one of those is the identity and so doesn\u2019t matter. \\(23 \\times 4 = 92\\). For subsequent moves, must turn a different axis. \\(23 \\times 3 = 69\\) (nice)\u00a0\u21a9</p> </li> <li> <p>It does converge on optimal solutions when run for a very long time, but this is impractical for all but the simplest scrambles.\u00a0\u21a9</p> </li> </ol>"}]}